/*! For license information please see 512.js.LICENSE.txt */
"use strict";(self.webpackChunknpwd_crypto=self.webpackChunknpwd_crypto||[]).push([[512],{5512:(t,e,i)=>{function s(){}i.r(e),i.d(e,{Animation:()=>mi,Animations:()=>xi,ArcElement:()=>vn,BarController:()=>Bi,BarElement:()=>Fn,BasePlatform:()=>Cs,BasicPlatform:()=>Os,BubbleController:()=>Wi,CategoryScale:()=>Po,Chart:()=>pn,DatasetController:()=>Ai,Decimation:()=>Nn,DomPlatform:()=>js,DoughnutController:()=>Ni,Element:()=>Ui,Filler:()=>so,Interaction:()=>ps,Legend:()=>ao,LineController:()=>Hi,LineElement:()=>On,LinearScale:()=>Oo,LogarithmicScale:()=>To,PieController:()=>$i,PointElement:()=>Tn,PolarAreaController:()=>ji,RadarController:()=>Yi,RadialLinearScale:()=>Vo,Scale:()=>is,ScatterController:()=>os,SubTitle:()=>co,Ticks:()=>qi,TimeScale:()=>Uo,TimeSeriesScale:()=>qo,Title:()=>lo,Tooltip:()=>ko,_adapters:()=>hs,_detectPlatform:()=>$s,animator:()=>fi,controllers:()=>as,defaults:()=>Zt,elements:()=>Vn,layouts:()=>Ds,plugins:()=>So,registerables:()=>Go,registry:()=>ns,scales:()=>Ko});const n=function(){let t=0;return function(){return t++}}();function o(t){return null==t}function a(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function r(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const l=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function h(t,e){return l(t)?t:e}function c(t,e){return void 0===t?e:t}const d=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function u(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function f(t,e,i,s){let n,o,l;if(a(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(r(t))for(l=Object.keys(t),o=l.length,n=0;n<o;n++)e.call(i,t[l[n]],l[n])}function g(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function p(t){if(a(t))return t.map(p);if(r(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=p(t[i[n]]);return e}return t}function m(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function b(t,e,i,s){if(!m(t))return;const n=e[t],o=i[t];r(n)&&r(o)?x(n,o,s):e[t]=p(o)}function x(t,e,i){const s=a(e)?e:[e],n=s.length;if(!r(t))return t;const o=(i=i||{}).merger||b;for(let a=0;a<n;++a){if(!r(e=s[a]))continue;const n=Object.keys(e);for(let s=0,a=n.length;s<a;++s)o(n[s],t,e,i)}return t}function _(t,e){return x(t,e,{merger:y})}function y(t,e,i){if(!m(t))return;const s=e[t],n=i[t];r(s)&&r(n)?_(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=p(n))}const v={"":t=>t,x:t=>t.x,y:t=>t.y};function M(t,e){const i=v[e]||(v[e]=function(t){const e=function(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function w(t){return t.charAt(0).toUpperCase()+t.slice(1)}const k=t=>void 0!==t,S=t=>"function"==typeof t,P=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},D=Math.PI,C=2*D,O=C+D,A=Number.POSITIVE_INFINITY,T=D/180,L=D/2,E=D/4,R=2*D/3,I=Math.log10,z=Math.sign;function F(t){const e=Math.round(t);t=B(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(I(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function V(t){return!isNaN(parseFloat(t))&&isFinite(t)}function B(t,e,i){return Math.abs(t-e)<i}function W(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function N(t){return t*(D/180)}function H(t){return t*(180/D)}function j(t){if(!l(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function $(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*D&&(o+=C),{angle:o,distance:n}}function Y(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function U(t,e){return(t-e+O)%C-D}function X(t){return(t%C+C)%C}function q(t,e,i,s){const n=X(t),o=X(e),a=X(i),r=X(o-n),l=X(a-n),h=X(n-o),c=X(n-a);return n===o||n===a||s&&o===a||r>l&&h<c}function K(t,e,i){return Math.max(e,Math.min(i,t))}function G(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function Z(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const J=(t,e,i,s)=>Z(t,i,s?s=>t[s][e]<=i:s=>t[s][e]<i),Q=(t,e,i)=>Z(t,i,(s=>t[s][e]>=i)),tt=["push","pop","shift","splice","unshift"];function et(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(tt.forEach((e=>{delete t[e]})),delete t._chartjs)}function it(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}const st="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function nt(t,e,i){const s=i||(t=>Array.prototype.slice.call(t));let n=!1,o=[];return function(...i){o=s(i),n||(n=!0,st.call(window,(()=>{n=!1,t.apply(e,o)})))}}const ot=t=>"start"===t?"left":"end"===t?"right":"center",at=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function rt(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:h,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=K(Math.min(J(r,a.axis,h).lo,i?s:J(e,l,a.getPixelForValue(h)).lo),0,s-1)),o=u?K(Math.max(J(r,a.axis,c,!0).hi+1,i?0:J(e,l,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function lt(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const ht=t=>0===t||1===t,ct=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*C/i),dt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*C/i)+1,ut={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*L),easeOutSine:t=>Math.sin(t*L),easeInOutSine:t=>-.5*(Math.cos(D*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ht(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ht(t)?t:ct(t,.075,.3),easeOutElastic:t=>ht(t)?t:dt(t,.075,.3),easeInOutElastic(t){const e=.1125;return ht(t)?t:t<.5?.5*ct(2*t,e,.45):.5+.5*dt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-ut.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*ut.easeInBounce(2*t):.5*ut.easeOutBounce(2*t-1)+.5};function ft(t){return t+.5|0}const gt=(t,e,i)=>Math.max(Math.min(t,i),e);function pt(t){return gt(ft(2.55*t),0,255)}function mt(t){return gt(ft(255*t),0,255)}function bt(t){return gt(ft(t/2.55)/100,0,1)}function xt(t){return gt(ft(100*t),0,100)}const _t={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},yt=[..."0123456789ABCDEF"],vt=t=>yt[15&t],Mt=t=>yt[(240&t)>>4]+yt[15&t],wt=t=>(240&t)>>4==(15&t);const kt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function St(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function Pt(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function Dt(t,e,i){const s=St(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function Ct(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,h;return n!==o&&(h=n-o,l=a>.5?h/(2-n-o):h/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,h,n),r=60*r+.5),[0|r,l||0,a]}function Ot(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(mt)}function At(t,e,i){return Ot(St,t,e,i)}function Tt(t){return(t%360+360)%360}const Lt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Et={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Rt;const It=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,zt=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Ft=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Vt(t,e,i){if(t){let s=Ct(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=At(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function Bt(t,e){return t?Object.assign(e||{},t):t}function Wt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=mt(t[3]))):(e=Bt(t,{r:0,g:0,b:0,a:1})).a=mt(e.a),e}function Nt(t){return"r"===t.charAt(0)?function(t){const e=It.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?pt(t):gt(255*t,0,255)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?pt(i):gt(i,0,255)),s=255&(e[4]?pt(s):gt(s,0,255)),n=255&(e[6]?pt(n):gt(n,0,255)),{r:i,g:s,b:n,a:o}}}(t):function(t){const e=kt.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?pt(+e[5]):mt(+e[5]));const n=Tt(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return Ot(Dt,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return Ot(Pt,t,e,i)}(n,o,a):At(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class Ht{constructor(t){if(t instanceof Ht)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=Wt(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*_t[s[1]],g:255&17*_t[s[2]],b:255&17*_t[s[3]],a:5===o?17*_t[s[4]]:255}:7!==o&&9!==o||(n={r:_t[s[1]]<<4|_t[s[2]],g:_t[s[3]]<<4|_t[s[4]],b:_t[s[5]]<<4|_t[s[6]],a:9===o?_t[s[7]]<<4|_t[s[8]]:255})),i=n||function(t){Rt||(Rt=function(){const t={},e=Object.keys(Et),i=Object.keys(Lt);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,Lt[o]);o=parseInt(Et[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),Rt.transparent=[0,0,0,0]);const e=Rt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Nt(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Bt(this._rgb);return t&&(t.a=bt(t.a)),t}set rgb(t){this._rgb=Wt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${bt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>wt(t.r)&&wt(t.g)&&wt(t.b)&&wt(t.a))(t)?vt:Mt,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Ct(t),i=e[0],s=xt(e[1]),n=xt(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${bt(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=Ft(bt(t.r)),n=Ft(bt(t.g)),o=Ft(bt(t.b));return{r:mt(zt(s+i*(Ft(bt(e.r))-s))),g:mt(zt(n+i*(Ft(bt(e.g))-n))),b:mt(zt(o+i*(Ft(bt(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Ht(this.rgb)}alpha(t){return this._rgb.a=mt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=ft(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Vt(this._rgb,2,t),this}darken(t){return Vt(this._rgb,2,-t),this}saturate(t){return Vt(this._rgb,1,t),this}desaturate(t){return Vt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Ct(t);i[0]=Tt(i[0]+e),i=At(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function jt(t){return new Ht(t)}function $t(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Yt(t){return $t(t)?t:jt(t)}function Ut(t){return $t(t)?t:jt(t).saturate(.5).darken(.1).hexString()}const Xt=Object.create(null),qt=Object.create(null);function Kt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function Gt(t,e,i){return"string"==typeof e?x(Kt(t,e),i):x(Kt(t,""),e)}var Zt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Ut(e.backgroundColor),this.hoverBorderColor=(t,e)=>Ut(e.borderColor),this.hoverColor=(t,e)=>Ut(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Gt(this,t,e)}get(t){return Kt(this,t)}describe(t,e){return Gt(qt,t,e)}override(t,e){return Gt(Xt,t,e)}route(t,e,i,s){const n=Kt(this,t),o=Kt(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return r(t)?Object.assign({},e,t):c(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Jt(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function Qt(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let r=0;const l=i.length;let h,c,d,u,f;for(h=0;h<l;h++)if(u=i[h],null!=u&&!0!==a(u))r=Jt(t,n,o,r,u);else if(a(u))for(c=0,d=u.length;c<d;c++)f=u[c],null==f||a(f)||(r=Jt(t,n,o,r,f));t.restore();const g=o.length/2;if(g>i.length){for(h=0;h<g;h++)delete n[o[h]];o.splice(0,g)}return r}function te(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function ee(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function ie(t,e,i,s){se(t,e,i,s,null)}function se(t,e,i,s,n){let o,a,r,l,h,c;const d=e.pointStyle,u=e.rotation,f=e.radius;let g=(u||0)*T;if(d&&"object"==typeof d&&(o=d.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(g),t.drawImage(d,-d.width/2,-d.height/2,d.width,d.height),void t.restore();if(!(isNaN(f)||f<=0)){switch(t.beginPath(),d){default:n?t.ellipse(i,s,n/2,f,0,0,C):t.arc(i,s,f,0,C),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(g)*f,s-Math.cos(g)*f),g+=R,t.lineTo(i+Math.sin(g)*f,s-Math.cos(g)*f),g+=R,t.lineTo(i+Math.sin(g)*f,s-Math.cos(g)*f),t.closePath();break;case"rectRounded":h=.516*f,l=f-h,a=Math.cos(g+E)*l,r=Math.sin(g+E)*l,t.arc(i-a,s-r,h,g-D,g-L),t.arc(i+r,s-a,h,g-L,g),t.arc(i+a,s+r,h,g,g+L),t.arc(i-r,s+a,h,g+L,g+D),t.closePath();break;case"rect":if(!u){l=Math.SQRT1_2*f,c=n?n/2:l,t.rect(i-c,s-l,2*c,2*l);break}g+=E;case"rectRot":a=Math.cos(g)*f,r=Math.sin(g)*f,t.moveTo(i-a,s-r),t.lineTo(i+r,s-a),t.lineTo(i+a,s+r),t.lineTo(i-r,s+a),t.closePath();break;case"crossRot":g+=E;case"cross":a=Math.cos(g)*f,r=Math.sin(g)*f,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r),t.moveTo(i+r,s-a),t.lineTo(i-r,s+a);break;case"star":a=Math.cos(g)*f,r=Math.sin(g)*f,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r),t.moveTo(i+r,s-a),t.lineTo(i-r,s+a),g+=E,a=Math.cos(g)*f,r=Math.sin(g)*f,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r),t.moveTo(i+r,s-a),t.lineTo(i-r,s+a);break;case"line":a=n?n/2:Math.cos(g)*f,r=Math.sin(g)*f,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(g)*f,s+Math.sin(g)*f)}t.fill(),e.borderWidth>0&&t.stroke()}}function ne(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function oe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ae(t){t.restore()}function re(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function le(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function he(t,e,i,s,n,r={}){const l=a(e)?e:[e],h=r.strokeWidth>0&&""!==r.strokeColor;let c,d;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),o(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,r),c=0;c<l.length;++c)d=l[c],h&&(r.strokeColor&&(t.strokeStyle=r.strokeColor),o(r.strokeWidth)||(t.lineWidth=r.strokeWidth),t.strokeText(d,i,s,r.maxWidth)),t.fillText(d,i,s,r.maxWidth),ce(t,i,s,d,r),s+=n.lineHeight;t.restore()}function ce(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function de(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-L,D,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,D,L,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,L,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-L,!0),t.lineTo(i+a.topLeft,s)}const ue=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),fe=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ge(t,e){const i=(""+t).match(ue);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function pe(t,e){const i={},s=r(e),n=s?Object.keys(e):e,o=r(t)?s?i=>c(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=+o(t)||0;return i}function me(t){return pe(t,{top:"y",right:"x",bottom:"y",left:"x"})}function be(t){return pe(t,["topLeft","topRight","bottomLeft","bottomRight"])}function xe(t){const e=me(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function _e(t,e){t=t||{},e=e||Zt.font;let i=c(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=c(t.style,e.style);s&&!(""+s).match(fe)&&(console.warn('Invalid font style specified: "'+s+'"'),s="");const n={family:c(t.family,e.family),lineHeight:ge(c(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:c(t.weight,e.weight),string:""};return n.string=function(t){return!t||o(t.size)||o(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function ye(t,e,i,s){let n,o,r,l=!0;for(n=0,o=t.length;n<o;++n)if(r=t[n],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),l=!1),void 0!==i&&a(r)&&(r=r[i%r.length],l=!1),void 0!==r))return s&&!l&&(s.cacheable=!1),r}function ve(t,e){return Object.assign(Object.create(t),e)}function Me(t,e=[""],i=t,s,n=(()=>t[0])){k(s)||(s=Ee("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:s,_getTarget:n,override:n=>Me([n,...t],e,i,s)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>De(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=Ee(Se(o,t),i),k(n))return Pe(t,n)?Te(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Re(t).includes(e),ownKeys:t=>Re(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function we(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ke(t,s),setContext:e=>we(t,e,i,s),override:n=>we(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>De(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:l}=t;let h=s[e];return S(h)&&l.isScriptable(e)&&(h=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);return r.add(t),e=e(o,a||s),r.delete(t),Pe(t,e)&&(e=Te(n._scopes,n,t,e)),e}(e,h,t,i)),a(h)&&h.length&&(h=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:l}=i;if(k(o.index)&&s(t))e=e[o.index%e.length];else if(r(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const r of i){const i=Te(s,n,t,r);e.push(we(i,o,a&&a[t],l))}}return e}(e,h,t,l.isIndexable)),Pe(e,h)&&(h=we(h,n,o&&o[e],l)),h}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function ke(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:S(i)?i:()=>i,isIndexable:S(s)?s:()=>s}}const Se=(t,e)=>t?t+w(e):e,Pe=(t,e)=>r(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function De(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function Ce(t,e,i){return S(t)?t(e,i):t}const Oe=(t,e)=>!0===t?e:"string"==typeof t?M(e,t):void 0;function Ae(t,e,i,s,n){for(const o of e){const e=Oe(i,o);if(e){t.add(e);const o=Ce(e._fallback,i,n);if(k(o)&&o!==i&&o!==s)return o}else if(!1===e&&k(s)&&i!==s)return null}return!1}function Te(t,e,i,s){const n=e._rootScopes,o=Ce(e._fallback,i,s),l=[...t,...n],h=new Set;h.add(s);let c=Le(h,l,i,o||i,s);return null!==c&&(!k(o)||o===i||(c=Le(h,l,o,c,s),null!==c))&&Me(Array.from(h),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return a(n)&&r(i)?i:n}(e,i,s)))}function Le(t,e,i,s,n){for(;i;)i=Ae(t,e,i,s,n);return i}function Ee(t,e){for(const i of e){if(!i)continue;const e=i[t];if(k(e))return e}}function Re(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ie(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={r:n.parse(M(c,o),h)};return a}const ze=Number.EPSILON||1e-14,Fe=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ve=t=>"x"===t?"y":"x";function Be(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=Y(o,n),l=Y(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=s*h,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function We(t,e,i){return Math.max(Math.min(t,i),e)}function Ne(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ve(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,h=Fe(t,0);for(a=0;a<s;++a)if(r=l,l=h,h=Fe(t,a+1),l){if(h){const t=h[e]-l[e];n[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?z(n[a-1])!==z(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,h=Fe(t,0);for(let c=0;c<s-1;++c)l=h,h=Fe(t,c+1),l&&h&&(B(e[c],0,ze)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=Ve(i),n=t.length;let o,a,r,l=Fe(t,0);for(let h=0;h<n;++h){if(a=r,r=l,l=Fe(t,h+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[h]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[h])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=Be(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=ne(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&ne(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=We(n.cp1x,e.left,e.right),n.cp1y=We(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=We(n.cp2x,e.left,e.right),n.cp2y=We(n.cp2y,e.top,e.bottom)))}(t,i)}function He(){return"undefined"!=typeof window&&"undefined"!=typeof document}function je(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function $e(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Ye=t=>window.getComputedStyle(t,null),Ue=["top","right","bottom","left"];function Xe(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=Ue[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}function qe(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=Ye(i),o="border-box"===n.boxSizing,a=Xe(n,"padding"),r=Xe(n,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/s),y:Math.round((h-u)/g*i.height/s)}}const Ke=t=>Math.round(10*t)/10;function Ge(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=n/s,t.width=o/s;const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const Ze=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Je(t,e){const i=function(t,e){return Ye(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function Qe(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function ti(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function ei(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=Qe(t,n,i),r=Qe(n,o,i),l=Qe(o,e,i),h=Qe(a,r,i),c=Qe(r,l,i);return Qe(h,c,i)}const ii=new Map;function si(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=ii.get(i);return s||(s=new Intl.NumberFormat(t,e),ii.set(i,s)),s}(e,i).format(t)}function ni(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function oi(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function ai(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function ri(t){return"angle"===t?{between:q,compare:U,normalize:X}:{between:G,compare:(t,e)=>t-e,normalize:t=>t}}function li({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function hi(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=ri(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=ri(s),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][s]),n,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[s]),p!==b&&(x=l(p,n,o),null===_&&(x||l(n,b,p)&&0!==r(n,b))&&(_=0===r(p,n)?t:i),null!==_&&(!x||0===r(o,p)||l(o,b,p))&&(g.push(li({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,b=p));return null!==_&&g.push(li({start:_,end:d,loop:u,count:a,style:f})),g}function ci(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=hi(s[n],t.points,e);o.length&&i.push(...o)}return i}function di(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function ui(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var fi=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=st.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const gi="transparent",pi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=Yt(t||gi),n=s.valid&&Yt(e||gi);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class mi{constructor(t,e,i,s){const n=e[i];s=ye([t.to,s,n,t.from]);const o=ye([t.from,n,s]);this._active=!0,this._fn=t.fn||pi[t.type||typeof o],this._easing=ut[t.easing]||ut.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=ye([t.to,e,s,t.from]),this._from=ye([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Zt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const bi=Object.keys(Zt.animation);Zt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Zt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Zt.describe("animations",{_fallback:"animation"}),Zt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class xi{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!r(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const s=t[i];if(!r(s))return;const n={};for(const t of bi)n[t]=s[t];(a(s.properties)&&s.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,n)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){s.push(...this._animateOptions(t,e));continue}const h=e[l];let c=n[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,a);continue}c.cancel()}d&&d.duration?(n[l]=c=new mi(d,t,l,h),s.push(c)):t[l]=h}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(fi.add(this._chart,i),!0):void 0}}function _i(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function yi(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function vi(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,h,c;if(null!==e){for(a=0,r=n.length;a<r;++a){if(h=+n[a],h===i){if(s.all)continue;break}c=t.values[h],l(c)&&(o||0===e||z(e)===z(c))&&(e+=c)}return e}}function Mi(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function wi(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function ki(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Si(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=wi(n,c,o),u[r]=d,u._top=ki(u,a,!0,s.type),u._bottom=ki(u,a,!1,s.type)}}function Pi(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Di(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i]}}}const Ci=t=>"reset"===t||"none"===t,Oi=(t,e)=>e?t:Object.assign({},t);class Ai{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Mi(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Di(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=c(i.xAxisID,Pi(t,"x")),o=e.yAxisID=c(i.yAxisID,Pi(t,"y")),a=e.rAxisID=c(i.rAxisID,Pi(t,"r")),r=e.indexAxis,l=e.iAxisID=s(r,n,o,a),h=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&et(this._data,this),t._stacked&&Di(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(r(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){et(i,this);const t=this._cachedMeta;Di(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),tt.forEach((t=>{const e="_onData"+w(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Mi(e.vScale,e),e.stack!==i.stack&&(s=!0,Di(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Si(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,l=n.axis;let h,c,d,u=0===t&&e===s.length||i._sorted,f=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,d=s;else{d=a(s[t])?this.parseArrayData(i,s,t,e):r(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===c[l]||f&&c[l]<f[l];for(h=0;h<e;++h)i._parsed[h+t]=c=d[h],u&&(n()&&(u=!1),f=c);i._sorted=u}o&&Si(this,d)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),h=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:h||n.parse(l[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={x:n.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let h,c,d,u;for(h=0,c=s;h<c;++h)d=h+i,u=e[d],l[h]={x:n.parse(M(u,a),d),y:o.parse(M(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return vi({keys:yi(s,!0),values:e._stacks[t.axis]},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=vi(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:yi(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:d}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let u,f;function g(){f=s[u];const e=f[a.axis];return!l(f[t.axis])||c>e||d<e}for(u=0;u<o&&(g()||(this.updateRangeFromParsed(h,t,f,r),!n));++u);if(n)for(u=o-1;u>=0;--u)if(!g()){this.updateRangeFromParsed(h,t,f,r);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],l(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return r(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(c(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=_i(t,i),n=_i(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,a,r),h=a;h<a+r;++h){const e=s[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(h=0;h<o.length;++h)o[h].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return ve(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return ve(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&k(i);if(a)return Oi(a,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(Zt.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,s)),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze(Oi(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new xi(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ci(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){Ci(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Ci(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Di(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Ti(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=it(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(k(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),l();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),l();return r}function Li(t,e,i,s){return a(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Ei(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let h,c,d,u;for(h=i,c=i+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(a[h],h),l.push(Li(u,d,o,h));return l}function Ri(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Ii(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=h:(i._bottom||0)===s?n=c:(o[zi(c,a,r,l)]=!0,n=h)),o[zi(n,a,r,l)]=!0,t.borderSkipped=o}function zi(t,e,i,s){var n,o,a;return s?(a=i,t=Fi(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=Fi(t,e,i),t}function Fi(t,e,i){return"start"===t?e:"end"===t?i:t}function Vi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}Ai.defaults={},Ai.prototype.datasetElementType=null,Ai.prototype.dataElementType=null;class Bi extends Ai{parsePrimitiveData(t,e,i,s){return Ei(t,e,i,s)}parseArrayData(t,e,i,s){return Ei(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?a:r,h="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(M(g,l),d),c.push(Li(M(g,h),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Ri(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:a,_cachedMeta:{vScale:r}}=this,l=r.getBasePixel(),h=r.isHorizontal(),c=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(e,s);for(let f=e;f<e+i;f++){const e=this.getParsed(f),i=n||o(e[r.axis])?{base:l,head:l}:this._calculateBarValuePixels(f),g=this._calculateBarIndexPixels(f,c),p=(e._stacks||{})[r.axis],m={horizontal:h,base:i.base,enableBorderRadius:!p||Ri(e._custom)||a===p._top||a===p._bottom,x:h?i.head:g.center,y:h?g.center:i.head,height:h?g.size:Math.abs(i.size),width:h?Math.abs(i.size):g.size};u&&(m.options=d||this.resolveDataElementOptions(f,t[f].active?"active":s));const b=m.options||t[f].options;Ii(m,b,p,a),Vi(m,b,c.ratio),this.updateElement(t[f],f,m,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),n=i.options.stacked,a=[],r=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if(o(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!r(i))&&((!1===n||-1===a.indexOf(i.stack)||void 0===n&&void 0===i.stack)&&a.push(i.stack),i.index===t))break;return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||Ti(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:s,minBarLength:n}}=this,a=s||0,r=this.getParsed(t),l=r._custom,h=Ri(l);let c,d,u=r[e.axis],f=0,g=i?this.applyStack(e,r,i):u;g!==u&&(f=g-u,g=u),h&&(u=l.barStart,g=l.barEnd-l.barStart,0!==u&&z(u)!==z(l.barEnd)&&(f=0),f+=u);const p=o(s)||h?f:s;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):m,d=c-m,Math.abs(d)<n){d=function(t,e,i){return 0!==t?z(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*n,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),i=e.getPixelForDecimal(1),s=Math.min(t,i),o=Math.max(t,i);m=Math.max(Math.min(m,o),s),c=m+d}if(m===e.getPixelForValue(a)){const t=z(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,a=c(s.maxBarThickness,1/0);let r,l;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,h="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:h}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let a,r;return o(n)?(a=e.min*i.categoryPercentage,r=i.barPercentage):(a=n*s,r=1),{chunk:a/s,ratio:r,start:e.pixels[t]-a/2}}(t,e,s,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);r=h.start+h.chunk*c+h.chunk/2,l=Math.min(a,h.chunk*h.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),l=Math.min(a,e.min*e.ratio);return{base:r-l/2,head:r+l/2,center:r,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}Bi.id="bar",Bi.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Bi.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Wi extends Ai{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=c(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=c(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:s}=e,n=this.getParsed(t),o=i.getLabelForValue(n.x),a=s.getLabelForValue(n.y),r=n._custom;return{label:e.label,value:"("+o+", "+a+(r?", "+r:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[h]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=c(i&&i._custom,n),s}}Wi.id="bubble",Wi.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Wi.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Ni extends Ai{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(r(i[t])){const{key:t="value"}=this._parsing;a=e=>+M(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return N(this.options.rotation-90)}_getCircumference(){return N(this.options.circumference)}_getRotationExtents(){let t=C,e=-C;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((h=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:u,rotation:f}=this._getRotationExtents(),{ratioX:g,ratioY:p,offsetX:m,offsetY:b}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<C){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,s)=>q(t,r,l,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>q(t,r,l,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,h,d),m=f(L,c,u),b=g(D,h,d),x=g(D+L,c,u);s=(p-b)/2,n=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(f,u,r),x=(i.width-o)/g,_=(i.height-o)/p,y=Math.max(Math.min(x,_)/2,0),v=d(this.options.radius,y),M=(v-Math.max(v*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=m*v,this.offsetY=b*v,s.total=this.calculateTotal(),this.outerRadius=v-M*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-M*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/C)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?C*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=si(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(c(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Ni.id="doughnut",Ni.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Ni.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Ni.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return a(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class Hi extends Ai{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=rt(e,s,o);this._drawStart=a,this._drawCount=r,lt(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:a,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,s),u=a.axis,f=r.axis,{spanGaps:g,segment:p}=this.options,m=V(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let g=e;g<e+i;++g){const e=t[g],i=this.getParsed(g),_=b?e:{},y=o(i[f]),v=_[u]=a.getPixelForValue(i[u],g),M=_[f]=n||y?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,i,l):i[f],g);_.skip=isNaN(v)||isNaN(M)||y,_.stop=g>0&&Math.abs(i[u]-x[u])>m,p&&(_.parsed=i,_.raw=h.data[g]),d&&(_.options=c||this.resolveDataElementOptions(g,e.active?"active":s)),b||this.updateElement(e,g,_,s),x=i}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Hi.id="line",Hi.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Hi.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class ji extends Ai{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=si(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return Ie.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,h=r.yCenter,c=r.getIndexAngle(0)-.5*D;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,g=u+this._computeAngle(d,s,f),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=g,n&&(a.animateScale&&(p=0),a.animateRotate&&(i=g=c));const m={x:l,y:h,innerRadius:0,outerRadius:p,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?N(this.resolveDataElementOptions(t,e).angle||i):0}}ji.id="polarArea",ji.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},ji.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class $i extends Ni{}$i.id="pie",$i.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Yi extends Ai{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return Ie.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,h=o?n.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,s)}}}Yi.id="radar",Yi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Yi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Ui{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return V(this.x)&&V(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}Ui.defaults={},Ui.defaultRoutes=void 0;const Xi={values:t=>a(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=I(Math.abs(o)),r=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),si(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=t/Math.pow(10,Math.floor(I(t)));return 1===s||2===s||5===s?Xi.numeric.call(this,t,e,i):""}};var qi={formatters:Xi};function Ki(t,e,i,s,n){const o=c(s,0),a=Math.min(c(n,t.length),t.length);let r,l,h,d=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),h=o;h<0;)d++,h=Math.round(o+d*i);for(l=Math.max(o,0);l<a;l++)l===h&&(e.push(t[l]),d++,h=Math.round(o+d*i))}Zt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:qi.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Zt.route("scale.ticks","color","","color"),Zt.route("scale.grid","color","","borderColor"),Zt.route("scale.grid","borderColor","","borderColor"),Zt.route("scale.title","color","","color"),Zt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Zt.describe("scales",{_fallback:"scale"}),Zt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Gi=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Zi(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Ji(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?l:-l,h<o-r||h>a+r)))return h}function Qi(t){return t.drawTicks?t.tickLength:0}function ts(t,e){if(!t.display)return 0;const i=_e(t.font,e),s=xe(t.padding);return(a(t.text)?t.text.length:1)*i.lineHeight+s.height}function es(t,e,i){let s=ot(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class is extends Ui{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=h(t,Number.POSITIVE_INFINITY),e=h(e,Number.NEGATIVE_INFINITY),i=h(i,Number.POSITIVE_INFINITY),s=h(s,Number.NEGATIVE_INFINITY),{min:h(t,i),max:h(e,s),minDefined:l(t),maxDefined:l(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:h(i,h(s,i)),max:h(s,h(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){u(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:a}=this.options,r=a.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=d(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=r<this.ticks.length;this._convertTicksToLabels(l?Zi(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),a.display&&(a.autoSkip||"auto"===a.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],a=n.length,r=n[0],l=n[a-1],h=[];if(a>s)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,h,n,a/s),h;const c=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(n,e,s);if(a>0){let t,i;const s=a>1?Math.round((l-r)/(a-1)):null;for(Ki(e,h,c,o(s)?0:r-s,r),t=0,i=a-1;t<i;t++)Ki(e,h,c,n[t],n[t+1]);return Ki(e,h,c,l,o(s)?e.length:l+s),h}return Ki(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){u(this.options.afterUpdate,[this])}beforeSetDimensions(){u(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){u(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),u(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){u(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=u(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){u(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){u(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,s=e.minRotation||0,n=e.maxRotation;let o,a,r,l=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=K(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Qi(t.grid)-e.padding-ts(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),l=H(Math.min(Math.asin(K((h.highest.height+6)/o,-1,1)),Math.asin(K(a/r,-1,1))-Math.asin(K(d/r,-1,1)))),l=Math.max(s,Math.min(n,l))),this.labelRotation=l}afterCalculateLabelRotation(){u(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){u(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=ts(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Qi(n)+o):(t.height=this.maxHeight,t.width=Qi(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,l=N(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(a){const e=i.mirror?0:c*n.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){u(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)o(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Zi(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,n=[],r=[];let l,h,c,d,u,g,p,m,b,x,_,y=0,v=0;for(l=0;l<e;++l){if(d=t[l].label,u=this._resolveTickFontOptions(l),i.font=g=u.string,p=s[g]=s[g]||{data:{},gc:[]},m=u.lineHeight,b=x=0,o(d)||a(d)){if(a(d))for(h=0,c=d.length;h<c;++h)_=d[h],o(_)||a(_)||(b=Jt(i,p.data,p.gc,b,_),x+=m)}else b=Jt(i,p.data,p.gc,b,d),x=m;n.push(b),r.push(x),y=Math.max(b,y),v=Math.max(x,v)}!function(t,e){f(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(s,e);const M=n.indexOf(y),w=r.indexOf(v),k=t=>({width:n[t]||0,height:r[t]||0});return{first:k(0),last:k(e-1),widest:k(M),highest:k(w),widths:n,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return K(this._alignToPixels?te(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ve(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ve(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=N(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o}=s,a=n.offset,l=this.isHorizontal(),h=this.ticks.length+(a?1:0),d=Qi(n),u=[],f=n.setContext(this.getContext()),g=f.drawBorder?f.borderWidth:0,p=g/2,m=function(t){return te(i,t,g)};let b,x,_,y,v,M,w,k,S,P,D,C;if("top"===o)b=m(this.bottom),M=this.bottom-d,k=b-p,P=m(t.top)+p,C=t.bottom;else if("bottom"===o)b=m(this.top),P=t.top,C=m(t.bottom)-p,M=b+p,k=this.top+d;else if("left"===o)b=m(this.right),v=this.right-d,w=b-p,S=m(t.left)+p,D=t.right;else if("right"===o)b=m(this.left),S=t.left,D=m(t.right)-p,v=b+p,w=this.left+d;else if("x"===e){if("center"===o)b=m((t.top+t.bottom)/2+.5);else if(r(o)){const t=Object.keys(o)[0],e=o[t];b=m(this.chart.scales[t].getPixelForValue(e))}P=t.top,C=t.bottom,M=b+p,k=M+d}else if("y"===e){if("center"===o)b=m((t.left+t.right)/2);else if(r(o)){const t=Object.keys(o)[0],e=o[t];b=m(this.chart.scales[t].getPixelForValue(e))}v=b-p,w=v-d,S=t.left,D=t.right}const O=c(s.ticks.maxTicksLimit,h),A=Math.max(1,Math.ceil(h/O));for(x=0;x<h;x+=A){const t=n.setContext(this.getContext(x)),e=t.lineWidth,s=t.color,o=t.borderDash||[],r=t.borderDashOffset,h=t.tickWidth,c=t.tickColor,d=t.tickBorderDash||[],f=t.tickBorderDashOffset;_=Ji(this,x,a),void 0!==_&&(y=te(i,_,e),l?v=w=S=D=y:M=k=P=C=y,u.push({tx1:v,ty1:M,tx2:w,ty2:k,x1:S,y1:P,x2:D,y2:C,width:e,color:s,borderDash:o,borderDashOffset:r,tickWidth:h,tickColor:c,tickBorderDash:d,tickBorderDashOffset:f}))}return this._ticksLength=h,this._borderValue=b,u}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),l=this.ticks,{align:h,crossAlign:c,padding:d,mirror:u}=n,f=Qi(i.grid),g=f+d,p=u?-d:g,m=-N(this.labelRotation),b=[];let x,_,y,v,M,w,k,S,P,D,C,O,A="middle";if("top"===s)w=this.bottom-p,k=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+p,k=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(f);k=t.textAlign,M=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(f);k=t.textAlign,M=t.x}else if("x"===e){if("center"===s)w=(t.top+t.bottom)/2+g;else if(r(s)){const t=Object.keys(s)[0],e=s[t];w=this.chart.scales[t].getPixelForValue(e)+g}k=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)M=(t.left+t.right)/2-g;else if(r(s)){const t=Object.keys(s)[0],e=s[t];M=this.chart.scales[t].getPixelForValue(e)}k=this._getYAxisLabelAlignment(f).textAlign}"y"===e&&("start"===h?A="top":"end"===h&&(A="bottom"));const T=this._getLabelSizes();for(x=0,_=l.length;x<_;++x){y=l[x],v=y.label;const t=n.setContext(this.getContext(x));S=this.getPixelForTick(x)+n.labelOffset,P=this._resolveTickFontOptions(x),D=P.lineHeight,C=a(v)?v.length:1;const e=C/2,i=t.color,r=t.textStrokeColor,h=t.textStrokeWidth;let d,f=k;if(o?(M=S,"inner"===k&&(f=x===_-1?this.options.reverse?"left":"right":0===x?this.options.reverse?"right":"left":"center"),O="top"===s?"near"===c||0!==m?-C*D+D/2:"center"===c?-T.highest.height/2-e*D+D:-T.highest.height+D/2:"near"===c||0!==m?D/2:"center"===c?T.highest.height/2-e*D:T.highest.height-C*D,u&&(O*=-1)):(w=S,O=(1-C)*D/2),t.showLabelBackdrop){const e=xe(t.backdropPadding),i=T.heights[x],s=T.widths[x];let n=w+O-e.top,o=M-e.left;switch(A){case"middle":n-=i/2;break;case"bottom":n-=i}switch(k){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}b.push({rotation:m,label:v,font:P,color:i,strokeColor:r,strokeWidth:h,textOffset:O,textAlign:f,textBaseline:A,translation:[M,w],backdrop:d})}return b}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-N(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,s=i.setContext(this.getContext()),n=i.drawBorder?s.borderWidth:0;if(!n)return;const o=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let r,l,h,c;this.isHorizontal()?(r=te(t,this.left,n)-n/2,l=te(t,this.right,o)+o/2,h=c=a):(h=te(t,this.top,n)-n/2,c=te(t,this.bottom,o)+o/2,r=l=a),e.save(),e.lineWidth=s.borderWidth,e.strokeStyle=s.borderColor,e.beginPath(),e.moveTo(r,h),e.lineTo(l,c),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&oe(e,i);const s=this._labelItems||(this._labelItems=this._computeLabelItems(t));let n,o;for(n=0,o=s.length;n<o;++n){const t=s[n],i=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),he(e,o,0,t.textOffset,i,t)}i&&ae(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=_e(i.font),o=xe(i.padding),l=i.align;let h=n.lineHeight/2;"bottom"===e||"center"===e||r(e)?(h+=o.bottom,a(i.text)&&(h+=n.lineHeight*(i.text.length-1))):h+=o.top;const{titleX:c,titleY:d,maxWidth:u,rotation:f}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:l,chart:h}=t,{chartArea:c,scales:d}=h;let u,f,g,p=0;const m=a-n,b=l-o;if(t.isHorizontal()){if(f=at(s,o,l),r(i)){const t=Object.keys(i)[0],s=i[t];g=d[t].getPixelForValue(s)+m-e}else g="center"===i?(c.bottom+c.top)/2+m-e:Gi(t,i,e);u=l-o}else{if(r(i)){const t=Object.keys(i)[0],s=i[t];f=d[t].getPixelForValue(s)-b+e}else f="center"===i?(c.left+c.right)/2-b+e:Gi(t,i,e);g=at(s,a,n),p="left"===i?-L:L}return{titleX:f,titleY:g,maxWidth:u,rotation:p}}(this,h,e,l);he(t,i.text,0,0,n,{color:i.color,maxWidth:u,rotation:f,textAlign:es(l,e,s),textBaseline:"middle",translation:[c,d]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=c(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===is.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return _e(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class ss{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=x(Object.create(null),[i?Zt.get(i):{},Zt.get(e),t.defaults]);Zt.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");Zt.route(o,n,l,r)}))}(e,t.defaultRoutes),t.descriptors&&Zt.describe(e,t.descriptors)}(t,o,i),this.override&&Zt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in Zt[s]&&(delete Zt[s][i],this.override&&delete Xt[i])}}var ns=new class{constructor(){this.controllers=new ss(Ai,"datasets",!0),this.elements=new ss(Ui,"elements"),this.plugins=new ss(Object,"plugins"),this.scales=new ss(is,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):f(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=w(t);u(i["before"+s],[],i),e[t](i),u(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}};class os extends Ai{update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=rt(e,i,s);if(this._drawStart=n,this._drawCount=o,lt(e)&&(n=0,o=i.length),this.options.showLine){const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=ns.getElement("line")),super.addElements()}updateElements(t,e,i,s){const n="reset"===s,{iScale:a,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,c=this.resolveDataElementOptions(e,s),d=this.getSharedOptions(c),u=this.includeOptions(s,d),f=a.axis,g=r.axis,{spanGaps:p,segment:m}=this.options,b=V(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||n||"none"===s;let _=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),p=x?e:{},y=o(i[g]),v=p[f]=a.getPixelForValue(i[f],c),M=p[g]=n||y?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,i,l):i[g],c);p.skip=isNaN(v)||isNaN(M)||y,p.stop=c>0&&Math.abs(i[f]-_[f])>b,m&&(p.parsed=i,p.raw=h.data[c]),u&&(p.options=d||this.resolveDataElementOptions(c,e.active?"active":s)),x||this.updateElement(e,c,p,s),_=i}this.updateSharedOptions(d,s,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}os.id="scatter",os.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},os.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var as=Object.freeze({__proto__:null,BarController:Bi,BubbleController:Wi,DoughnutController:Ni,LineController:Hi,PolarAreaController:ji,PieController:$i,RadarController:Yi,ScatterController:os});function rs(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class ls{constructor(t){this.options=t||{}}init(t){}formats(){return rs()}parse(t,e){return rs()}format(t,e){return rs()}add(t,e,i){return rs()}diff(t,e,i){return rs()}startOf(t,e,i){return rs()}endOf(t,e){return rs()}}ls.override=function(t){Object.assign(ls.prototype,t)};var hs={_date:ls};function cs(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?Q:J;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function ds(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=cs(o[t],e,a,n);for(let t=l;t<=h;++t){const e=r[t];e.skip||s(e,i,t)}}}function us(t,e,i,s,n){const o=[];return n||t.isPointInArea(e)?(ds(t,i,e,(function(i,a,r){(n||ne(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o):o}function fs(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?function(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return ds(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!o&&!t.isPointInArea(u)&&!d)return;const f=r(e,u);f<l?(a=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&a.push({element:i,datasetIndex:h,index:c})})),a}(t,e,i,s,n,o):function(t,e,i,s){let n=[];return ds(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:l}=$(t,{x:e.x,y:e.y});q(l,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function gs(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return ds(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var ps={evaluateInteractionItems:ds,modes:{index(t,e,i,s){const n=qe(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?us(t,n,o,s,a):fs(t,n,o,!1,s,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,s){const n=qe(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?us(t,n,o,s,a):fs(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,s)=>us(t,qe(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const n=qe(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return fs(t,n,o,i.intersect,s,a)},x:(t,e,i,s)=>gs(t,qe(e,t),"x",i.intersect,s),y:(t,e,i,s)=>gs(t,qe(e,t),"y",i.intersect,s)}};const ms=["left","top","right","bottom"];function bs(t,e){return t.filter((t=>t.pos===e))}function xs(t,e){return t.filter((t=>-1===ms.indexOf(t.pos)&&t.box.axis===e))}function _s(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function ys(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function vs(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Ms(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!r(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&vs(a,o.getPadding());const l=Math.max(0,e.outerWidth-ys(a,t,"left","right")),h=Math.max(0,e.outerHeight-ys(a,t,"top","bottom")),c=l!==t.w,d=h!==t.h;return t.w=l,t.h=h,i.horizontal?{same:c,other:d}:{same:d,other:c}}function ws(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function ks(t,e,i,s){const n=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,ws(r.horizontal,e));const{same:a,other:d}=Ms(e,i,r,s);h|=a&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&ks(n,e,i,s)||c}function Ss(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function Ps(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*h,o=l.size||t.height;k(l.start)&&(a=l.start),t.fullSize?Ss(t,n.left,a,i.outerWidth-n.right-n.left,o):Ss(t,e.left+l.placed,a,s,o),l.start=a,l.placed+=s,a=t.bottom}else{const s=e.h*h,a=l.size||t.width;k(l.start)&&(o=l.start),t.fullSize?Ss(t,o,n.top,a,i.outerHeight-n.bottom-n.top):Ss(t,o,e.top+l.placed,a,s),l.start=o,l.placed+=s,o=t.right}}e.x=o,e.y=a}Zt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var Ds={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=xe(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=_s(e.filter((t=>t.box.fullSize)),!0),s=_s(bs(e,"left"),!0),n=_s(bs(e,"right")),o=_s(bs(e,"top"),!0),a=_s(bs(e,"bottom")),r=xs(e,"x"),l=xs(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:bs(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,h=r.horizontal;f(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);vs(u,xe(s));const g=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!ms.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:a&&e.availableHeight)}return i}(l.concat(h),d);ks(r.fullSize,g,d,p),ks(l,g,d,p),ks(h,g,d,p)&&ks(l,g,d,p),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(g),Ps(r.leftAndTop,g,d,p),g.x+=g.w,g.y+=g.h,Ps(r.rightAndBottom,g,d,p),t.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},f(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})}))}};class Cs{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class Os extends Cs{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const As={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ts=t=>null===t||""===t,Ls=!!Ze&&{passive:!0};function Es(t,e,i){t.canvas.removeEventListener(e,i,Ls)}function Rs(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Is(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Rs(i.addedNodes,s),e=e&&!Rs(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function zs(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Rs(i.removedNodes,s),e=e&&!Rs(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Fs=new Map;let Vs=0;function Bs(){const t=window.devicePixelRatio;t!==Vs&&(Vs=t,Fs.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Ws(t,e,i){const s=t.canvas,n=s&&je(s);if(!n)return;const o=nt(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Fs.size||window.addEventListener("resize",Bs),Fs.set(t,e)}(t,o),a}function Ns(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Fs.delete(t),Fs.size||window.removeEventListener("resize",Bs)}(t)}function Hs(t,e,i){const s=t.canvas,n=nt((e=>{null!==t.ctx&&i(function(t,e){const i=As[t.type]||t.type,{x:s,y:n}=qe(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,Ls)}(s,e,n),n}class js extends Cs{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t.$chartjs={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Ts(n)){const e=Je(t,"width");void 0!==e&&(t.width=e)}if(Ts(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Je(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const s=i[t];o(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Is,detach:zs,resize:Ws}[e]||Hs;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:Ns,detach:Ns,resize:Ns}[e]||Es)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=Ye(t),o=Xe(n,"margin"),a=$e(n.maxWidth,t,"clientWidth")||A,r=$e(n.maxHeight,t,"clientHeight")||A,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=je(t);if(o){const t=o.getBoundingClientRect(),a=Ye(o),r=Xe(a,"border","width"),l=Xe(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=$e(a.maxWidth,o,"clientWidth"),n=$e(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||A,maxHeight:n||A}}(t,e,i);let{width:h,height:c}=l;if("content-box"===n.boxSizing){const t=Xe(n,"border","width"),e=Xe(n,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,s?Math.floor(h/s):c-o.height),h=Ke(Math.min(h,a,l.maxWidth)),c=Ke(Math.min(c,r,l.maxHeight)),h&&!c&&(c=Ke(h/2)),{width:h,height:c}}(t,e,i,s)}isAttached(t){const e=je(t);return!(!e||!e.isConnected)}}function $s(t){return!He()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Os:js}class Ys{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===u(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){o(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=c(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(ns.plugins.items);for(let t=0;t<s.length;t++)i.push(ns.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=Us(s[e],n);null!==l&&o.push({plugin:r,options:Xs(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Us(t,e){return e||!1!==t?!0===t?{}:t:null}function Xs(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function qs(t,e){const i=Zt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Ks(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function Gs(t){const e=t.options||(t.options={});e.plugins=c(e.plugins,{}),e.scales=function(t,e){const i=Xt[t.type]||{scales:{}},s=e.scales||{},n=qs(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(s).forEach((t=>{const e=s[t];if(!r(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const l=Ks(t,e),h=function(t,e){return t===e?"_index_":"_value_"}(l,n),c=i.scales||{};o[l]=o[l]||t,a[t]=_(Object.create(null),[{axis:l},e,c[l],c[h]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,r=i.indexAxis||qs(n,e),l=(Xt[n]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),n=i[e+"AxisID"]||o[e]||e;a[n]=a[n]||Object.create(null),_(a[n],[{axis:e},s[n],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];_(e,[Zt.scales[e.type],Zt.scale])})),a}(t,e)}function Zs(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Js=new Map,Qs=new Set;function tn(t,e){let i=Js.get(t);return i||(i=e(),Js.set(t,i),Qs.add(i)),i}const en=(t,e,i)=>{const s=M(e,i);void 0!==s&&t.add(s)};class sn{constructor(t){this._config=function(t){return(t=t||{}).data=Zs(t.data),Gs(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Zs(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Gs(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return tn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return tn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return tn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return tn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>en(r,t,e)))),e.forEach((t=>en(r,s,t))),e.forEach((t=>en(r,Xt[n]||{},t))),e.forEach((t=>en(r,Zt,t))),e.forEach((t=>en(r,qt,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),Qs.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Xt[e]||{},Zt.datasets[e]||{},{type:e},Zt,qt]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:r}=nn(this._resolverCache,t,s);let l=o;(function(t,e){const{isScriptable:i,isIndexable:s}=ke(t);for(const n of e){const e=i(n),o=s(n),r=(o||e)&&t[n];if(e&&(S(r)||on(r))||o&&a(r))return!0}return!1})(o,e)&&(n.$shared=!1,l=we(o,i=S(i)?i():i,this.createResolver(t,i,r)));for(const t of e)n[t]=l[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=nn(this._resolverCache,t,i);return r(e)?we(n,e,void 0,s):n}}function nn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:Me(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const on=t=>r(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||S(t[i])),!1),an=["top","bottom","left","right","chartArea"];function rn(t,e){return"top"===t||"bottom"===t||-1===an.indexOf(t)&&"x"===e}function ln(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function hn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),u(i&&i.onComplete,[t],e)}function cn(t){const e=t.chart,i=e.options.animation;u(i&&i.onProgress,[t],e)}function dn(t){return He()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const un={},fn=t=>{const e=dn(t);return Object.values(un).filter((t=>t.canvas===e)).pop()};function gn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class pn{constructor(t,e){const i=this.config=new sn(e),s=dn(t),o=fn(s);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas with ID '"+o.canvas.id+"' can be reused.");const a=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||$s(s)),this.platform.updateConfig(i);const r=this.platform.acquireContext(s,a.aspectRatio),l=r&&r.canvas,h=l&&l.height,c=l&&l.width;this.id=n(),this.ctx=r,this.canvas=l,this.width=c,this.height=h,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ys,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),a.resizeDelay||0),this._dataChanges=[],un[this.id]=this,r&&l?(fi.listen(this,"complete",hn),fi.listen(this,"progress",cn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return o(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Ge(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return ee(this.canvas,this.ctx),this}stop(){return fi.stop(this),this}resize(t,e){fi.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Ge(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),u(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){f(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=Ks(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),f(n,(e=>{const n=e.options,o=n.id,a=Ks(o,n),r=c(n.type,e.dtype);void 0!==n.position&&rn(n.position,a)===rn(e.dposition)||(n.position=e.dposition),s[o]=!0;let l=null;o in i&&i[o].type===r?l=i[o]:(l=new(ns.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(n,t)})),f(s,((t,e)=>{t||delete i[e]})),f(i,(t=>{Ds.configure(this,t,t.options),Ds.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(ln("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||qs(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=ns.getController(o),{datasetElementType:s,dataElementType:a}=Zt.datasets[o];Object.assign(e.prototype,{dataElementType:ns.getElement(a),datasetElementType:s&&ns.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){f(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||f(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ln("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){f(this.scales,(t=>{Ds.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);P(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)gn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!P(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ds.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],f(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,S(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(fi.has(this)?this.attached&&!fi.running(this)&&fi.start(this):(this.draw(),hn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&oe(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&ae(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return ne(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=ps.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=ve(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);k(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),fi.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),ee(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete un[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};f(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){f(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},f(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!g(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,u(n.onHover,[t,a,this],this),r&&u(n.onClick,[t,a,this],this));const h=!g(a,s);return(h||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}const mn=()=>f(pn.instances,(t=>t._plugins.invalidate())),bn=!0;function xn(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:l}=e;let h=n/r;t.beginPath(),t.arc(o,a,r,s-h,i+h),l>n?(h=n/l,t.arc(o,a,l,i+h,s-h,!0)):t.arc(o,a,n,i+L,s-L),t.closePath(),t.clip()}function _n(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function yn(t,e,i,s,n,o){const{x:a,y:r,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+s+i-h,0),u=c>0?c+s+i+h:0;let f=0;const g=n-l;if(s){const t=((c>0?c-s:0)+(d>0?d-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const p=(g-Math.max(.001,g*d-i/D)/d)/2,m=l+p+f,b=n-p-f,{outerStart:x,outerEnd:_,innerStart:y,innerEnd:v}=function(t,e,i,s){const n=pe(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return K(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:K(n.innerStart,0,a),innerEnd:K(n.innerEnd,0,a)}}(e,u,d,b-m),M=d-x,w=d-_,k=m+x/M,S=b-_/w,P=u+y,C=u+v,O=m+y/P,A=b-v/C;if(t.beginPath(),o){if(t.arc(a,r,d,k,S),_>0){const e=_n(w,S,a,r);t.arc(e.x,e.y,_,S,b+L)}const e=_n(C,b,a,r);if(t.lineTo(e.x,e.y),v>0){const e=_n(C,A,a,r);t.arc(e.x,e.y,v,b+L,A+Math.PI)}if(t.arc(a,r,u,b-v/u,m+y/u,!0),y>0){const e=_n(P,O,a,r);t.arc(e.x,e.y,y,O+Math.PI,m-L)}const i=_n(M,m,a,r);if(t.lineTo(i.x,i.y),x>0){const e=_n(M,k,a,r);t.arc(e.x,e.y,x,m-L,k)}}else{t.moveTo(a,r);const e=Math.cos(k)*d+a,i=Math.sin(k)*d+r;t.lineTo(e,i);const s=Math.cos(S)*d+a,n=Math.sin(S)*d+r;t.lineTo(s,n)}t.closePath()}Object.defineProperties(pn,{defaults:{enumerable:bn,value:Zt},instances:{enumerable:bn,value:un},overrides:{enumerable:bn,value:Xt},registry:{enumerable:bn,value:ns},version:{enumerable:bn,value:"3.9.1"},getChart:{enumerable:bn,value:fn},register:{enumerable:bn,value:(...t)=>{ns.add(...t),mn()}},unregister:{enumerable:bn,value:(...t)=>{ns.remove(...t),mn()}}});class vn extends Ui{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=$(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:h,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=this.options.spacing/2,f=c(d,r-a)>=C||q(n,a,r),g=G(o,l+u,h+u);return f&&g}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:l}=this.options,h=(s+n)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/2,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>C?Math.floor(i/C):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let a=0;if(s){a=s/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*a,Math.sin(e)*a),this.circumference>=D&&(a=s)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const r=function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){yn(t,e,i,s,a+C,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+r%C,r%C==0&&(l+=C))}return yn(t,e,i,s,l,n),t.fill(),l}(t,this,a,n,o);(function(t,e,i,s,n,o){const{options:a}=e,{borderWidth:r,borderJoinStyle:l}=a,h="inner"===a.borderAlign;r&&(h?(t.lineWidth=2*r,t.lineJoin=l||"round"):(t.lineWidth=r,t.lineJoin=l||"bevel"),e.fullCircles&&function(t,e,i){const{x:s,y:n,startAngle:o,pixelMargin:a,fullCircles:r}=e,l=Math.max(e.outerRadius-a,0),h=e.innerRadius+a;let c;for(i&&xn(t,e,o+C),t.beginPath(),t.arc(s,n,h,o+C,o,!0),c=0;c<r;++c)t.stroke();for(t.beginPath(),t.arc(s,n,l,o,o+C),c=0;c<r;++c)t.stroke()}(t,e,h),h&&xn(t,e,n),yn(t,e,i,s,n,o),t.stroke())})(t,this,a,n,r,o),t.restore()}}function Mn(t,e,i=e){t.lineCap=c(i.borderCapStyle,e.borderCapStyle),t.setLineDash(c(i.borderDash,e.borderDash)),t.lineDashOffset=c(i.borderDashOffset,e.borderDashOffset),t.lineJoin=c(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=c(i.borderWidth,e.borderWidth),t.strokeStyle=c(i.borderColor,e.borderColor)}function wn(t,e,i){t.lineTo(i.x,i.y)}function kn(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),h=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:h<l&&!c?s+h-l:h-l}}function Sn(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:l,ilen:h}=kn(n,i,s),c=function(t){return t.stepped?re:t.tension||"monotone"===t.cubicInterpolationMode?le:wn}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=h;++d)u=n[(r+(p?h-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return l&&(u=n[(r+(p?h:0))%a],c(t,f,u,p,o.stepped)),!!l}function Pn(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=kn(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(h?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}_()}function Dn(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?Sn:Pn}vn.id="arc",vn.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},vn.defaultRoutes={backgroundColor:"backgroundColor"};const Cn="function"==typeof Path2D;class On extends Ui{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;Ne(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=di(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:s,style:n}),c=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=di(s.setContext(ve(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),ui(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=ci(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?ti:t.tension||"monotone"===t.cubicInterpolationMode?ei:Qe}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=n[h],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Dn(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Dn(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){Cn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),Mn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Dn(e);for(const r of n)Mn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function An(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}On.id="line",On.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},On.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},On.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Tn extends Ui{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return An(this,t,"x",e)}inYRange(t,e){return An(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!ne(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,ie(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ln(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),h=s-d,c=s+d):(d=o/2,r=i-d,l=i+d,h=Math.min(s,n),c=Math.max(s,n)),{left:r,top:h,right:l,bottom:c}}function En(t,e,i,s){return t?0:K(e,i,s)}function Rn(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Ln(t,s);return a&&(n||G(e,a.left,a.right))&&(o||G(i,a.top,a.bottom))}function In(t,e){t.rect(e.x,e.y,e.w,e.h)}function zn(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}Tn.id="point",Tn.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Tn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Fn extends Ui{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=Ln(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=me(s);return{t:En(n.top,o.top,0,i),r:En(n.right,o.right,0,e),b:En(n.bottom,o.bottom,0,i),l:En(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=be(n),a=Math.min(e,i),l=t.borderSkipped,h=s||r(n);return{topLeft:En(!h||l.top||l.left,o.topLeft,0,a),topRight:En(!h||l.top||l.right,o.topRight,0,a),bottomLeft:En(!h||l.bottom||l.left,o.bottomLeft,0,a),bottomRight:En(!h||l.bottom||l.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(l=o.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?de:In;var l;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,zn(o,e,n)),t.clip(),a(t,zn(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,zn(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Rn(this,t,e,i)}inXRange(t,e){return Rn(this,t,null,e)}inYRange(t,e){return Rn(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Fn.id="bar",Fn.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Fn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Vn=Object.freeze({__proto__:null,ArcElement:vn,LineElement:On,PointElement:Tn,BarElement:Fn});function Bn(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Wn(t){t.data.datasets.forEach((t=>{Bn(t)}))}var Nn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Wn(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:a,indexAxis:r}=e,l=t.getDatasetMeta(n),h=a||e.data;if("y"===ye([r,t.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const c=t.scales[l.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let d,{start:u,count:f}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(n=K(J(e,o.axis,a).lo,0,i-1)),s=h?K(J(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(l,h);if(f<=(i.threshold||4*s))Bn(e);else{switch(o(a)&&(e._data=h,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,g,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-h;for(s=h;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[p];for(u=f=-1,s=x;s<_;s++)f=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[l++]=d,p=g}return a[l++]=t[h],a}(h,u,f,s,i);break;case"min-max":d=function(t,e,i,s){let n,a,r,l,h,c,d,u,f,g,p=0,m=0;const b=[],x=e+i-1,_=t[e].x,y=t[x].x-_;for(n=e;n<e+i;++n){a=t[n],r=(a.x-_)/y*s,l=a.y;const e=0|r;if(e===h)l<f?(f=l,c=n):l>g&&(g=l,d=n),p=(m*p+a.x)/++m;else{const i=n-1;if(!o(c)&&!o(d)){const e=Math.min(c,d),s=Math.max(c,d);e!==u&&e!==i&&b.push({...t[e],x:p}),s!==u&&s!==i&&b.push({...t[s],x:p})}n>0&&i!==u&&b.push(t[i]),b.push(a),h=e,m=0,f=g=l,c=d=u=n}}return b}(h,u,f,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}}))},destroy(t){Wn(t)}};function Hn(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=X(n),o=X(o)),{property:t,start:n,end:o}}function jn(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function $n(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function Yn(t,e){let i=[],s=!1;return a(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=jn(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new On({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function Un(t){return t&&!1!==t.fill}function Xn(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!l(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function qn(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=c(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(r(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return l(n)&&Math.floor(n)===n?function(t,e,i,s){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=s)&&i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function Kn(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=Gn(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function Gn(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],h=a[e.end][i];if(G(n,s,h)){r=n===s,l=n===h;break}}return{first:r,last:l,point:s}}class Zn{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:C},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function Jn(t,e,i){const s=function(t){const{chart:e,fill:i,line:s}=t;if(l(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(Yn({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Kn(n,a[t],r)}return new On({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:r(t)?t.value:e.getBaseValue(),s}(i,e,o),l=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,o);return new Zn({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<n;++t)l.push(e.getPointPositionForValue(t,a));return l}(t):function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:r(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(l(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof Zn?n:Yn(n,s)}(e),{line:n,scale:o,axis:a}=e,h=n.options,c=h.fill,d=h.backgroundColor,{above:u=d,below:f=d}=c||{};s&&n.points.length&&(oe(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(Qn(t,s,a.top),to(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),Qn(t,s,a.bottom)),to(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:n,target:s,above:u,below:f,area:i,scale:o,axis:a}),ae(t))}function Qn(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,h=n[s],c=n[jn(s,l,n)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function to(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=jn(s,r,n);const l=Hn(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:n[s],end:n[r]});continue}const h=ci(e,l);for(const e of h){const s=Hn(i,o[e.start],o[e.end],e.loop),r=hi(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:$n(l,s,"start",Math.max)},end:{[i]:$n(l,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:l,start:h,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,eo(t,a,d&&Hn(n,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():io(t,s,c,n);const e=!!s.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||io(t,s,h,n)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function eo(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function io(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var so={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof On&&(l={visible:t.isDatasetVisible(a),index:a,fill:qn(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=Xn(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&Jn(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;Un(i)&&Jn(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;Un(s)&&"beforeDatasetDraw"===i.drawTime&&Jn(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const no=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class oo extends Ui{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=u(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=_e(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=no(i,n);let l,h;e.font=s.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,n,a,r)+10):(h=this.maxHeight,l=this._fitCols(o,n,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||l[l.length-1]+g+2*a>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),r[f]={left:0,top:u,row:d,width:g,height:s},l[l.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const p=i+e/2+n.measureText(t.text).width;o>0&&u+s+2*a>h&&(c+=d+a,l.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:s},d=Math.max(d,p),u+=s+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=ni(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=at(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=at(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=at(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=at(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;oe(t,this),this._draw(),ae(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=Zt.color,r=ni(t.rtl,this.left,this.width),l=_e(o.font),{color:h,padding:d}=o,u=l.size,f=u/2;let g;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=l.string;const{boxWidth:p,boxHeight:m,itemHeight:b}=no(o,u),x=this.isHorizontal(),_=this._computeTitleHeight();g=x?{x:at(n,this.left+d,this.right-i[0]),y:this.top+d+_,line:0}:{x:this.left+d,y:at(n,this.top+_+d,this.bottom-e[0].height),line:0},oi(this.ctx,t.textDirection);const y=b+d;this.legendItems.forEach(((v,M)=>{s.strokeStyle=v.fontColor||h,s.fillStyle=v.fontColor||h;const w=s.measureText(v.text).width,k=r.textAlign(v.textAlign||(v.textAlign=o.textAlign)),S=p+f+w;let P=g.x,D=g.y;r.setWidth(this.width),x?M>0&&P+S+d>this.right&&(D=g.y+=y,g.line++,P=g.x=at(n,this.left+d,this.right-i[g.line])):M>0&&D+y>this.bottom&&(P=g.x=P+e[g.line].width+d,g.line++,D=g.y=at(n,this.top+_+d,this.bottom-e[g.line].height)),function(t,e,i){if(isNaN(p)||p<=0||isNaN(m)||m<0)return;s.save();const n=c(i.lineWidth,1);if(s.fillStyle=c(i.fillStyle,a),s.lineCap=c(i.lineCap,"butt"),s.lineDashOffset=c(i.lineDashOffset,0),s.lineJoin=c(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=c(i.strokeStyle,a),s.setLineDash(c(i.lineDash,[])),o.usePointStyle){const a={radius:m*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},l=r.xPlus(t,p/2);se(s,a,l,e+f,o.pointStyleWidth&&p)}else{const o=e+Math.max((u-m)/2,0),a=r.leftForLtr(t,p),l=be(i.borderRadius);s.beginPath(),Object.values(l).some((t=>0!==t))?de(s,{x:a,y:o,w:p,h:m,radius:l}):s.rect(a,o,p,m),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(P),D,v),P=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(k,P+p+f,x?P+S:this.right,t.rtl),function(t,e,i){he(s,i.text,t,e+b/2,l,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(P),D,v),x?g.x+=S+d:g.y+=y})),ai(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=_e(e.font),s=xe(e.padding);if(!e.display)return;const n=ni(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=s.top+r;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=at(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+at(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=at(a,c,c+d);o.textAlign=n.textAlign(ot(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,he(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=_e(t.font),i=xe(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(G(t,this.left,this.right)&&G(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],G(t,s.left,s.left+s.width)&&G(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&u(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&u(e.onHover,[t,i,this],this)}else i&&u(e.onClick,[t,i,this],this);var s,n}}var ao={id:"legend",_element:oo,start(t,e,i){const s=t.legend=new oo({ctx:t.ctx,options:i,chart:t});Ds.configure(t,s,i),Ds.addBox(t,s)},stop(t){Ds.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;Ds.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(i?0:void 0),r=xe(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(r.width+r.height)/4,strokeStyle:a.borderColor,pointStyle:s||a.pointStyle,rotation:a.rotation,textAlign:n||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class ro extends Ui{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=a(i.text)?i.text.length:1;this._padding=xe(i.padding);const n=s*_e(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,l,h,c=0;return this.isHorizontal()?(l=at(a,i,n),h=e+t,r=n-i):("left"===o.position?(l=i+t,h=at(a,s,e),c=-.5*D):(l=n-t,h=at(a,e,s),c=.5*D),r=s-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=_e(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);he(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:ot(e.align),textBaseline:"middle",translation:[n,o]})}}var lo={id:"title",_element:ro,start(t,e,i){!function(t,e){const i=new ro({ctx:t.ctx,options:e,chart:t});Ds.configure(t,i,e),Ds.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Ds.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;Ds.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ho=new WeakMap;var co={id:"subtitle",start(t,e,i){const s=new ro({ctx:t.ctx,options:i,chart:t});Ds.configure(t,s,i),Ds.addBox(t,s),ho.set(t,s)},stop(t){Ds.removeBox(t,ho.get(t)),ho.delete(t)},beforeUpdate(t,e,i){const s=ho.get(t);Ds.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const uo={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=Y(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function fo(t,e){return e&&(a(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function go(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function po(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function mo(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=_e(e.bodyFont),h=_e(e.titleFont),c=_e(e.footerFont),d=o.length,u=n.length,g=s.length,p=xe(e.padding);let m=p.height,b=0,x=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,d&&(m+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(m+=g*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(x-g)*l.lineHeight+(x-1)*e.bodySpacing),u&&(m+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let _=0;const y=function(t){b=Math.max(b,i.measureText(t).width+_)};return i.save(),i.font=h.string,f(t.title,y),i.font=l.string,f(t.beforeBody.concat(t.afterBody),y),_=e.displayColors?a+2+e.boxPadding:0,f(s,(t=>{f(t.before,y),f(t.lines,y),f(t.after,y)})),_=0,i.font=c.string,f(t.footer,y),i.restore(),b+=p.width,{width:b,height:m}}function bo(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===s?h=n<=(r+l)/2?"left":"right":n<=o/2?h="left":n>=a-o/2&&(h="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function xo(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||bo(t,e,i,s),yAlign:s}}function _o(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,h=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=be(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,l,h);return"center"===l?"left"===r?g+=h:"right"===r&&(g-=h):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:K(g,0,s.width-e.width),y:K(p,0,s.height-e.height)}}function yo(t,e,i){const s=xe(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function vo(t){return fo([],go(t))}function Mo(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class wo extends Ui{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new xi(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,ve(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=i.beforeTitle.apply(this,[t]),n=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let a=[];return a=fo(a,go(s)),a=fo(a,go(n)),a=fo(a,go(o)),a}getBeforeBody(t,e){return vo(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,s=[];return f(t,(t=>{const e={before:[],lines:[],after:[]},n=Mo(i,t);fo(e.before,go(n.beforeLabel.call(this,t))),fo(e.lines,n.label.call(this,t)),fo(e.after,go(n.afterLabel.call(this,t))),s.push(e)})),s}getAfterBody(t,e){return vo(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,s=i.beforeFooter.apply(this,[t]),n=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let a=[];return a=fo(a,go(s)),a=fo(a,go(n)),a=fo(a,go(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(po(this.chart,e[a]));return t.filter&&(l=l.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(l=l.sort(((e,s)=>t.itemSort(e,s,i)))),f(l,(e=>{const i=Mo(t.callbacks,e);s.push(i.labelColor.call(this,e)),n.push(i.labelPointStyle.call(this,e)),o.push(i.labelTextColor.call(this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=uo[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=mo(this,i),a=Object.assign({},t,e),r=xo(this.chart,i,a),l=_o(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=be(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(p=d,m=p-o,x=_+o,y=_-o):(p=d+f,m=p+o,x=_-o,y=_+o),b=p):(m="left"===s?d+Math.max(r,h)+o:"right"===s?d+f-Math.max(l,c)-o:this.caretX,"top"===n?(x=u,_=x-o,p=m-o,b=m+o):(x=u+g,_=x+o,p=m+o,b=m-o),y=x),{x1:p,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const l=ni(i.rtl,this.x,this.width);for(t.x=yo(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=_e(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:l,boxWidth:h,boxPadding:c}=n,d=_e(n.bodyFont),u=yo(this,"left",n),f=s.x(u),g=l<d.lineHeight?(d.lineHeight-l)/2:0,p=e.y+g;if(n.usePointStyle){const e={radius:Math.min(h,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(f,h)+h/2,r=p+l/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,ie(t,e,i,r),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,ie(t,e,i,r)}else{t.lineWidth=r(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(f,h-c),i=s.leftForLtr(s.xPlus(f,1),h-c-2),a=be(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,de(t,{x:e,y:p,w:h,h:l,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),de(t,{x:i,y:p+1,w:h-2,h:l-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,p,h,l),t.strokeRect(e,p,h,l),t.fillStyle=o.backgroundColor,t.fillRect(i,p+1,h-2,l-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:h}=i,c=_e(i.bodyFont);let d=c.lineHeight,u=0;const g=ni(i.rtl,this.x,this.width),p=function(i){e.fillText(i,g.x(t.x+u),t.y+d/2),t.y+=d+n},m=g.textAlign(o);let b,x,_,y,v,M,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=yo(this,m,i),e.fillStyle=i.bodyColor,f(this.beforeBody,p),u=a&&"right"!==m?"center"===o?l/2+h:l+2+h:0,y=0,M=s.length;y<M;++y){for(b=s[y],x=this.labelTextColors[y],e.fillStyle=x,f(b.before,p),_=b.lines,a&&_.length&&(this._drawColorBox(e,t,y,g,i),d=Math.max(c.lineHeight,r)),v=0,w=_.length;v<w;++v)p(_[v]),d=c.lineHeight;f(b.after,p)}u=0,d=c.lineHeight,f(this.afterBody,p),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=ni(i.rtl,this.x,this.width);for(t.x=yo(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=_e(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=be(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+l,r+h-f),e.quadraticCurveTo(a+l,r+h,a+l-f,r+h),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+h),e.quadraticCurveTo(a,r+h,a,r+h-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=uo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=mo(this,t),a=Object.assign({},i,this._size),r=xo(e,t,a),l=_o(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=xe(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),oi(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),ai(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!g(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!g(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=uo[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}wo.positioners=uo;var ko={id:"tooltip",_element:wo,positioners:uo,afterInit(t,e,i){i&&(t.tooltip=new wo({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",i))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:s,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:s,beforeBody:s,beforeLabel:s,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return o(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:s,afterBody:s,beforeFooter:s,footer:s,afterFooter:s}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},So=Object.freeze({__proto__:null,Decimation:Nn,Filler:so,Legend:ao,SubTitle:co,Title:lo,Tooltip:ko});class Po extends is{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(o(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:K(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,c(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Do(t,e,{horizontal:i,minRotation:s}){const n=N(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}Po.id="category",Po.defaults={ticks:{callback:Po.prototype.getLabelForValue}};class Co extends is{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return o(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=z(s),e=z(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=1;(n>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*n)),a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:a,max:r,precision:l,count:h,maxTicks:c,maxDigits:d,includeBounds:u}=t,f=n||1,g=c-1,{min:p,max:m}=e,b=!o(a),x=!o(r),_=!o(h),y=(m-p)/(d+1);let v,M,w,k,S=F((m-p)/g/f)*f;if(S<1e-14&&!b&&!x)return[{value:p},{value:m}];k=Math.ceil(m/S)-Math.floor(p/S),k>g&&(S=F(k*S/g/f)*f),o(l)||(v=Math.pow(10,l),S=Math.ceil(S*v)/v),"ticks"===s?(M=Math.floor(p/S)*S,w=Math.ceil(m/S)*S):(M=p,w=m),b&&x&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((r-a)/n,S/1e3)?(k=Math.round(Math.min((r-a)/S,c)),S=(r-a)/k,M=a,w=r):_?(M=b?a:M,w=x?r:w,k=h-1,S=(w-M)/k):(k=(w-M)/S,k=B(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const P=Math.max(j(S),j(M));v=Math.pow(10,o(l)?P:l),M=Math.round(M*v)/v,w=Math.round(w*v)/v;let D=0;for(b&&(u&&M!==a?(i.push({value:a}),M<a&&D++,B(Math.round((M+D*S)*v)/v,a,Do(a,y,t))&&D++):M<a&&D++);D<k;++D)i.push({value:Math.round((M+D*S)*v)/v});return x&&u&&w!==r?i.length&&B(i[i.length-1].value,r,Do(r,y,t))?i[i.length-1].value=r:i.push({value:r}):x&&w!==r||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&W(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return si(t,this.chart.options.locale,this.options.ticks.format)}}class Oo extends Co{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=l(t)?t:0,this.max=l(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=N(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Ao(t){return 1==t/Math.pow(10,Math.floor(I(t)))}Oo.id="linear",Oo.defaults={ticks:{callback:qi.formatters.numeric}};class To extends is{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Co.prototype.parse.apply(this,[t,e]);if(0!==i)return l(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=l(t)?Math.max(0,t):null,this.max=l(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t,a=(t,e)=>Math.pow(10,Math.floor(I(t))+e);i===s&&(i<=0?(n(1),o(10)):(n(a(i,-1)),o(a(s,1)))),i<=0&&n(a(s,-1)),s<=0&&o(a(i,1)),this._zero&&this.min!==this._suggestedMin&&i===a(this.min,0)&&n(a(i,-1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(I(e.max)),s=Math.ceil(e.max/Math.pow(10,i)),n=[];let o=h(t.min,Math.pow(10,Math.floor(I(e.min)))),a=Math.floor(I(o)),r=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{n.push({value:o,major:Ao(o)}),++r,10===r&&(r=1,++a,l=a>=0?1:l),o=Math.round(r*Math.pow(10,a)*l)/l}while(a<i||a===i&&r<s);const c=h(t.max,o);return n.push({value:c,major:Ao(o)}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&W(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":si(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=I(t),this._valueRange=I(this.max)-I(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(I(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Lo(t){const e=t.ticks;if(e.display&&t.display){const t=xe(e.backdropPadding);return c(e.font&&e.font.size,Zt.font.size)+t.height}return 0}function Eo(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Ro(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function Io(t){return 0===t||180===t?"center":t<180?"left":"right"}function zo(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Fo(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,C);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}To.id="logarithmic",To.defaults={ticks:{callback:qi.formatters.logarithmic,major:{enabled:!0}}};class Vo extends Co{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=xe(Lo(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=l(t)&&!isNaN(t)?t:0,this.max=l(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Lo(this.options))}generateTickLabels(t){Co.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=u(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,r=t.options.pointLabels,l=r.centerPointLabels?D/o:0;for(let u=0;u<o;u++){const o=r.setContext(t.getPointLabelContext(u));n[u]=o.padding;const f=t.getPointPosition(u,t.drawingArea+n[u],l),g=_e(o.font),p=(h=t.ctx,c=g,d=a(d=t._pointLabels[u])?d:[d],{w:Qt(h,c.string,d),h:d.length*c.lineHeight});s[u]=p;const m=X(t.getIndexAngle(u)+l),b=Math.round(H(m));Ro(i,e,m,Eo(b,f.x,p.w,0,180),Eo(b,f.y,p.h,90,270))}var h,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,a=Lo(o)/2,r=t.drawingArea,l=o.pointLabels.centerPointLabels?D/n:0;for(let o=0;o<n;o++){const n=t.getPointPosition(o,r+a+i[o],l),u=Math.round(H(X(n.angle+L))),f=e[o],g=zo(n.y,f.h,u),p=Io(u),m=(h=n.x,c=f.w,"right"===(d=p)?h-=c:"center"===d&&(h-=c/2),h);s.push({x:n.x,y:g,textAlign:p,left:m,top:g,right:m+f.w,bottom:g+f.h})}var h,c,d;return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return X(t*(C/(this._pointLabels.length||1))+N(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(o(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(o(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ve(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-L+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Fo(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s}=e,n=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=s.setContext(t.getPointLabelContext(n)),a=_e(e.font),{x:r,y:l,textAlign:h,left:c,top:d,right:u,bottom:f}=t._pointLabelItems[n],{backdropColor:g}=e;if(!o(g)){const t=be(e.borderRadius),s=xe(e.backdropPadding);i.fillStyle=g;const n=c-s.left,o=d-s.top,a=u-c+s.width,r=f-d+s.height;Object.values(t).some((t=>0!==t))?(i.beginPath(),de(i,{x:n,y:o,w:a,h:r,radius:t}),i.fill()):i.fillRect(n,o,a,r)}he(i,t._pointLabels[n],r,l+a.lineHeight/2,a,{color:e.color,textAlign:h,textBaseline:"middle"})}}(this,n),s.display&&this.ticks.forEach(((t,e)=>{0!==e&&(r=this.getDistanceFromCenterForValue(t.value),function(t,e,i,s){const n=t.ctx,o=e.circular,{color:a,lineWidth:r}=e;!o&&!s||!a||!r||i<0||(n.save(),n.strokeStyle=a,n.lineWidth=r,n.setLineDash(e.borderDash),n.lineDashOffset=e.borderDashOffset,n.beginPath(),Fo(t,i,o,s),n.closePath(),n.stroke(),n.restore())}(this,s.setContext(this.getContext(e-1)),r,n))})),i.display){for(t.save(),a=n-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=_e(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=xe(r.backdropPadding);t.fillRect(-o/2-e.left,-n-l.size/2-e.top,o+e.width,l.size+e.height)}he(t,s.label,0,-n,l,{color:r.color})})),t.restore()}drawTitle(){}}Vo.id="radialLinear",Vo.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:qi.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Vo.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Vo.descriptors={angleLines:{_fallback:"grid"}};const Bo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Wo=Object.keys(Bo);function No(t,e){return t-e}function Ho(t,e){if(o(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:a}=t._parseOpts;let r=e;return"function"==typeof s&&(r=s(r)),l(r)||(r="string"==typeof s?i.parse(r,s):i.parse(r)),null===r?null:(n&&(r="week"!==n||!V(a)&&!0!==a?i.startOf(r,n):i.startOf(r,"isoWeek",a)),+r)}function jo(t,e,i,s){const n=Wo.length;for(let o=Wo.indexOf(t);o<n-1;++o){const t=Bo[Wo[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return Wo[o]}return Wo[n-1]}function $o(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Z(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function Yo(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class Uo extends is{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),s=this._adapter=new hs._date(t.adapters.date);s.init(e),_(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Ho(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=l(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=l(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?jo(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=Wo.length-1;o>=Wo.indexOf(i);o--){const i=Wo[o];if(Bo[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return Wo[i?Wo.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Wo.indexOf(t)+1,i=Wo.length;e<i;++e)if(Bo[Wo[e]].common)return Wo[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),Yo(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=K(s,0,o),n=K(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||jo(n.minUnit,e,i,this._getLabelCapacity(e)),a=c(n.stepSize,1),r="week"===o&&n.isoWeekday,l=V(r)||!0===r,h={};let d,u,f=e;if(l&&(f=+t.startOf(f,"isoWeek",r)),f=+t.startOf(f,l?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const g="data"===s.ticks.source&&this.getDataTimestamps();for(d=f,u=0;d<i;d=+t.add(d,a,o),u++)$o(h,d,g);return d!==i&&"ticks"!==s.bounds&&1!==u||$o(h,d,g),Object.keys(h).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.time.displayFormats,a=this._unit,r=this._majorUnit,l=a&&o[a],h=r&&o[r],c=i[e],d=r&&h&&c&&c.major,f=this._adapter.format(t,s||(d?h:l)),g=n.ticks.callback;return g?u(g,[f,e,i],this):f}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=N(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,Yo(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(Ho(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return it(t.sort(No))}}function Xo(t,e,i){let s,n,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=J(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=J(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[l]));const h=n-s;return h?o+(a-o)*(e-s)/h:o}Uo.id="time",Uo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class qo extends Uo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Xo(e,this.min),this._tableRange=Xo(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],r=s[o-1],l=s[o],Math.round((h+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Xo(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Xo(this._table,i*this._tableRange+this._minPos,!0)}}qo.id="timeseries",qo.defaults=Uo.defaults;var Ko=Object.freeze({__proto__:null,CategoryScale:Po,LinearScale:Oo,LogarithmicScale:To,RadialLinearScale:Vo,TimeScale:Uo,TimeSeriesScale:qo});const Go=[as,Vn,So,Ko]}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVEsU0FDUkMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxJQUFLLE9BQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLE9BQ1ZDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxJQUFLLFNBQ0xDLElBQUssT0FDTEMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsVUFBVyxTQUNYQyxRQUFTLFNBQ1RDLFdBQVksU0FDWkMsSUFBSyxTQUNMQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsS0FBTSxPQUNOQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsSUFBSyxLQUNMQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFVBQVcsT0FDWEMsSUFBSyxTQUNMQyxTQUFVLFNBQ1ZDLFdBQVksU0FDWkMsUUFBUyxTQUNUQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxLQUFNLEtBQ05DLE9BQVEsU0FDUkMsS0FBTSxTQUNOQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxLQUFNLFNBQ05DLFVBQVcsU0FDWEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMs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LEtBQUsyYSxVQUFVMVUsRUFBS29uQixPQUFPM0QsSUFFM0J6akIsRUFBS3JpQixPQUFTcWlCLEVBQU95akIsRUFFcENvNEMsRUFBYTloRSxLQUFLa3RCLE9BQU90TCxJQUFNa2dELEVBQ3hCQSxFQUVUc0IsbUJBQW1CdmhGLEdBQ2pCLE9BQVEsR0FBWW1lLEtBQUsya0UsT0FBUTlpRixHQUFTbWUsS0FBSzRrRSxTQUFXNWtFLEtBQUs2a0UsWUFFakVqaEMsaUJBQWlCejhCLEdBQ2YsTUFBTXk4RCxFQUFVNWpFLEtBQUtxaUUsU0FDZngrQixFQUFVN2pDLEtBQUs4akMsbUJBQW1CMzhCLEdBQVN5OEQsRUFBUXBsRCxPQUFTb2xELEVBQVFqNUUsSUFDMUUsT0FBTyxHQUFZcVYsS0FBSzJrRSxPQUFROWdDLEVBQVU3akMsS0FBSzZrRSxZQUFjN2tFLEtBQUs0a0UsU0FBUyxJQUcvRUYsR0FBZ0IvaUYsR0FBSyxhQUNyQitpRixHQUFnQmppRSxTQUFXeS9ELEdBQVV6L0QsU0FFckMsSUFBSWtDLEdBQXNCMWlCLE9BQU80b0MsT0FBTyxDQUN4Q3NmLFVBQVcsS0FDWGl3QixjQUFlQSxHQUNmd0MsWUFBYUEsR0FDYkcsaUJBQWtCQSxHQUNsQmtCLGtCQUFtQkEsR0FDbkJpRSxVQUFXQSxHQUNYd0MsZ0JBQWlCQSxLQUdqQixNQUFNTSxHQUFnQixDQUNwQnI4QixHQUNBLEdBQ0Fua0MsR0FDQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ucHdkX2NyeXB0by8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQubWpzIiwid2VicGFjazovL25wd2RfY3J5cHRvLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2hhcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ2hhcnQuanMgdjMuOS4xXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjIgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5jb25zdCB1aWQgPSAoZnVuY3Rpb24oKSB7XG4gIGxldCBpZCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaWQrKztcbiAgfTtcbn0oKSk7XG5mdW5jdGlvbiBpc051bGxPclVuZGVmKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodHlwZS5zbGljZSgwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc2xpY2UoLTYpID09PSAnQXJyYXldJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbmNvbnN0IGlzTnVtYmVyRmluaXRlID0gKHZhbHVlKSA9PiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUoK3ZhbHVlKTtcbmZ1bmN0aW9uIGZpbml0ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cbmZ1bmN0aW9uIHZhbHVlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbn1cbmNvbnN0IHRvUGVyY2VudGFnZSA9ICh2YWx1ZSwgZGltZW5zaW9uKSA9PlxuICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmVuZHNXaXRoKCclJykgP1xuICAgIHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwXG4gICAgOiB2YWx1ZSAvIGRpbWVuc2lvbjtcbmNvbnN0IHRvRGltZW5zaW9uID0gKHZhbHVlLCBkaW1lbnNpb24pID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/XG4gICAgcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgKiBkaW1lbnNpb25cbiAgICA6ICt2YWx1ZTtcbmZ1bmN0aW9uIGNhbGxiYWNrKGZuLCBhcmdzLCB0aGlzQXJnKSB7XG4gIGlmIChmbiAmJiB0eXBlb2YgZm4uY2FsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxufVxuZnVuY3Rpb24gZWFjaChsb29wYWJsZSwgZm4sIHRoaXNBcmcsIHJldmVyc2UpIHtcbiAgbGV0IGksIGxlbiwga2V5cztcbiAgaWYgKGlzQXJyYXkobG9vcGFibGUpKSB7XG4gICAgbGVuID0gbG9vcGFibGUubGVuZ3RoO1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChsb29wYWJsZSkpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXMobG9vcGFibGUpO1xuICAgIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfZWxlbWVudHNFcXVhbChhMCwgYTEpIHtcbiAgbGV0IGksIGlsZW4sIHYwLCB2MTtcbiAgaWYgKCFhMCB8fCAhYTEgfHwgYTAubGVuZ3RoICE9PSBhMS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIHYwID0gYTBbaV07XG4gICAgdjEgPSBhMVtpXTtcbiAgICBpZiAodjAuZGF0YXNldEluZGV4ICE9PSB2MS5kYXRhc2V0SW5kZXggfHwgdjAuaW5kZXggIT09IHYxLmluZGV4KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY2xvbmUkMShzb3VyY2UpIHtcbiAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2UubWFwKGNsb25lJDEpO1xuICB9XG4gIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBjb25zdCBrbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGsgPSAwO1xuICAgIGZvciAoOyBrIDwga2xlbjsgKytrKSB7XG4gICAgICB0YXJnZXRba2V5c1trXV0gPSBjbG9uZSQxKHNvdXJjZVtrZXlzW2tdXSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgcmV0dXJuIHNvdXJjZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gIHJldHVybiBbJ19fcHJvdG9fXycsICdwcm90b3R5cGUnLCAnY29uc3RydWN0b3InXS5pbmRleE9mKGtleSkgPT09IC0xO1xufVxuZnVuY3Rpb24gX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHR2YWwgPSB0YXJnZXRba2V5XTtcbiAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICBtZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRba2V5XSA9IGNsb25lJDEoc3ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBpc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcbiAgY29uc3QgaWxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBtZXJnZXIgPSBvcHRpb25zLm1lcmdlciB8fCBfbWVyZ2VyO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgaWYgKCFpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgZm9yIChsZXQgayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsraykge1xuICAgICAgbWVyZ2VyKGtleXNba10sIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIG1lcmdlSWYodGFyZ2V0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG1lcmdlKHRhcmdldCwgc291cmNlLCB7bWVyZ2VyOiBfbWVyZ2VySWZ9KTtcbn1cbmZ1bmN0aW9uIF9tZXJnZXJJZihrZXksIHRhcmdldCwgc291cmNlKSB7XG4gIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHR2YWwgPSB0YXJnZXRba2V5XTtcbiAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICBtZXJnZUlmKHR2YWwsIHN2YWwpO1xuICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBjbG9uZSQxKHN2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVwcmVjYXRlZChzY29wZSwgdmFsdWUsIHByZXZpb3VzLCBjdXJyZW50KSB7XG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKHNjb3BlICsgJzogXCInICsgcHJldmlvdXMgK1xuXHRcdFx0J1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG4gIH1cbn1cbmNvbnN0IGtleVJlc29sdmVycyA9IHtcbiAgJyc6IHYgPT4gdixcbiAgeDogbyA9PiBvLngsXG4gIHk6IG8gPT4gby55XG59O1xuZnVuY3Rpb24gcmVzb2x2ZU9iamVjdEtleShvYmosIGtleSkge1xuICBjb25zdCByZXNvbHZlciA9IGtleVJlc29sdmVyc1trZXldIHx8IChrZXlSZXNvbHZlcnNba2V5XSA9IF9nZXRLZXlSZXNvbHZlcihrZXkpKTtcbiAgcmV0dXJuIHJlc29sdmVyKG9iaik7XG59XG5mdW5jdGlvbiBfZ2V0S2V5UmVzb2x2ZXIoa2V5KSB7XG4gIGNvbnN0IGtleXMgPSBfc3BsaXRLZXkoa2V5KTtcbiAgcmV0dXJuIG9iaiA9PiB7XG4gICAgZm9yIChjb25zdCBrIG9mIGtleXMpIHtcbiAgICAgIGlmIChrID09PSAnJykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG9iaiA9IG9iaiAmJiBvYmpba107XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG59XG5mdW5jdGlvbiBfc3BsaXRLZXkoa2V5KSB7XG4gIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gIGNvbnN0IGtleXMgPSBbXTtcbiAgbGV0IHRtcCA9ICcnO1xuICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICB0bXAgKz0gcGFydDtcbiAgICBpZiAodG1wLmVuZHNXaXRoKCdcXFxcJykpIHtcbiAgICAgIHRtcCA9IHRtcC5zbGljZSgwLCAtMSkgKyAnLic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMucHVzaCh0bXApO1xuICAgICAgdG1wID0gJyc7XG4gICAgfVxuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5jb25zdCBkZWZpbmVkID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpID0+IHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhKSB7XG4gICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBfaXNDbGlja0V2ZW50KGUpIHtcbiAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbmNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIG5pY2VOdW0ocmFuZ2UpIHtcbiAgY29uc3Qgcm91bmRlZFJhbmdlID0gTWF0aC5yb3VuZChyYW5nZSk7XG4gIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgY29uc3QgbmljZVJhbmdlID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAocmFuZ2UpKSk7XG4gIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICByZXR1cm4gbmljZUZyYWN0aW9uICogbmljZVJhbmdlO1xufVxuZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc3FydCA9IE1hdGguc3FydCh2YWx1ZSk7XG4gIGxldCBpO1xuICBmb3IgKGkgPSAxOyBpIDwgc3FydDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlICUgaSA9PT0gMCkge1xuICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSAvIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgIHJlc3VsdC5wdXNoKHNxcnQpO1xuICB9XG4gIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhIC0gYikucG9wKCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5mdW5jdGlvbiBhbG1vc3RFcXVhbHMoeCwgeSwgZXBzaWxvbikge1xuICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQoeCk7XG4gIHJldHVybiAoKHJvdW5kZWQgLSBlcHNpbG9uKSA8PSB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+PSB4KTtcbn1cbmZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICByZXR1cm4gcmFkaWFucyAqICgxODAgLyBQSSk7XG59XG5mdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSAxO1xuICBsZXQgcCA9IDA7XG4gIHdoaWxlIChNYXRoLnJvdW5kKHggKiBlKSAvIGUgIT09IHgpIHtcbiAgICBlICo9IDEwO1xuICAgIHArKztcbiAgfVxuICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGdldEFuZ2xlRnJvbVBvaW50KGNlbnRyZVBvaW50LCBhbmdsZVBvaW50KSB7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgY29uc3QgcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyID0gTWF0aC5zcXJ0KGRpc3RhbmNlRnJvbVhDZW50ZXIgKiBkaXN0YW5jZUZyb21YQ2VudGVyICsgZGlzdGFuY2VGcm9tWUNlbnRlciAqIGRpc3RhbmNlRnJvbVlDZW50ZXIpO1xuICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICBpZiAoYW5nbGUgPCAoLTAuNSAqIFBJKSkge1xuICAgIGFuZ2xlICs9IFRBVTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFuZ2xlLFxuICAgIGRpc3RhbmNlOiByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXJcbiAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gIHJldHVybiAoYSAtIGIgKyBQSVRBVSkgJSBUQVUgLSBQSTtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gIHJldHVybiAoYSAlIFRBVSArIFRBVSkgJSBUQVU7XG59XG5mdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgY29uc3QgYSA9IF9ub3JtYWxpemVBbmdsZShhbmdsZSk7XG4gIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIGNvbnN0IGFuZ2xlVG9TdGFydCA9IF9ub3JtYWxpemVBbmdsZShzIC0gYSk7XG4gIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICBjb25zdCBlbmRUb0FuZ2xlID0gX25vcm1hbGl6ZUFuZ2xlKGEgLSBlKTtcbiAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCAoc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUpXG4gICAgfHwgKGFuZ2xlVG9TdGFydCA+IGFuZ2xlVG9FbmQgJiYgc3RhcnRUb0FuZ2xlIDwgZW5kVG9BbmdsZSk7XG59XG5mdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbHVlLCAtMzI3NjgsIDMyNzY3KTtcbn1cbmZ1bmN0aW9uIF9pc0JldHdlZW4odmFsdWUsIHN0YXJ0LCBlbmQsIGVwc2lsb24gPSAxZS02KSB7XG4gIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gIGNtcCA9IGNtcCB8fCAoKGluZGV4KSA9PiB0YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBtaWQ7XG4gIHdoaWxlIChoaSAtIGxvID4gMSkge1xuICAgIG1pZCA9IChsbyArIGhpKSA+PiAxO1xuICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgbG8gPSBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvLCBoaX07XG59XG5jb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUsIGxhc3QpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBsYXN0XG4gICAgPyBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA8PSB2YWx1ZVxuICAgIDogaW5kZXggPT4gdGFibGVbaW5kZXhdW2tleV0gPCB2YWx1ZSk7XG5jb25zdCBfcmxvb2t1cEJ5S2V5ID0gKHRhYmxlLCBrZXksIHZhbHVlKSA9PlxuICBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgaW5kZXggPT4gdGFibGVbaW5kZXhdW2tleV0gPj0gdmFsdWUpO1xuZnVuY3Rpb24gX2ZpbHRlckJldHdlZW4odmFsdWVzLCBtaW4sIG1heCkge1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgZW5kID0gdmFsdWVzLmxlbmd0aDtcbiAgd2hpbGUgKHN0YXJ0IDwgZW5kICYmIHZhbHVlc1tzdGFydF0gPCBtaW4pIHtcbiAgICBzdGFydCsrO1xuICB9XG4gIHdoaWxlIChlbmQgPiBzdGFydCAmJiB2YWx1ZXNbZW5kIC0gMV0gPiBtYXgpIHtcbiAgICBlbmQtLTtcbiAgfVxuICByZXR1cm4gc3RhcnQgPiAwIHx8IGVuZCA8IHZhbHVlcy5sZW5ndGhcbiAgICA/IHZhbHVlcy5zbGljZShzdGFydCwgZW5kKVxuICAgIDogdmFsdWVzO1xufVxuY29uc3QgYXJyYXlFdmVudHMgPSBbJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3NwbGljZScsICd1bnNoaWZ0J107XG5mdW5jdGlvbiBsaXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgaWYgKGFycmF5Ll9jaGFydGpzKSB7XG4gICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybjtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksICdfY2hhcnRqcycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IHtcbiAgICAgIGxpc3RlbmVyczogW2xpc3RlbmVyXVxuICAgIH1cbiAgfSk7XG4gIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IG1ldGhvZCA9ICdfb25EYXRhJyArIF9jYXBpdGFsaXplKGtleSk7XG4gICAgY29uc3QgYmFzZSA9IGFycmF5W2tleV07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgdmFsdWUoLi4uYXJncykge1xuICAgICAgICBjb25zdCByZXMgPSBiYXNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMuZm9yRWFjaCgob2JqZWN0KSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb2JqZWN0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiB1bmxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuICBjb25zdCBzdHViID0gYXJyYXkuX2NoYXJ0anM7XG4gIGlmICghc3R1Yikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsaXN0ZW5lcnMgPSBzdHViLmxpc3RlbmVycztcbiAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICBpZiAobGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgZGVsZXRlIGFycmF5W2tleV07XG4gIH0pO1xuICBkZWxldGUgYXJyYXkuX2NoYXJ0anM7XG59XG5mdW5jdGlvbiBfYXJyYXlVbmlxdWUoaXRlbXMpIHtcbiAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICBsZXQgaSwgaWxlbjtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIHNldC5hZGQoaXRlbXNbaV0pO1xuICB9XG4gIGlmIChzZXQuc2l6ZSA9PT0gaWxlbikge1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xufVxuXG5mdW5jdGlvbiBmb250U3RyaW5nKHBpeGVsU2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KSB7XG4gIHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG59XG5jb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG59KCkpO1xuZnVuY3Rpb24gdGhyb3R0bGVkKGZuLCB0aGlzQXJnLCB1cGRhdGVGbikge1xuICBjb25zdCB1cGRhdGVBcmdzID0gdXBkYXRlRm4gfHwgKChhcmdzKSA9PiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKSk7XG4gIGxldCB0aWNraW5nID0gZmFsc2U7XG4gIGxldCBhcmdzID0gW107XG4gIHJldHVybiBmdW5jdGlvbiguLi5yZXN0KSB7XG4gICAgYXJncyA9IHVwZGF0ZUFyZ3MocmVzdCk7XG4gICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpID0+IHtcbiAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCBkZWxheSkge1xuICBsZXQgdGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsYXk7XG4gIH07XG59XG5jb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pID0+IGFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuY29uc3QgX2FsaWduU3RhcnRFbmQgPSAoYWxpZ24sIHN0YXJ0LCBlbmQpID0+IGFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbmNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQsIHJ0bCkgPT4ge1xuICBjb25zdCBjaGVjayA9IHJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuZnVuY3Rpb24gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpIHtcbiAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBjb3VudCA9IHBvaW50Q291bnQ7XG4gIGlmIChtZXRhLl9zb3J0ZWQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCBfcGFyc2VkfSA9IG1ldGE7XG4gICAgY29uc3QgYXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSBpU2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICBzdGFydCA9IF9saW1pdFZhbHVlKE1hdGgubWluKFxuICAgICAgICBfbG9va3VwQnlLZXkoX3BhcnNlZCwgaVNjYWxlLmF4aXMsIG1pbikubG8sXG4gICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IHBvaW50Q291bnQgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtaW4pKS5sbyksXG4gICAgICAwLCBwb2ludENvdW50IC0gMSk7XG4gICAgfVxuICAgIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgICBjb3VudCA9IF9saW1pdFZhbHVlKE1hdGgubWF4KFxuICAgICAgICBfbG9va3VwQnlLZXkoX3BhcnNlZCwgaVNjYWxlLmF4aXMsIG1heCwgdHJ1ZSkuaGkgKyAxLFxuICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyAwIDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWF4KSwgdHJ1ZSkuaGkgKyAxKSxcbiAgICAgIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgY291bnR9O1xufVxuZnVuY3Rpb24gX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSB7XG4gIGNvbnN0IHt4U2NhbGUsIHlTY2FsZSwgX3NjYWxlUmFuZ2VzfSA9IG1ldGE7XG4gIGNvbnN0IG5ld1JhbmdlcyA9IHtcbiAgICB4bWluOiB4U2NhbGUubWluLFxuICAgIHhtYXg6IHhTY2FsZS5tYXgsXG4gICAgeW1pbjogeVNjYWxlLm1pbixcbiAgICB5bWF4OiB5U2NhbGUubWF4XG4gIH07XG4gIGlmICghX3NjYWxlUmFuZ2VzKSB7XG4gICAgbWV0YS5fc2NhbGVSYW5nZXMgPSBuZXdSYW5nZXM7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgY2hhbmdlZCA9IF9zY2FsZVJhbmdlcy54bWluICE9PSB4U2NhbGUubWluXG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnhtYXggIT09IHhTY2FsZS5tYXhcblx0XHR8fCBfc2NhbGVSYW5nZXMueW1pbiAhPT0geVNjYWxlLm1pblxuXHRcdHx8IF9zY2FsZVJhbmdlcy55bWF4ICE9PSB5U2NhbGUubWF4O1xuICBPYmplY3QuYXNzaWduKF9zY2FsZVJhbmdlcywgbmV3UmFuZ2VzKTtcbiAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmNvbnN0IGF0RWRnZSA9ICh0KSA9PiB0ID09PSAwIHx8IHQgPT09IDE7XG5jb25zdCBlbGFzdGljSW4gPSAodCwgcywgcCkgPT4gLShNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSk7XG5jb25zdCBlbGFzdGljT3V0ID0gKHQsIHMsIHApID0+IE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApICsgMTtcbmNvbnN0IGVmZmVjdHMgPSB7XG4gIGxpbmVhcjogdCA9PiB0LFxuICBlYXNlSW5RdWFkOiB0ID0+IHQgKiB0LFxuICBlYXNlT3V0UXVhZDogdCA9PiAtdCAqICh0IC0gMiksXG4gIGVhc2VJbk91dFF1YWQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHRcbiAgICA6IC0wLjUgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSksXG4gIGVhc2VJbkN1YmljOiB0ID0+IHQgKiB0ICogdCxcbiAgZWFzZU91dEN1YmljOiB0ID0+ICh0IC09IDEpICogdCAqIHQgKyAxLFxuICBlYXNlSW5PdXRDdWJpYzogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHRcbiAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMiksXG4gIGVhc2VJblF1YXJ0OiB0ID0+IHQgKiB0ICogdCAqIHQsXG4gIGVhc2VPdXRRdWFydDogdCA9PiAtKCh0IC09IDEpICogdCAqIHQgKiB0IC0gMSksXG4gIGVhc2VJbk91dFF1YXJ0OiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdCAqIHRcbiAgICA6IC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSxcbiAgZWFzZUluUXVpbnQ6IHQgPT4gdCAqIHQgKiB0ICogdCAqIHQsXG4gIGVhc2VPdXRRdWludDogdCA9PiAodCAtPSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxLFxuICBlYXNlSW5PdXRRdWludDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0ICogdFxuICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpLFxuICBlYXNlSW5TaW5lOiB0ID0+IC1NYXRoLmNvcyh0ICogSEFMRl9QSSkgKyAxLFxuICBlYXNlT3V0U2luZTogdCA9PiBNYXRoLnNpbih0ICogSEFMRl9QSSksXG4gIGVhc2VJbk91dFNpbmU6IHQgPT4gLTAuNSAqIChNYXRoLmNvcyhQSSAqIHQpIC0gMSksXG4gIGVhc2VJbkV4cG86IHQgPT4gKHQgPT09IDApID8gMCA6IE1hdGgucG93KDIsIDEwICogKHQgLSAxKSksXG4gIGVhc2VPdXRFeHBvOiB0ID0+ICh0ID09PSAxKSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxLFxuICBlYXNlSW5PdXRFeHBvOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiB0IDwgMC41XG4gICAgPyAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0ICogMiAtIDEpKVxuICAgIDogMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAodCAqIDIgLSAxKSkgKyAyKSxcbiAgZWFzZUluQ2lyYzogdCA9PiAodCA+PSAxKSA/IHQgOiAtKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSksXG4gIGVhc2VPdXRDaXJjOiB0ID0+IE1hdGguc3FydCgxIC0gKHQgLT0gMSkgKiB0KSxcbiAgZWFzZUluT3V0Q2lyYzogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSlcbiAgICA6IDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSxcbiAgZWFzZUluRWxhc3RpYzogdCA9PiBhdEVkZ2UodCkgPyB0IDogZWxhc3RpY0luKHQsIDAuMDc1LCAwLjMpLFxuICBlYXNlT3V0RWxhc3RpYzogdCA9PiBhdEVkZ2UodCkgPyB0IDogZWxhc3RpY091dCh0LCAwLjA3NSwgMC4zKSxcbiAgZWFzZUluT3V0RWxhc3RpYyh0KSB7XG4gICAgY29uc3QgcyA9IDAuMTEyNTtcbiAgICBjb25zdCBwID0gMC40NTtcbiAgICByZXR1cm4gYXRFZGdlKHQpID8gdCA6XG4gICAgICB0IDwgMC41XG4gICAgICAgID8gMC41ICogZWxhc3RpY0luKHQgKiAyLCBzLCBwKVxuICAgICAgICA6IDAuNSArIDAuNSAqIGVsYXN0aWNPdXQodCAqIDIgLSAxLCBzLCBwKTtcbiAgfSxcbiAgZWFzZUluQmFjayh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gIH0sXG4gIGVhc2VPdXRCYWNrKHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gKHQgLT0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICB9LFxuICBlYXNlSW5PdXRCYWNrKHQpIHtcbiAgICBsZXQgcyA9IDEuNzAxNTg7XG4gICAgaWYgKCh0IC89IDAuNSkgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogKHQgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCAtIHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKTtcbiAgfSxcbiAgZWFzZUluQm91bmNlOiB0ID0+IDEgLSBlZmZlY3RzLmVhc2VPdXRCb3VuY2UoMSAtIHQpLFxuICBlYXNlT3V0Qm91bmNlKHQpIHtcbiAgICBjb25zdCBtID0gNy41NjI1O1xuICAgIGNvbnN0IGQgPSAyLjc1O1xuICAgIGlmICh0IDwgKDEgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiB0ICogdDtcbiAgICB9XG4gICAgaWYgKHQgPCAoMiAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqICh0IC09ICgxLjUgLyBkKSkgKiB0ICsgMC43NTtcbiAgICB9XG4gICAgaWYgKHQgPCAoMi41IC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogKHQgLT0gKDIuMjUgLyBkKSkgKiB0ICsgMC45Mzc1O1xuICAgIH1cbiAgICByZXR1cm4gbSAqICh0IC09ICgyLjYyNSAvIGQpKSAqIHQgKyAwLjk4NDM3NTtcbiAgfSxcbiAgZWFzZUluT3V0Qm91bmNlOiB0ID0+ICh0IDwgMC41KVxuICAgID8gZWZmZWN0cy5lYXNlSW5Cb3VuY2UodCAqIDIpICogMC41XG4gICAgOiBlZmZlY3RzLmVhc2VPdXRCb3VuY2UodCAqIDIgLSAxKSAqIDAuNSArIDAuNSxcbn07XG5cbi8qIVxuICogQGt1cmtsZS9jb2xvciB2MC4yLjFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rdXJrbGUvY29sb3IjcmVhZG1lXG4gKiAoYykgMjAyMiBKdWtrYSBLdXJrZWxhXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gcm91bmQodikge1xuICByZXR1cm4gdiArIDAuNSB8IDA7XG59XG5jb25zdCBsaW0gPSAodiwgbCwgaCkgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgaCksIGwpO1xuZnVuY3Rpb24gcDJiKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMi41NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cbmNvbnN0IG1hcCQxID0gezA6IDAsIDE6IDEsIDI6IDIsIDM6IDMsIDQ6IDQsIDU6IDUsIDY6IDYsIDc6IDcsIDg6IDgsIDk6IDksIEE6IDEwLCBCOiAxMSwgQzogMTIsIEQ6IDEzLCBFOiAxNCwgRjogMTUsIGE6IDEwLCBiOiAxMSwgYzogMTIsIGQ6IDEzLCBlOiAxNCwgZjogMTV9O1xuY29uc3QgaGV4ID0gWy4uLicwMTIzNDU2Nzg5QUJDREVGJ107XG5jb25zdCBoMSA9IGIgPT4gaGV4W2IgJiAweEZdO1xuY29uc3QgaDIgPSBiID0+IGhleFsoYiAmIDB4RjApID4+IDRdICsgaGV4W2IgJiAweEZdO1xuY29uc3QgZXEgPSBiID0+ICgoYiAmIDB4RjApID4+IDQpID09PSAoYiAmIDB4Rik7XG5jb25zdCBpc1Nob3J0ID0gdiA9PiBlcSh2LnIpICYmIGVxKHYuZykgJiYgZXEodi5iKSAmJiBlcSh2LmEpO1xuZnVuY3Rpb24gaGV4UGFyc2Uoc3RyKSB7XG4gIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuICB2YXIgcmV0O1xuICBpZiAoc3RyWzBdID09PSAnIycpIHtcbiAgICBpZiAobGVuID09PSA0IHx8IGxlbiA9PT0gNSkge1xuICAgICAgcmV0ID0ge1xuICAgICAgICByOiAyNTUgJiBtYXAkMVtzdHJbMV1dICogMTcsXG4gICAgICAgIGc6IDI1NSAmIG1hcCQxW3N0clsyXV0gKiAxNyxcbiAgICAgICAgYjogMjU1ICYgbWFwJDFbc3RyWzNdXSAqIDE3LFxuICAgICAgICBhOiBsZW4gPT09IDUgPyBtYXAkMVtzdHJbNF1dICogMTcgOiAyNTVcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChsZW4gPT09IDcgfHwgbGVuID09PSA5KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IG1hcCQxW3N0clsxXV0gPDwgNCB8IG1hcCQxW3N0clsyXV0sXG4gICAgICAgIGc6IG1hcCQxW3N0clszXV0gPDwgNCB8IG1hcCQxW3N0cls0XV0sXG4gICAgICAgIGI6IG1hcCQxW3N0cls1XV0gPDwgNCB8IG1hcCQxW3N0cls2XV0sXG4gICAgICAgIGE6IGxlbiA9PT0gOSA/IChtYXAkMVtzdHJbN11dIDw8IDQgfCBtYXAkMVtzdHJbOF1dKSA6IDI1NVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IGFscGhhID0gKGEsIGYpID0+IGEgPCAyNTUgPyBmKGEpIDogJyc7XG5mdW5jdGlvbiBoZXhTdHJpbmcodikge1xuICB2YXIgZiA9IGlzU2hvcnQodikgPyBoMSA6IGgyO1xuICByZXR1cm4gdlxuICAgID8gJyMnICsgZih2LnIpICsgZih2LmcpICsgZih2LmIpICsgYWxwaGEodi5hLCBmKVxuICAgIDogdW5kZWZpbmVkO1xufVxuY29uc3QgSFVFX1JFID0gL14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIGhzbDJyZ2JuKGgsIHMsIGwpIHtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgcmV0dXJuIFtmKDApLCBmKDgpLCBmKDQpXTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2JuKGgsIHMsIHYpIHtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gNjApICUgNikgPT4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcbiAgcmV0dXJuIFtmKDUpLCBmKDMpLCBmKDEpXTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2JuKGgsIHcsIGIpIHtcbiAgY29uc3QgcmdiID0gaHNsMnJnYm4oaCwgMSwgMC41KTtcbiAgbGV0IGk7XG4gIGlmICh3ICsgYiA+IDEpIHtcbiAgICBpID0gMSAvICh3ICsgYik7XG4gICAgdyAqPSBpO1xuICAgIGIgKj0gaTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgcmdiW2ldICo9IDEgLSB3IC0gYjtcbiAgICByZ2JbaV0gKz0gdztcbiAgfVxuICByZXR1cm4gcmdiO1xufVxuZnVuY3Rpb24gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KSB7XG4gIGlmIChyID09PSBtYXgpIHtcbiAgICByZXR1cm4gKChnIC0gYikgLyBkKSArIChnIDwgYiA/IDYgOiAwKTtcbiAgfVxuICBpZiAoZyA9PT0gbWF4KSB7XG4gICAgcmV0dXJuIChiIC0gcikgLyBkICsgMjtcbiAgfVxuICByZXR1cm4gKHIgLSBnKSAvIGQgKyA0O1xufVxuZnVuY3Rpb24gcmdiMmhzbCh2KSB7XG4gIGNvbnN0IHJhbmdlID0gMjU1O1xuICBjb25zdCByID0gdi5yIC8gcmFuZ2U7XG4gIGNvbnN0IGcgPSB2LmcgLyByYW5nZTtcbiAgY29uc3QgYiA9IHYuYiAvIHJhbmdlO1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGxldCBoLCBzLCBkO1xuICBpZiAobWF4ICE9PSBtaW4pIHtcbiAgICBkID0gbWF4IC0gbWluO1xuICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICBoID0gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KTtcbiAgICBoID0gaCAqIDYwICsgMC41O1xuICB9XG4gIHJldHVybiBbaCB8IDAsIHMgfHwgMCwgbF07XG59XG5mdW5jdGlvbiBjYWxsbihmLCBhLCBiLCBjKSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShhKVxuICAgICAgPyBmKGFbMF0sIGFbMV0sIGFbMl0pXG4gICAgICA6IGYoYSwgYiwgYylcbiAgKS5tYXAobjJiKTtcbn1cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgcywgbCkge1xuICByZXR1cm4gY2FsbG4oaHNsMnJnYm4sIGgsIHMsIGwpO1xufVxuZnVuY3Rpb24gaHdiMnJnYihoLCB3LCBiKSB7XG4gIHJldHVybiBjYWxsbihod2IycmdibiwgaCwgdywgYik7XG59XG5mdW5jdGlvbiBoc3YycmdiKGgsIHMsIHYpIHtcbiAgcmV0dXJuIGNhbGxuKGhzdjJyZ2JuLCBoLCBzLCB2KTtcbn1cbmZ1bmN0aW9uIGh1ZShoKSB7XG4gIHJldHVybiAoaCAlIDM2MCArIDM2MCkgJSAzNjA7XG59XG5mdW5jdGlvbiBodWVQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IEhVRV9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgdjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzVdICE9PSB2KSB7XG4gICAgYSA9IG1bNl0gPyBwMmIoK21bNV0pIDogbjJiKCttWzVdKTtcbiAgfVxuICBjb25zdCBoID0gaHVlKCttWzJdKTtcbiAgY29uc3QgcDEgPSArbVszXSAvIDEwMDtcbiAgY29uc3QgcDIgPSArbVs0XSAvIDEwMDtcbiAgaWYgKG1bMV0gPT09ICdod2InKSB7XG4gICAgdiA9IGh3YjJyZ2IoaCwgcDEsIHAyKTtcbiAgfSBlbHNlIGlmIChtWzFdID09PSAnaHN2Jykge1xuICAgIHYgPSBoc3YycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSB7XG4gICAgdiA9IGhzbDJyZ2IoaCwgcDEsIHAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHI6IHZbMF0sXG4gICAgZzogdlsxXSxcbiAgICBiOiB2WzJdLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJvdGF0ZSh2LCBkZWcpIHtcbiAgdmFyIGggPSByZ2IyaHNsKHYpO1xuICBoWzBdID0gaHVlKGhbMF0gKyBkZWcpO1xuICBoID0gaHNsMnJnYihoKTtcbiAgdi5yID0gaFswXTtcbiAgdi5nID0gaFsxXTtcbiAgdi5iID0gaFsyXTtcbn1cbmZ1bmN0aW9uIGhzbFN0cmluZyh2KSB7XG4gIGlmICghdikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBhID0gcmdiMmhzbCh2KTtcbiAgY29uc3QgaCA9IGFbMF07XG4gIGNvbnN0IHMgPSBuMnAoYVsxXSk7XG4gIGNvbnN0IGwgPSBuMnAoYVsyXSk7XG4gIHJldHVybiB2LmEgPCAyNTVcbiAgICA/IGBoc2xhKCR7aH0sICR7c30lLCAke2x9JSwgJHtiMm4odi5hKX0pYFxuICAgIDogYGhzbCgke2h9LCAke3N9JSwgJHtsfSUpYDtcbn1cbmNvbnN0IG1hcCA9IHtcbiAgeDogJ2RhcmsnLFxuICBaOiAnbGlnaHQnLFxuICBZOiAncmUnLFxuICBYOiAnYmx1JyxcbiAgVzogJ2dyJyxcbiAgVjogJ21lZGl1bScsXG4gIFU6ICdzbGF0ZScsXG4gIEE6ICdlZScsXG4gIFQ6ICdvbCcsXG4gIFM6ICdvcicsXG4gIEI6ICdyYScsXG4gIEM6ICdsYXRlZycsXG4gIEQ6ICdpZ2h0cycsXG4gIFI6ICdpbicsXG4gIFE6ICd0dXJxdW9pcycsXG4gIEU6ICdoaScsXG4gIFA6ICdybycsXG4gIE86ICdhbCcsXG4gIE46ICdsZScsXG4gIE06ICdkZScsXG4gIEw6ICd5ZWxsbycsXG4gIEY6ICdlbicsXG4gIEs6ICdjaCcsXG4gIEc6ICdhcmtzJyxcbiAgSDogJ2VhJyxcbiAgSTogJ2lnaHRnJyxcbiAgSjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzJDEgPSB7XG4gIE9pY2VYZTogJ2YwZjhmZicsXG4gIGFudGlxdWV3RXRlOiAnZmFlYmQ3JyxcbiAgYXF1YTogJ2ZmZmYnLFxuICBhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuICBhenVZOiAnZjBmZmZmJyxcbiAgYmVpZ2U6ICdmNWY1ZGMnLFxuICBiaXNxdWU6ICdmZmU0YzQnLFxuICBibGFjazogJzAnLFxuICBibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuICBYZTogJ2ZmJyxcbiAgWGV2aVRldDogJzhhMmJlMicsXG4gIGJQd246ICdhNTJhMmEnLFxuICBidXJseXdvb2Q6ICdkZWI4ODcnLFxuICBjYU10WGU6ICc1ZjllYTAnLFxuICBLYXJ0WXVzZTogJzdmZmYwMCcsXG4gIEtvY1RhdGU6ICdkMjY5MWUnLFxuICBjU086ICdmZjdmNTAnLFxuICBjU25mbG93ZXJYZTogJzY0OTVlZCcsXG4gIGNTbnNpbGs6ICdmZmY4ZGMnLFxuICBjcmltc29uOiAnZGMxNDNjJyxcbiAgY3lhbjogJ2ZmZmYnLFxuICB4WGU6ICc4YicsXG4gIHhjeWFuOiAnOGI4YicsXG4gIHhnVE1uUGQ6ICdiODg2MGInLFxuICB4V2F5OiAnYTlhOWE5JyxcbiAgeGdZRjogJzY0MDAnLFxuICB4Z1l5OiAnYTlhOWE5JyxcbiAgeGtoYWtpOiAnYmRiNzZiJyxcbiAgeG1hZ0Z0YTogJzhiMDA4YicsXG4gIHhUaXZlZ1lGOiAnNTU2YjJmJyxcbiAgeFNhbmdlOiAnZmY4YzAwJyxcbiAgeFNjRWQ6ICc5OTMyY2MnLFxuICB4WWQ6ICc4YjAwMDAnLFxuICB4c09tb246ICdlOTk2N2EnLFxuICB4c0hnWUY6ICc4ZmJjOGYnLFxuICB4VVhlOiAnNDgzZDhiJyxcbiAgeFVXYXk6ICcyZjRmNGYnLFxuICB4VWdZeTogJzJmNGY0ZicsXG4gIHhRZTogJ2NlZDEnLFxuICB4dmlUZXQ6ICc5NDAwZDMnLFxuICBkQXBwUms6ICdmZjE0OTMnLFxuICBkQXBza3lYZTogJ2JmZmYnLFxuICBkaW1XYXk6ICc2OTY5NjknLFxuICBkaW1nWXk6ICc2OTY5NjknLFxuICBkb2RnZXJYZTogJzFlOTBmZicsXG4gIGZpWWJyaWNrOiAnYjIyMjIyJyxcbiAgZmxTT3dFdGU6ICdmZmZhZjAnLFxuICBmb1lzdFdBbjogJzIyOGIyMicsXG4gIGZ1S3NpYTogJ2ZmMDBmZicsXG4gIGdhUnNiU286ICdkY2RjZGMnLFxuICBnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuICBnVGQ6ICdmZmQ3MDAnLFxuICBnVE1uUGQ6ICdkYWE1MjAnLFxuICBXYXk6ICc4MDgwODAnLFxuICBnWUY6ICc4MDAwJyxcbiAgZ1lGTHc6ICdhZGZmMmYnLFxuICBnWXk6ICc4MDgwODAnLFxuICBob25leU13OiAnZjBmZmYwJyxcbiAgaG90cFJrOiAnZmY2OWI0JyxcbiAgUmRpYW5ZZDogJ2NkNWM1YycsXG4gIFJkaWdvOiAnNGIwMDgyJyxcbiAgaXZTeTogJ2ZmZmZmMCcsXG4gIGtoYWtpOiAnZjBlNjhjJyxcbiAgbGF2Rk1yOiAnZTZlNmZhJyxcbiAgbGF2Rk1yWHNoOiAnZmZmMGY1JyxcbiAgbGF3bmdZRjogJzdjZmMwMCcsXG4gIE5tb25jRWZmb246ICdmZmZhY2QnLFxuICBaWGU6ICdhZGQ4ZTYnLFxuICBaY1NPOiAnZjA4MDgwJyxcbiAgWmN5YW46ICdlMGZmZmYnLFxuICBaZ1RNblBkTHc6ICdmYWZhZDInLFxuICBaV2F5OiAnZDNkM2QzJyxcbiAgWmdZRjogJzkwZWU5MCcsXG4gIFpnWXk6ICdkM2QzZDMnLFxuICBacFJrOiAnZmZiNmMxJyxcbiAgWnNPbW9uOiAnZmZhMDdhJyxcbiAgWnNIZ1lGOiAnMjBiMmFhJyxcbiAgWnNreVhlOiAnODdjZWZhJyxcbiAgWlVXYXk6ICc3Nzg4OTknLFxuICBaVWdZeTogJzc3ODg5OScsXG4gIFpzdEFsWGU6ICdiMGM0ZGUnLFxuICBaTHc6ICdmZmZmZTAnLFxuICBsaW1lOiAnZmYwMCcsXG4gIGxpbWVnWUY6ICczMmNkMzInLFxuICBsUkY6ICdmYWYwZTYnLFxuICBtYWdGdGE6ICdmZjAwZmYnLFxuICBtYVBvbjogJzgwMDAwMCcsXG4gIFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuICBWWGU6ICdjZCcsXG4gIFZTY0VkOiAnYmE1NWQzJyxcbiAgVnB1cnBOOiAnOTM3MGRiJyxcbiAgVnNIZ1lGOiAnM2NiMzcxJyxcbiAgVlVYZTogJzdiNjhlZScsXG4gIFZzcHJSZ2dZRjogJ2ZhOWEnLFxuICBWUWU6ICc0OGQxY2MnLFxuICBWdmlUZXRZZDogJ2M3MTU4NScsXG4gIG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuICBtUnRjWWFtOiAnZjVmZmZhJyxcbiAgbWlzdHlQc2U6ICdmZmU0ZTEnLFxuICBtb2NjYXNSOiAnZmZlNGI1JyxcbiAgbmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG4gIG5hdnk6ICc4MCcsXG4gIFRkbGFjZTogJ2ZkZjVlNicsXG4gIFRpdmU6ICc4MDgwMDAnLFxuICBUaXZlZEJiOiAnNmI4ZTIzJyxcbiAgU2FuZ2U6ICdmZmE1MDAnLFxuICBTYW5nZVlkOiAnZmY0NTAwJyxcbiAgU2NFZDogJ2RhNzBkNicsXG4gIHBPZWdUTW5QZDogJ2VlZThhYScsXG4gIHBPZWdZRjogJzk4ZmI5OCcsXG4gIHBPZVFlOiAnYWZlZWVlJyxcbiAgcE9ldmlUZXRZZDogJ2RiNzA5MycsXG4gIHBhcGF5YXdFcDogJ2ZmZWZkNScsXG4gIHBIS3B1ZmY6ICdmZmRhYjknLFxuICBwZXJ1OiAnY2Q4NTNmJyxcbiAgcFJrOiAnZmZjMGNiJyxcbiAgcGx1bTogJ2RkYTBkZCcsXG4gIHBvd01yWGU6ICdiMGUwZTYnLFxuICBwdXJwTjogJzgwMDA4MCcsXG4gIFliZWNjYXB1cnBOOiAnNjYzMzk5JyxcbiAgWWQ6ICdmZjAwMDAnLFxuICBQc3licm93bjogJ2JjOGY4ZicsXG4gIFB5T1hlOiAnNDE2OWUxJyxcbiAgc2FkZE5iUHduOiAnOGI0NTEzJyxcbiAgc09tb246ICdmYTgwNzInLFxuICBzYW5keWJQd246ICdmNGE0NjAnLFxuICBzSGdZRjogJzJlOGI1NycsXG4gIHNIc2hlbGw6ICdmZmY1ZWUnLFxuICBzaUZuYTogJ2EwNTIyZCcsXG4gIHNpbHZlcjogJ2MwYzBjMCcsXG4gIHNreVhlOiAnODdjZWViJyxcbiAgVVhlOiAnNmE1YWNkJyxcbiAgVVdheTogJzcwODA5MCcsXG4gIFVnWXk6ICc3MDgwOTAnLFxuICBzbm93OiAnZmZmYWZhJyxcbiAgc3ByUmdnWUY6ICdmZjdmJyxcbiAgc3RBbFhlOiAnNDY4MmI0JyxcbiAgdGFuOiAnZDJiNDhjJyxcbiAgdGVPOiAnODA4MCcsXG4gIHRFc3ROOiAnZDhiZmQ4JyxcbiAgdG9tYXRvOiAnZmY2MzQ3JyxcbiAgUWU6ICc0MGUwZDAnLFxuICB2aVRldDogJ2VlODJlZScsXG4gIEpIdDogJ2Y1ZGViMycsXG4gIHdFdGU6ICdmZmZmZmYnLFxuICB3RXRlc21va2U6ICdmNWY1ZjUnLFxuICBMdzogJ2ZmZmYwMCcsXG4gIEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgY29uc3QgdW5wYWNrZWQgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzJDEpO1xuICBjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG4gIGxldCBpLCBqLCBrLCBvaywgbms7XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2sgPSBuayA9IGtleXNbaV07XG4gICAgZm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBrID0gdGtleXNbal07XG4gICAgICBuayA9IG5rLnJlcGxhY2UoaywgbWFwW2tdKTtcbiAgICB9XG4gICAgayA9IHBhcnNlSW50KG5hbWVzJDFbb2tdLCAxNik7XG4gICAgdW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkO1xufVxubGV0IG5hbWVzO1xuZnVuY3Rpb24gbmFtZVBhcnNlKHN0cikge1xuICBpZiAoIW5hbWVzKSB7XG4gICAgbmFtZXMgPSB1bnBhY2soKTtcbiAgICBuYW1lcy50cmFuc3BhcmVudCA9IFswLCAwLCAwLCAwXTtcbiAgfVxuICBjb25zdCBhID0gbmFtZXNbc3RyLnRvTG93ZXJDYXNlKCldO1xuICByZXR1cm4gYSAmJiB7XG4gICAgcjogYVswXSxcbiAgICBnOiBhWzFdLFxuICAgIGI6IGFbMl0sXG4gICAgYTogYS5sZW5ndGggPT09IDQgPyBhWzNdIDogMjU1XG4gIH07XG59XG5jb25zdCBSR0JfUkUgPSAvXnJnYmE/XFwoXFxzKihbLSsuXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT8oPzpbXFxzLC9dKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIHJnYlBhcnNlKHN0cikge1xuICBjb25zdCBtID0gUkdCX1JFLmV4ZWMoc3RyKTtcbiAgbGV0IGEgPSAyNTU7XG4gIGxldCByLCBnLCBiO1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1bN10gIT09IHIpIHtcbiAgICBjb25zdCB2ID0gK21bN107XG4gICAgYSA9IG1bOF0gPyBwMmIodikgOiBsaW0odiAqIDI1NSwgMCwgMjU1KTtcbiAgfVxuICByID0gK21bMV07XG4gIGcgPSArbVszXTtcbiAgYiA9ICttWzVdO1xuICByID0gMjU1ICYgKG1bMl0gPyBwMmIocikgOiBsaW0ociwgMCwgMjU1KSk7XG4gIGcgPSAyNTUgJiAobVs0XSA/IHAyYihnKSA6IGxpbShnLCAwLCAyNTUpKTtcbiAgYiA9IDI1NSAmIChtWzZdID8gcDJiKGIpIDogbGltKGIsIDAsIDI1NSkpO1xuICByZXR1cm4ge1xuICAgIHI6IHIsXG4gICAgZzogZyxcbiAgICBiOiBiLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJnYlN0cmluZyh2KSB7XG4gIHJldHVybiB2ICYmIChcbiAgICB2LmEgPCAyNTVcbiAgICAgID8gYHJnYmEoJHt2LnJ9LCAke3YuZ30sICR7di5ifSwgJHtiMm4odi5hKX0pYFxuICAgICAgOiBgcmdiKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0pYFxuICApO1xufVxuY29uc3QgdG8gPSB2ID0+IHYgPD0gMC4wMDMxMzA4ID8gdiAqIDEyLjkyIDogTWF0aC5wb3codiwgMS4wIC8gMi40KSAqIDEuMDU1IC0gMC4wNTU7XG5jb25zdCBmcm9tID0gdiA9PiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUocmdiMSwgcmdiMiwgdCkge1xuICBjb25zdCByID0gZnJvbShiMm4ocmdiMS5yKSk7XG4gIGNvbnN0IGcgPSBmcm9tKGIybihyZ2IxLmcpKTtcbiAgY29uc3QgYiA9IGZyb20oYjJuKHJnYjEuYikpO1xuICByZXR1cm4ge1xuICAgIHI6IG4yYih0byhyICsgdCAqIChmcm9tKGIybihyZ2IyLnIpKSAtIHIpKSksXG4gICAgZzogbjJiKHRvKGcgKyB0ICogKGZyb20oYjJuKHJnYjIuZykpIC0gZykpKSxcbiAgICBiOiBuMmIodG8oYiArIHQgKiAoZnJvbShiMm4ocmdiMi5iKSkgLSBiKSkpLFxuICAgIGE6IHJnYjEuYSArIHQgKiAocmdiMi5hIC0gcmdiMS5hKVxuICB9O1xufVxuZnVuY3Rpb24gbW9kSFNMKHYsIGksIHJhdGlvKSB7XG4gIGlmICh2KSB7XG4gICAgbGV0IHRtcCA9IHJnYjJoc2wodik7XG4gICAgdG1wW2ldID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odG1wW2ldICsgdG1wW2ldICogcmF0aW8sIGkgPT09IDAgPyAzNjAgOiAxKSk7XG4gICAgdG1wID0gaHNsMnJnYih0bXApO1xuICAgIHYuciA9IHRtcFswXTtcbiAgICB2LmcgPSB0bXBbMV07XG4gICAgdi5iID0gdG1wWzJdO1xuICB9XG59XG5mdW5jdGlvbiBjbG9uZSh2LCBwcm90bykge1xuICByZXR1cm4gdiA/IE9iamVjdC5hc3NpZ24ocHJvdG8gfHwge30sIHYpIDogdjtcbn1cbmZ1bmN0aW9uIGZyb21PYmplY3QoaW5wdXQpIHtcbiAgdmFyIHYgPSB7cjogMCwgZzogMCwgYjogMCwgYTogMjU1fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA+PSAzKSB7XG4gICAgICB2ID0ge3I6IGlucHV0WzBdLCBnOiBpbnB1dFsxXSwgYjogaW5wdXRbMl0sIGE6IDI1NX07XG4gICAgICBpZiAoaW5wdXQubGVuZ3RoID4gMykge1xuICAgICAgICB2LmEgPSBuMmIoaW5wdXRbM10pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2ID0gY2xvbmUoaW5wdXQsIHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAxfSk7XG4gICAgdi5hID0gbjJiKHYuYSk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5mdW5jdGlvbiBmdW5jdGlvblBhcnNlKHN0cikge1xuICBpZiAoc3RyLmNoYXJBdCgwKSA9PT0gJ3InKSB7XG4gICAgcmV0dXJuIHJnYlBhcnNlKHN0cik7XG4gIH1cbiAgcmV0dXJuIGh1ZVBhcnNlKHN0cik7XG59XG5jbGFzcyBDb2xvciB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgQ29sb3IpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBpbnB1dDtcbiAgICBsZXQgdjtcbiAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHYgPSBmcm9tT2JqZWN0KGlucHV0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2ID0gaGV4UGFyc2UoaW5wdXQpIHx8IG5hbWVQYXJzZShpbnB1dCkgfHwgZnVuY3Rpb25QYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHRoaXMuX3JnYiA9IHY7XG4gICAgdGhpcy5fdmFsaWQgPSAhIXY7XG4gIH1cbiAgZ2V0IHZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZDtcbiAgfVxuICBnZXQgcmdiKCkge1xuICAgIHZhciB2ID0gY2xvbmUodGhpcy5fcmdiKTtcbiAgICBpZiAodikge1xuICAgICAgdi5hID0gYjJuKHYuYSk7XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG4gIHNldCByZ2Iob2JqKSB7XG4gICAgdGhpcy5fcmdiID0gZnJvbU9iamVjdChvYmopO1xuICB9XG4gIHJnYlN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyByZ2JTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoZXhTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaGV4U3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaHNsU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IGhzbFN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIG1peChjb2xvciwgd2VpZ2h0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb25zdCBjMSA9IHRoaXMucmdiO1xuICAgICAgY29uc3QgYzIgPSBjb2xvci5yZ2I7XG4gICAgICBsZXQgdzI7XG4gICAgICBjb25zdCBwID0gd2VpZ2h0ID09PSB3MiA/IDAuNSA6IHdlaWdodDtcbiAgICAgIGNvbnN0IHcgPSAyICogcCAtIDE7XG4gICAgICBjb25zdCBhID0gYzEuYSAtIGMyLmE7XG4gICAgICBjb25zdCB3MSA9ICgodyAqIGEgPT09IC0xID8gdyA6ICh3ICsgYSkgLyAoMSArIHcgKiBhKSkgKyAxKSAvIDIuMDtcbiAgICAgIHcyID0gMSAtIHcxO1xuICAgICAgYzEuciA9IDB4RkYgJiB3MSAqIGMxLnIgKyB3MiAqIGMyLnIgKyAwLjU7XG4gICAgICBjMS5nID0gMHhGRiAmIHcxICogYzEuZyArIHcyICogYzIuZyArIDAuNTtcbiAgICAgIGMxLmIgPSAweEZGICYgdzEgKiBjMS5iICsgdzIgKiBjMi5iICsgMC41O1xuICAgICAgYzEuYSA9IHAgKiBjMS5hICsgKDEgLSBwKSAqIGMyLmE7XG4gICAgICB0aGlzLnJnYiA9IGMxO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpbnRlcnBvbGF0ZShjb2xvciwgdCkge1xuICAgIGlmIChjb2xvcikge1xuICAgICAgdGhpcy5fcmdiID0gaW50ZXJwb2xhdGUodGhpcy5fcmdiLCBjb2xvci5fcmdiLCB0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvcih0aGlzLnJnYik7XG4gIH1cbiAgYWxwaGEoYSkge1xuICAgIHRoaXMuX3JnYi5hID0gbjJiKGEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNsZWFyZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSAtIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGdyZXlzY2FsZSgpIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgY29uc3QgdmFsID0gcm91bmQocmdiLnIgKiAwLjMgKyByZ2IuZyAqIDAuNTkgKyByZ2IuYiAqIDAuMTEpO1xuICAgIHJnYi5yID0gcmdiLmcgPSByZ2IuYiA9IHZhbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvcGFxdWVyKHJhdGlvKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIHJnYi5hICo9IDEgKyByYXRpbztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBuZWdhdGUoKSB7XG4gICAgY29uc3QgdiA9IHRoaXMuX3JnYjtcbiAgICB2LnIgPSAyNTUgLSB2LnI7XG4gICAgdi5nID0gMjU1IC0gdi5nO1xuICAgIHYuYiA9IDI1NSAtIHYuYjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBsaWdodGVuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRhcmtlbihyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDIsIC1yYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc2F0dXJhdGUocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAxLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGVzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIC1yYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcm90YXRlKGRlZykge1xuICAgIHJvdGF0ZSh0aGlzLl9yZ2IsIGRlZyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbmZ1bmN0aW9uIGluZGV4X2VzbShpbnB1dCkge1xuICByZXR1cm4gbmV3IENvbG9yKGlucHV0KTtcbn1cblxuZnVuY3Rpb24gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkge1xuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHR5cGUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIHJldHVybiB0eXBlID09PSAnW29iamVjdCBDYW52YXNQYXR0ZXJuXScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzR3JhZGllbnRdJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb2xvcih2YWx1ZSkge1xuICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IGluZGV4X2VzbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRIb3ZlckNvbG9yKHZhbHVlKSB7XG4gIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKVxuICAgID8gdmFsdWVcbiAgICA6IGluZGV4X2VzbSh2YWx1ZSkuc2F0dXJhdGUoMC41KS5kYXJrZW4oMC4xKS5oZXhTdHJpbmcoKTtcbn1cblxuY29uc3Qgb3ZlcnJpZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGdldFNjb3BlJDEobm9kZSwga2V5KSB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgY29uc3Qga2V5cyA9IGtleS5zcGxpdCgnLicpO1xuICBmb3IgKGxldCBpID0gMCwgbiA9IGtleXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgbm9kZSA9IG5vZGVba10gfHwgKG5vZGVba10gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIHNldChyb290LCBzY29wZSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2Ygc2NvcGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgc2NvcGUpLCB2YWx1ZXMpO1xuICB9XG4gIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsICcnKSwgc2NvcGUpO1xufVxuY2xhc3MgRGVmYXVsdHMge1xuICBjb25zdHJ1Y3RvcihfZGVzY3JpcHRvcnMpIHtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgIHRoaXMuYm9yZGVyQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICB0aGlzLmNvbG9yID0gJyM2NjYnO1xuICAgIHRoaXMuZGF0YXNldHMgPSB7fTtcbiAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSAoY29udGV4dCkgPT4gY29udGV4dC5jaGFydC5wbGF0Zm9ybS5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgIHRoaXMuZXZlbnRzID0gW1xuICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAnbW91c2VvdXQnLFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICd0b3VjaG1vdmUnXG4gICAgXTtcbiAgICB0aGlzLmZvbnQgPSB7XG4gICAgICBmYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcbiAgICAgIHNpemU6IDEyLFxuICAgICAgc3R5bGU6ICdub3JtYWwnLFxuICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgd2VpZ2h0OiBudWxsXG4gICAgfTtcbiAgICB0aGlzLmhvdmVyID0ge307XG4gICAgdGhpcy5ob3ZlckJhY2tncm91bmRDb2xvciA9IChjdHgsIG9wdGlvbnMpID0+IGdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgIHRoaXMuaG92ZXJCb3JkZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpID0+IGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcik7XG4gICAgdGhpcy5ob3ZlckNvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmNvbG9yKTtcbiAgICB0aGlzLmluZGV4QXhpcyA9ICd4JztcbiAgICB0aGlzLmludGVyYWN0aW9uID0ge1xuICAgICAgbW9kZTogJ25lYXJlc3QnLFxuICAgICAgaW50ZXJzZWN0OiB0cnVlLFxuICAgICAgaW5jbHVkZUludmlzaWJsZTogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgdGhpcy5vbkhvdmVyID0gbnVsbDtcbiAgICB0aGlzLm9uQ2xpY2sgPSBudWxsO1xuICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgdGhpcy5wbHVnaW5zID0ge307XG4gICAgdGhpcy5yZXNwb25zaXZlID0gdHJ1ZTtcbiAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgdGhpcy5zaG93TGluZSA9IHRydWU7XG4gICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgdGhpcy5kZXNjcmliZShfZGVzY3JpcHRvcnMpO1xuICB9XG4gIHNldChzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldCh0aGlzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICBnZXQoc2NvcGUpIHtcbiAgICByZXR1cm4gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gIH1cbiAgZGVzY3JpYmUoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIG92ZXJyaWRlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KG92ZXJyaWRlcywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgY29uc3Qgc2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgICBjb25zdCB0YXJnZXRTY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgdGFyZ2V0U2NvcGUpO1xuICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY29wZU9iamVjdCwge1xuICAgICAgW3ByaXZhdGVOYW1lXToge1xuICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgW25hbWVdOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zdCBsb2NhbCA9IHRoaXNbcHJpdmF0ZU5hbWVdO1xuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgIGlmIChpc09iamVjdChsb2NhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQsIGxvY2FsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbnZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cyh7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdldmVudHMnLFxuICBob3Zlcjoge1xuICAgIF9mYWxsYmFjazogJ2ludGVyYWN0aW9uJ1xuICB9LFxuICBpbnRlcmFjdGlvbjoge1xuICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRvRm9udFN0cmluZyhmb250KSB7XG4gIGlmICghZm9udCB8fCBpc051bGxPclVuZGVmKGZvbnQuc2l6ZSkgfHwgaXNOdWxsT3JVbmRlZihmb250LmZhbWlseSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpXG5cdFx0KyAoZm9udC53ZWlnaHQgPyBmb250LndlaWdodCArICcgJyA6ICcnKVxuXHRcdCsgZm9udC5zaXplICsgJ3B4ICdcblx0XHQrIGZvbnQuZmFtaWx5O1xufVxuZnVuY3Rpb24gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuICBsZXQgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuICBpZiAoIXRleHRXaWR0aCkge1xuICAgIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuICAgIGdjLnB1c2goc3RyaW5nKTtcbiAgfVxuICBpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuICAgIGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG4gIH1cbiAgcmV0dXJuIGxvbmdlc3Q7XG59XG5mdW5jdGlvbiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuICBjYWNoZSA9IGNhY2hlIHx8IHt9O1xuICBsZXQgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuICBsZXQgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuICBpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuICAgIGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG4gICAgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IFtdO1xuICAgIGNhY2hlLmZvbnQgPSBmb250O1xuICB9XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gZm9udDtcbiAgbGV0IGxvbmdlc3QgPSAwO1xuICBjb25zdCBpbGVuID0gYXJyYXlPZlRoaW5ncy5sZW5ndGg7XG4gIGxldCBpLCBqLCBqbGVuLCB0aGluZywgbmVzdGVkVGhpbmc7XG4gIGZvciAoaSA9IDA7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB0aGluZyA9IGFycmF5T2ZUaGluZ3NbaV07XG4gICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcbiAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0aGluZykpIHtcbiAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgbmVzdGVkVGhpbmcgPSB0aGluZ1tqXTtcbiAgICAgICAgaWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG4gICAgICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY3R4LnJlc3RvcmUoKTtcbiAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICBpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKSB7XG4gICAgICBkZWxldGUgZGF0YVtnY1tpXV07XG4gICAgfVxuICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gIH1cbiAgcmV0dXJuIGxvbmdlc3Q7XG59XG5mdW5jdGlvbiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIHdpZHRoKSB7XG4gIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbztcbiAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggIT09IDAgPyBNYXRoLm1heCh3aWR0aCAvIDIsIDAuNSkgOiAwO1xuICByZXR1cm4gTWF0aC5yb3VuZCgocGl4ZWwgLSBoYWxmV2lkdGgpICogZGV2aWNlUGl4ZWxSYXRpbykgLyBkZXZpY2VQaXhlbFJhdGlvICsgaGFsZldpZHRoO1xufVxuZnVuY3Rpb24gY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpIHtcbiAgY3R4ID0gY3R4IHx8IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBjdHguc2F2ZSgpO1xuICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgeCwgeSkge1xuICBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCBudWxsKTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExlZ2VuZChjdHgsIG9wdGlvbnMsIHgsIHksIHcpIHtcbiAgbGV0IHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cywgd2lkdGg7XG4gIGNvbnN0IHN0eWxlID0gb3B0aW9ucy5wb2ludFN0eWxlO1xuICBjb25zdCByb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb247XG4gIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICBsZXQgcmFkID0gKHJvdGF0aW9uIHx8IDApICogUkFEX1BFUl9ERUc7XG4gIGlmIChzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgdHlwZSA9IHN0eWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgIGN0eC5yb3RhdGUocmFkKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2Uoc3R5bGUsIC1zdHlsZS53aWR0aCAvIDIsIC1zdHlsZS5oZWlnaHQgLyAyLCBzdHlsZS53aWR0aCwgc3R5bGUuaGVpZ2h0KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChpc05hTihyYWRpdXMpIHx8IHJhZGl1cyA8PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgc3dpdGNoIChzdHlsZSkge1xuICBkZWZhdWx0OlxuICAgIGlmICh3KSB7XG4gICAgICBjdHguZWxsaXBzZSh4LCB5LCB3IC8gMiwgcmFkaXVzLCAwLCAwLCBUQVUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICd0cmlhbmdsZSc6XG4gICAgY3R4Lm1vdmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdyZWN0Um91bmRlZCc6XG4gICAgY29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG4gICAgc2l6ZSA9IHJhZGl1cyAtIGNvcm5lclJhZGl1cztcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgY3R4LmFyYyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gUEksIHJhZCAtIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIEhBTEZfUEksIHJhZCk7XG4gICAgY3R4LmFyYyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcbiAgICBjdHguYXJjKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgKyBIQUxGX1BJLCByYWQgKyBQSSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdyZWN0JzpcbiAgICBpZiAoIXJvdGF0aW9uKSB7XG4gICAgICBzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiBzaXplO1xuICAgICAgY3R4LnJlY3QoeCAtIHdpZHRoLCB5IC0gc2l6ZSwgMiAqIHdpZHRoLCAyICogc2l6ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gIGNhc2UgJ3JlY3RSb3QnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Nyb3NzUm90JzpcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgY2FzZSAnY3Jvc3MnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnc3Rhcic6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnbGluZSc6XG4gICAgeE9mZnNldCA9IHcgPyB3IC8gMiA6IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnZGFzaCc6XG4gICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyhyYWQpICogcmFkaXVzLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgYnJlYWs7XG4gIH1cbiAgY3R4LmZpbGwoKTtcbiAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBfaXNQb2ludEluQXJlYShwb2ludCwgYXJlYSwgbWFyZ2luKSB7XG4gIG1hcmdpbiA9IG1hcmdpbiB8fCAwLjU7XG4gIHJldHVybiAhYXJlYSB8fCAocG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJlxuXHRcdHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW4pO1xufVxuZnVuY3Rpb24gY2xpcEFyZWEoY3R4LCBhcmVhKSB7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB1bmNsaXBBcmVhKGN0eCkge1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gX3N0ZXBwZWRMaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwLCBtb2RlKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGlmIChtb2RlID09PSAnbWlkZGxlJykge1xuICAgIGNvbnN0IG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG4gICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgcHJldmlvdXMueSk7XG4gICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgdGFyZ2V0LnkpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICdhZnRlcicgIT09ICEhZmxpcCkge1xuICAgIGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHByZXZpb3VzLnkpO1xuICB9XG4gIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIF9iZXppZXJDdXJ2ZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCkge1xuICBpZiAoIXByZXZpb3VzKSB7XG4gICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgfVxuICBjdHguYmV6aWVyQ3VydmVUbyhcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeCA6IHByZXZpb3VzLmNwMngsXG4gICAgZmxpcCA/IHByZXZpb3VzLmNwMXkgOiBwcmV2aW91cy5jcDJ5LFxuICAgIGZsaXAgPyB0YXJnZXQuY3AyeCA6IHRhcmdldC5jcDF4LFxuICAgIGZsaXAgPyB0YXJnZXQuY3AyeSA6IHRhcmdldC5jcDF5LFxuICAgIHRhcmdldC54LFxuICAgIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIHJlbmRlclRleHQoY3R4LCB0ZXh0LCB4LCB5LCBmb250LCBvcHRzID0ge30pIHtcbiAgY29uc3QgbGluZXMgPSBpc0FycmF5KHRleHQpID8gdGV4dCA6IFt0ZXh0XTtcbiAgY29uc3Qgc3Ryb2tlID0gb3B0cy5zdHJva2VXaWR0aCA+IDAgJiYgb3B0cy5zdHJva2VDb2xvciAhPT0gJyc7XG4gIGxldCBpLCBsaW5lO1xuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IGZvbnQuc3RyaW5nO1xuICBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cyk7XG4gIGZvciAoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBpZiAob3B0cy5zdHJva2VDb2xvcikge1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLnN0cm9rZUNvbG9yO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMuc3Ryb2tlV2lkdGgpKSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgICAgfVxuICAgICAgY3R4LnN0cm9rZVRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgfVxuICAgIGN0eC5maWxsVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKTtcbiAgICB5ICs9IGZvbnQubGluZUhlaWdodDtcbiAgfVxuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgaWYgKG9wdHMudHJhbnNsYXRpb24pIHtcbiAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICB9XG4gIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnJvdGF0aW9uKSkge1xuICAgIGN0eC5yb3RhdGUob3B0cy5yb3RhdGlvbik7XG4gIH1cbiAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgfVxuICBpZiAob3B0cy50ZXh0QWxpZ24pIHtcbiAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gIH1cbiAgaWYgKG9wdHMudGV4dEJhc2VsaW5lKSB7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9IG9wdHMudGV4dEJhc2VsaW5lO1xuICB9XG59XG5mdW5jdGlvbiBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKSB7XG4gIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiAgICBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUpO1xuICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgY29uc3QgcmlnaHQgPSB4ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveFJpZ2h0O1xuICAgIGNvbnN0IHRvcCA9IHkgLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xuICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICBjb25zdCB5RGVjb3JhdGlvbiA9IG9wdHMuc3RyaWtldGhyb3VnaCA/ICh0b3AgKyBib3R0b20pIC8gMiA6IGJvdHRvbTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0cy5kZWNvcmF0aW9uV2lkdGggfHwgMjtcbiAgICBjdHgubW92ZVRvKGxlZnQsIHlEZWNvcmF0aW9uKTtcbiAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGNvbnN0IHt4LCB5LCB3LCBoLCByYWRpdXN9ID0gcmVjdDtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLnRvcExlZnQsIHkgKyByYWRpdXMudG9wTGVmdCwgcmFkaXVzLnRvcExlZnQsIC1IQUxGX1BJLCBQSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gIGN0eC5hcmMoeCArIHJhZGl1cy5ib3R0b21MZWZ0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0LCByYWRpdXMuYm90dG9tTGVmdCwgUEksIEhBTEZfUEksIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCk7XG4gIGN0eC5hcmMoeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCByYWRpdXMuYm90dG9tUmlnaHQsIEhBTEZfUEksIDAsIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvKTtcbmNvbnN0IEZPTlRfU1RZTEUgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHxpdGFsaWN8aW5pdGlhbHxpbmhlcml0fHVuc2V0fChvYmxpcXVlKCAtP1swLTldP1swLTldZGVnKT8pKSQvKTtcbmZ1bmN0aW9uIHRvTGluZUhlaWdodCh2YWx1ZSwgc2l6ZSkge1xuICBjb25zdCBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKExJTkVfSEVJR0hUKTtcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgcmV0dXJuIHNpemUgKiAxLjI7XG4gIH1cbiAgdmFsdWUgPSArbWF0Y2hlc1syXTtcbiAgc3dpdGNoIChtYXRjaGVzWzNdKSB7XG4gIGNhc2UgJ3B4JzpcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNhc2UgJyUnOlxuICAgIHZhbHVlIC89IDEwMDtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gdiA9PiArdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBjb25zdCBvYmpQcm9wcyA9IGlzT2JqZWN0KHByb3BzKTtcbiAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IHJlYWQgPSBpc09iamVjdCh2YWx1ZSlcbiAgICA/IG9ialByb3BzXG4gICAgICA/IHByb3AgPT4gdmFsdWVPckRlZmF1bHQodmFsdWVbcHJvcF0sIHZhbHVlW3Byb3BzW3Byb3BdXSlcbiAgICAgIDogcHJvcCA9PiB2YWx1ZVtwcm9wXVxuICAgIDogKCkgPT4gdmFsdWU7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKSB7XG4gICAgcmV0W3Byb3BdID0gbnVtYmVyT3JaZXJvKHJlYWQocHJvcCkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0b1RSQkwodmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCB7dG9wOiAneScsIHJpZ2h0OiAneCcsIGJvdHRvbTogJ3knLCBsZWZ0OiAneCd9KTtcbn1cbmZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbJ3RvcExlZnQnLCAndG9wUmlnaHQnLCAnYm90dG9tTGVmdCcsICdib3R0b21SaWdodCddKTtcbn1cbmZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICBjb25zdCBvYmogPSB0b1RSQkwodmFsdWUpO1xuICBvYmoud2lkdGggPSBvYmoubGVmdCArIG9iai5yaWdodDtcbiAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gdG9Gb250KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gIGxldCBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zaXplLCBmYWxsYmFjay5zaXplKTtcbiAgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xuICAgIHNpemUgPSBwYXJzZUludChzaXplLCAxMCk7XG4gIH1cbiAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICBpZiAoc3R5bGUgJiYgISgnJyArIHN0eWxlKS5tYXRjaChGT05UX1NUWUxFKSkge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICBzdHlsZSA9ICcnO1xuICB9XG4gIGNvbnN0IGZvbnQgPSB7XG4gICAgZmFtaWx5OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZhbWlseSwgZmFsbGJhY2suZmFtaWx5KSxcbiAgICBsaW5lSGVpZ2h0OiB0b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBmYWxsYmFjay5saW5lSGVpZ2h0KSwgc2l6ZSksXG4gICAgc2l6ZSxcbiAgICBzdHlsZSxcbiAgICB3ZWlnaHQ6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMud2VpZ2h0LCBmYWxsYmFjay53ZWlnaHQpLFxuICAgIHN0cmluZzogJydcbiAgfTtcbiAgZm9udC5zdHJpbmcgPSB0b0ZvbnRTdHJpbmcoZm9udCk7XG4gIHJldHVybiBmb250O1xufVxuZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gIGxldCBjYWNoZWFibGUgPSB0cnVlO1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSBpbnB1dHNbaV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZVtpbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgaW5mby5jYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9hZGRHcmFjZShtaW5tYXgsIGdyYWNlLCBiZWdpbkF0WmVybykge1xuICBjb25zdCB7bWluLCBtYXh9ID0gbWlubWF4O1xuICBjb25zdCBjaGFuZ2UgPSB0b0RpbWVuc2lvbihncmFjZSwgKG1heCAtIG1pbikgLyAyKTtcbiAgY29uc3Qga2VlcFplcm8gPSAodmFsdWUsIGFkZCkgPT4gYmVnaW5BdFplcm8gJiYgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgKyBhZGQ7XG4gIHJldHVybiB7XG4gICAgbWluOiBrZWVwWmVybyhtaW4sIC1NYXRoLmFicyhjaGFuZ2UpKSxcbiAgICBtYXg6IGtlZXBaZXJvKG1heCwgY2hhbmdlKVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChwYXJlbnRDb250ZXh0LCBjb250ZXh0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCksIGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyA9IFsnJ10sIHJvb3RTY29wZXMgPSBzY29wZXMsIGZhbGxiYWNrLCBnZXRUYXJnZXQgPSAoKSA9PiBzY29wZXNbMF0pIHtcbiAgaWYgKCFkZWZpbmVkKGZhbGxiYWNrKSkge1xuICAgIGZhbGxiYWNrID0gX3Jlc29sdmUoJ19mYWxsYmFjaycsIHNjb3Blcyk7XG4gIH1cbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdPYmplY3QnLFxuICAgIF9jYWNoZWFibGU6IHRydWUsXG4gICAgX3Njb3Blczogc2NvcGVzLFxuICAgIF9yb290U2NvcGVzOiByb290U2NvcGVzLFxuICAgIF9mYWxsYmFjazogZmFsbGJhY2ssXG4gICAgX2dldFRhcmdldDogZ2V0VGFyZ2V0LFxuICAgIG92ZXJyaWRlOiAoc2NvcGUpID0+IF9jcmVhdGVSZXNvbHZlcihbc2NvcGUsIC4uLnNjb3Blc10sIHByZWZpeGVzLCByb290U2NvcGVzLCBmYWxsYmFjayksXG4gIH07XG4gIHJldHVybiBuZXcgUHJveHkoY2FjaGUsIHtcbiAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzO1xuICAgICAgZGVsZXRlIHNjb3Blc1swXVtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIF9jYWNoZWQodGFyZ2V0LCBwcm9wLFxuICAgICAgICAoKSA9PiBfcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCB0YXJnZXQpKTtcbiAgICB9LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuX3Njb3Blc1swXSwgcHJvcCk7XG4gICAgfSxcbiAgICBnZXRQcm90b3R5cGVPZigpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHNjb3Blc1swXSk7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KS5pbmNsdWRlcyhwcm9wKTtcbiAgICB9LFxuICAgIG93bktleXModGFyZ2V0KSB7XG4gICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICBjb25zdCBzdG9yYWdlID0gdGFyZ2V0Ll9zdG9yYWdlIHx8ICh0YXJnZXQuX3N0b3JhZ2UgPSBnZXRUYXJnZXQoKSk7XG4gICAgICB0YXJnZXRbcHJvcF0gPSBzdG9yYWdlW3Byb3BdID0gdmFsdWU7XG4gICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIF9hdHRhY2hDb250ZXh0KHByb3h5LCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gIGNvbnN0IGNhY2hlID0ge1xuICAgIF9jYWNoZWFibGU6IGZhbHNlLFxuICAgIF9wcm94eTogcHJveHksXG4gICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgX3N1YlByb3h5OiBzdWJQcm94eSxcbiAgICBfc3RhY2s6IG5ldyBTZXQoKSxcbiAgICBfZGVzY3JpcHRvcnM6IF9kZXNjcmlwdG9ycyhwcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICBzZXRDb250ZXh0OiAoY3R4KSA9PiBfYXR0YWNoQ29udGV4dChwcm94eSwgY3R4LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICBvdmVycmlkZTogKHNjb3BlKSA9PiBfYXR0YWNoQ29udGV4dChwcm94eS5vdmVycmlkZShzY29wZSksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gIH07XG4gIHJldHVybiBuZXcgUHJveHkoY2FjaGUsIHtcbiAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICBkZWxldGUgcHJveHlbcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIHRhcmdldC5fZGVzY3JpcHRvcnMuYWxsS2V5c1xuICAgICAgICA/IFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKSA/IHtlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9IDogdW5kZWZpbmVkXG4gICAgICAgIDogUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJveHksIHByb3ApO1xuICAgIH0sXG4gICAgZ2V0UHJvdG90eXBlT2YoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihwcm94eSk7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5oYXMocHJveHksIHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cygpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMocHJveHkpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIHByb3h5W3Byb3BdID0gdmFsdWU7XG4gICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIF9kZXNjcmlwdG9ycyhwcm94eSwgZGVmYXVsdHMgPSB7c2NyaXB0YWJsZTogdHJ1ZSwgaW5kZXhhYmxlOiB0cnVlfSkge1xuICBjb25zdCB7X3NjcmlwdGFibGUgPSBkZWZhdWx0cy5zY3JpcHRhYmxlLCBfaW5kZXhhYmxlID0gZGVmYXVsdHMuaW5kZXhhYmxlLCBfYWxsS2V5cyA9IGRlZmF1bHRzLmFsbEtleXN9ID0gcHJveHk7XG4gIHJldHVybiB7XG4gICAgYWxsS2V5czogX2FsbEtleXMsXG4gICAgc2NyaXB0YWJsZTogX3NjcmlwdGFibGUsXG4gICAgaW5kZXhhYmxlOiBfaW5kZXhhYmxlLFxuICAgIGlzU2NyaXB0YWJsZTogaXNGdW5jdGlvbihfc2NyaXB0YWJsZSkgPyBfc2NyaXB0YWJsZSA6ICgpID0+IF9zY3JpcHRhYmxlLFxuICAgIGlzSW5kZXhhYmxlOiBpc0Z1bmN0aW9uKF9pbmRleGFibGUpID8gX2luZGV4YWJsZSA6ICgpID0+IF9pbmRleGFibGVcbiAgfTtcbn1cbmNvbnN0IHJlYWRLZXkgPSAocHJlZml4LCBuYW1lKSA9PiBwcmVmaXggPyBwcmVmaXggKyBfY2FwaXRhbGl6ZShuYW1lKSA6IG5hbWU7XG5jb25zdCBuZWVkc1N1YlJlc29sdmVyID0gKHByb3AsIHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgJiYgcHJvcCAhPT0gJ2FkYXB0ZXJzJyAmJlxuICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gbnVsbCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbmZ1bmN0aW9uIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCByZXNvbHZlKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wKSkge1xuICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gIH1cbiAgY29uc3QgdmFsdWUgPSByZXNvbHZlKCk7XG4gIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVdpdGhDb250ZXh0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgY29uc3Qge19wcm94eSwgX2NvbnRleHQsIF9zdWJQcm94eSwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9yc30gPSB0YXJnZXQ7XG4gIGxldCB2YWx1ZSA9IF9wcm94eVtwcm9wXTtcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpICYmIGRlc2NyaXB0b3JzLmlzU2NyaXB0YWJsZShwcm9wKSkge1xuICAgIHZhbHVlID0gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGRlc2NyaXB0b3JzLmlzSW5kZXhhYmxlKTtcbiAgfVxuICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IF9hdHRhY2hDb250ZXh0KHZhbHVlLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCByZWNlaXZlcikge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfc3RhY2t9ID0gdGFyZ2V0O1xuICBpZiAoX3N0YWNrLmhhcyhwcm9wKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVjdXJzaW9uIGRldGVjdGVkOiAnICsgQXJyYXkuZnJvbShfc3RhY2spLmpvaW4oJy0+JykgKyAnLT4nICsgcHJvcCk7XG4gIH1cbiAgX3N0YWNrLmFkZChwcm9wKTtcbiAgdmFsdWUgPSB2YWx1ZShfY29udGV4dCwgX3N1YlByb3h5IHx8IHJlY2VpdmVyKTtcbiAgX3N0YWNrLmRlbGV0ZShwcm9wKTtcbiAgaWYgKG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpKSB7XG4gICAgdmFsdWUgPSBjcmVhdGVTdWJSZXNvbHZlcihfcHJveHkuX3Njb3BlcywgX3Byb3h5LCBwcm9wLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBpc0luZGV4YWJsZSkge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzfSA9IHRhcmdldDtcbiAgaWYgKGRlZmluZWQoX2NvbnRleHQuaW5kZXgpICYmIGlzSW5kZXhhYmxlKHByb3ApKSB7XG4gICAgdmFsdWUgPSB2YWx1ZVtfY29udGV4dC5pbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWVbMF0pKSB7XG4gICAgY29uc3QgYXJyID0gdmFsdWU7XG4gICAgY29uc3Qgc2NvcGVzID0gX3Byb3h5Ll9zY29wZXMuZmlsdGVyKHMgPT4gcyAhPT0gYXJyKTtcbiAgICB2YWx1ZSA9IFtdO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVyID0gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBfcHJveHksIHByb3AsIGl0ZW0pO1xuICAgICAgdmFsdWUucHVzaChfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGYWxsYmFjayhmYWxsYmFjaywgcHJvcCwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2socHJvcCwgdmFsdWUpIDogZmFsbGJhY2s7XG59XG5jb25zdCBnZXRTY29wZSA9IChrZXksIHBhcmVudCkgPT4ga2V5ID09PSB0cnVlID8gcGFyZW50XG4gIDogdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyByZXNvbHZlT2JqZWN0S2V5KHBhcmVudCwga2V5KSA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGFkZFNjb3BlcyhzZXQsIHBhcmVudFNjb3Blcywga2V5LCBwYXJlbnRGYWxsYmFjaywgdmFsdWUpIHtcbiAgZm9yIChjb25zdCBwYXJlbnQgb2YgcGFyZW50U2NvcGVzKSB7XG4gICAgY29uc3Qgc2NvcGUgPSBnZXRTY29wZShrZXksIHBhcmVudCk7XG4gICAgaWYgKHNjb3BlKSB7XG4gICAgICBzZXQuYWRkKHNjb3BlKTtcbiAgICAgIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHNjb3BlLl9mYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoZGVmaW5lZChmYWxsYmFjaykgJiYgZmFsbGJhY2sgIT09IGtleSAmJiBmYWxsYmFjayAhPT0gcGFyZW50RmFsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2NvcGUgPT09IGZhbHNlICYmIGRlZmluZWQocGFyZW50RmFsbGJhY2spICYmIGtleSAhPT0gcGFyZW50RmFsbGJhY2spIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVTdWJSZXNvbHZlcihwYXJlbnRTY29wZXMsIHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICBjb25zdCByb290U2NvcGVzID0gcmVzb2x2ZXIuX3Jvb3RTY29wZXM7XG4gIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHJlc29sdmVyLl9mYWxsYmFjaywgcHJvcCwgdmFsdWUpO1xuICBjb25zdCBhbGxTY29wZXMgPSBbLi4ucGFyZW50U2NvcGVzLCAuLi5yb290U2NvcGVzXTtcbiAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICBzZXQuYWRkKHZhbHVlKTtcbiAgbGV0IGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIHByb3AsIGZhbGxiYWNrIHx8IHByb3AsIHZhbHVlKTtcbiAgaWYgKGtleSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGVmaW5lZChmYWxsYmFjaykgJiYgZmFsbGJhY2sgIT09IHByb3ApIHtcbiAgICBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBmYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgaWYgKGtleSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2NyZWF0ZVJlc29sdmVyKEFycmF5LmZyb20oc2V0KSwgWycnXSwgcm9vdFNjb3BlcywgZmFsbGJhY2ssXG4gICAgKCkgPT4gc3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSkge1xuICB3aGlsZSAoa2V5KSB7XG4gICAga2V5ID0gYWRkU2NvcGVzKHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKTtcbiAgfVxuICByZXR1cm4ga2V5O1xufVxuZnVuY3Rpb24gc3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICBjb25zdCBwYXJlbnQgPSByZXNvbHZlci5fZ2V0VGFyZ2V0KCk7XG4gIGlmICghKHByb3AgaW4gcGFyZW50KSkge1xuICAgIHBhcmVudFtwcm9wXSA9IHt9O1xuICB9XG4gIGNvbnN0IHRhcmdldCA9IHBhcmVudFtwcm9wXTtcbiAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHByb3h5KSB7XG4gIGxldCB2YWx1ZTtcbiAgZm9yIChjb25zdCBwcmVmaXggb2YgcHJlZml4ZXMpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlKHJlYWRLZXkocHJlZml4LCBwcm9wKSwgc2NvcGVzKTtcbiAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKVxuICAgICAgICA/IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgcHJveHksIHByb3AsIHZhbHVlKVxuICAgICAgICA6IHZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX3Jlc29sdmUoa2V5LCBzY29wZXMpIHtcbiAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpIHtcbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBzY29wZVtrZXldO1xuICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KSB7XG4gIGxldCBrZXlzID0gdGFyZ2V0Ll9rZXlzO1xuICBpZiAoIWtleXMpIHtcbiAgICBrZXlzID0gdGFyZ2V0Ll9rZXlzID0gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHRhcmdldC5fc2NvcGVzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIHJlc29sdmVLZXlzRnJvbUFsbFNjb3BlcyhzY29wZXMpIHtcbiAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNjb3BlKS5maWx0ZXIoayA9PiAhay5zdGFydHNXaXRoKCdfJykpKSB7XG4gICAgICBzZXQuYWRkKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5mdW5jdGlvbiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gIGNvbnN0IHtpU2NhbGV9ID0gbWV0YTtcbiAgY29uc3Qge2tleSA9ICdyJ30gPSB0aGlzLl9wYXJzaW5nO1xuICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICBwYXJzZWRbaV0gPSB7XG4gICAgICByOiBpU2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCBrZXkpLCBpbmRleClcbiAgICB9O1xuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59XG5cbmNvbnN0IEVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcbmNvbnN0IGdldFBvaW50ID0gKHBvaW50cywgaSkgPT4gaSA8IHBvaW50cy5sZW5ndGggJiYgIXBvaW50c1tpXS5za2lwICYmIHBvaW50c1tpXTtcbmNvbnN0IGdldFZhbHVlQXhpcyA9IChpbmRleEF4aXMpID0+IGluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuZnVuY3Rpb24gc3BsaW5lQ3VydmUoZmlyc3RQb2ludCwgbWlkZGxlUG9pbnQsIGFmdGVyUG9pbnQsIHQpIHtcbiAgY29uc3QgcHJldmlvdXMgPSBmaXJzdFBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGZpcnN0UG9pbnQ7XG4gIGNvbnN0IGN1cnJlbnQgPSBtaWRkbGVQb2ludDtcbiAgY29uc3QgbmV4dCA9IGFmdGVyUG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogYWZ0ZXJQb2ludDtcbiAgY29uc3QgZDAxID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGN1cnJlbnQsIHByZXZpb3VzKTtcbiAgY29uc3QgZDEyID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKG5leHQsIGN1cnJlbnQpO1xuICBsZXQgczAxID0gZDAxIC8gKGQwMSArIGQxMik7XG4gIGxldCBzMTIgPSBkMTIgLyAoZDAxICsgZDEyKTtcbiAgczAxID0gaXNOYU4oczAxKSA/IDAgOiBzMDE7XG4gIHMxMiA9IGlzTmFOKHMxMikgPyAwIDogczEyO1xuICBjb25zdCBmYSA9IHQgKiBzMDE7XG4gIGNvbnN0IGZiID0gdCAqIHMxMjtcbiAgcmV0dXJuIHtcbiAgICBwcmV2aW91czoge1xuICAgICAgeDogY3VycmVudC54IC0gZmEgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG4gICAgICB5OiBjdXJyZW50LnkgLSBmYSAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuICAgIH0sXG4gICAgbmV4dDoge1xuICAgICAgeDogY3VycmVudC54ICsgZmIgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG4gICAgICB5OiBjdXJyZW50LnkgKyBmYiAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSykge1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgYWxwaGFLLCBiZXRhSywgdGF1Sywgc3F1YXJlZE1hZ25pdHVkZSwgcG9pbnRDdXJyZW50O1xuICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzTGVuIC0gMTsgKytpKSB7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQgfHwgIXBvaW50QWZ0ZXIpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxtb3N0RXF1YWxzKGRlbHRhS1tpXSwgMCwgRVBTSUxPTikpIHtcbiAgICAgIG1LW2ldID0gbUtbaSArIDFdID0gMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBhbHBoYUsgPSBtS1tpXSAvIGRlbHRhS1tpXTtcbiAgICBiZXRhSyA9IG1LW2kgKyAxXSAvIGRlbHRhS1tpXTtcbiAgICBzcXVhcmVkTWFnbml0dWRlID0gTWF0aC5wb3coYWxwaGFLLCAyKSArIE1hdGgucG93KGJldGFLLCAyKTtcbiAgICBpZiAoc3F1YXJlZE1hZ25pdHVkZSA8PSA5KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGF1SyA9IDMgLyBNYXRoLnNxcnQoc3F1YXJlZE1hZ25pdHVkZSk7XG4gICAgbUtbaV0gPSBhbHBoYUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICAgIG1LW2kgKyAxXSA9IGJldGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgfVxufVxuZnVuY3Rpb24gbW9ub3RvbmVDb21wdXRlKHBvaW50cywgbUssIGluZGV4QXhpcyA9ICd4Jykge1xuICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IGRlbHRhLCBwb2ludEJlZm9yZSwgcG9pbnRDdXJyZW50O1xuICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcbiAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGlQaXhlbCA9IHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgIGNvbnN0IHZQaXhlbCA9IHBvaW50Q3VycmVudFt2YWx1ZUF4aXNdO1xuICAgIGlmIChwb2ludEJlZm9yZSkge1xuICAgICAgZGVsdGEgPSAoaVBpeGVsIC0gcG9pbnRCZWZvcmVbaW5kZXhBeGlzXSkgLyAzO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDEke2luZGV4QXhpc31gXSA9IGlQaXhlbCAtIGRlbHRhO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDEke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCAtIGRlbHRhICogbUtbaV07XG4gICAgfVxuICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICBkZWx0YSA9IChwb2ludEFmdGVyW2luZGV4QXhpc10gLSBpUGl4ZWwpIC8gMztcbiAgICAgIHBvaW50Q3VycmVudFtgY3AyJHtpbmRleEF4aXN9YF0gPSBpUGl4ZWwgKyBkZWx0YTtcbiAgICAgIHBvaW50Q3VycmVudFtgY3AyJHt2YWx1ZUF4aXN9YF0gPSB2UGl4ZWwgKyBkZWx0YSAqIG1LW2ldO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyA9ICd4Jykge1xuICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3QgZGVsdGFLID0gQXJyYXkocG9pbnRzTGVuKS5maWxsKDApO1xuICBjb25zdCBtSyA9IEFycmF5KHBvaW50c0xlbik7XG4gIGxldCBpLCBwb2ludEJlZm9yZSwgcG9pbnRDdXJyZW50O1xuICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gIGZvciAoaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgIGNvbnN0IHNsb3BlRGVsdGEgPSBwb2ludEFmdGVyW2luZGV4QXhpc10gLSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgIGRlbHRhS1tpXSA9IHNsb3BlRGVsdGEgIT09IDAgPyAocG9pbnRBZnRlclt2YWx1ZUF4aXNdIC0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc10pIC8gc2xvcGVEZWx0YSA6IDA7XG4gICAgfVxuICAgIG1LW2ldID0gIXBvaW50QmVmb3JlID8gZGVsdGFLW2ldXG4gICAgICA6ICFwb2ludEFmdGVyID8gZGVsdGFLW2kgLSAxXVxuICAgICAgOiAoc2lnbihkZWx0YUtbaSAtIDFdKSAhPT0gc2lnbihkZWx0YUtbaV0pKSA/IDBcbiAgICAgIDogKGRlbHRhS1tpIC0gMV0gKyBkZWx0YUtbaV0pIC8gMjtcbiAgfVxuICBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspO1xuICBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzKTtcbn1cbmZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHB0LCBtYXgpLCBtaW4pO1xufVxuZnVuY3Rpb24gY2FwQmV6aWVyUG9pbnRzKHBvaW50cywgYXJlYSkge1xuICBsZXQgaSwgaWxlbiwgcG9pbnQsIGluQXJlYSwgaW5BcmVhUHJldjtcbiAgbGV0IGluQXJlYU5leHQgPSBfaXNQb2ludEluQXJlYShwb2ludHNbMF0sIGFyZWEpO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGluQXJlYVByZXYgPSBpbkFyZWE7XG4gICAgaW5BcmVhID0gaW5BcmVhTmV4dDtcbiAgICBpbkFyZWFOZXh0ID0gaSA8IGlsZW4gLSAxICYmIF9pc1BvaW50SW5BcmVhKHBvaW50c1tpICsgMV0sIGFyZWEpO1xuICAgIGlmICghaW5BcmVhKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgaWYgKGluQXJlYVByZXYpIHtcbiAgICAgIHBvaW50LmNwMXggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgIHBvaW50LmNwMXkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICB9XG4gICAgaWYgKGluQXJlYU5leHQpIHtcbiAgICAgIHBvaW50LmNwMnggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgIHBvaW50LmNwMnkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHBvaW50cywgb3B0aW9ucywgYXJlYSwgbG9vcCwgaW5kZXhBeGlzKSB7XG4gIGxldCBpLCBpbGVuLCBwb2ludCwgY29udHJvbFBvaW50cztcbiAgaWYgKG9wdGlvbnMuc3BhbkdhcHMpIHtcbiAgICBwb2ludHMgPSBwb2ludHMuZmlsdGVyKChwdCkgPT4gIXB0LnNraXApO1xuICB9XG4gIGlmIChvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcHJldiA9IGxvb3AgPyBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdIDogcG9pbnRzWzBdO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnRyb2xQb2ludHMgPSBzcGxpbmVDdXJ2ZShcbiAgICAgICAgcHJldixcbiAgICAgICAgcG9pbnQsXG4gICAgICAgIHBvaW50c1tNYXRoLm1pbihpICsgMSwgaWxlbiAtIChsb29wID8gMCA6IDEpKSAlIGlsZW5dLFxuICAgICAgICBvcHRpb25zLnRlbnNpb25cbiAgICAgICk7XG4gICAgICBwb2ludC5jcDF4ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy54O1xuICAgICAgcG9pbnQuY3AxeSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcbiAgICAgIHBvaW50LmNwMnggPSBjb250cm9sUG9pbnRzLm5leHQueDtcbiAgICAgIHBvaW50LmNwMnkgPSBjb250cm9sUG9pbnRzLm5leHQueTtcbiAgICAgIHByZXYgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMuY2FwQmV6aWVyUG9pbnRzKSB7XG4gICAgY2FwQmV6aWVyUG9pbnRzKHBvaW50cywgYXJlYSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2lzRG9tU3VwcG9ydGVkKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIF9nZXRQYXJlbnROb2RlKGRvbU5vZGUpIHtcbiAgbGV0IHBhcmVudCA9IGRvbU5vZGUucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU2hhZG93Um9vdF0nKSB7XG4gICAgcGFyZW50ID0gcGFyZW50Lmhvc3Q7XG4gIH1cbiAgcmV0dXJuIHBhcmVudDtcbn1cbmZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcbiAgbGV0IHZhbHVlSW5QaXhlbHM7XG4gIGlmICh0eXBlb2Ygc3R5bGVWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuICAgIGlmIChzdHlsZVZhbHVlLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgIHZhbHVlSW5QaXhlbHMgPSB2YWx1ZUluUGl4ZWxzIC8gMTAwICogbm9kZS5wYXJlbnROb2RlW3BhcmVudFByb3BlcnR5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVJblBpeGVscyA9IHN0eWxlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlSW5QaXhlbHM7XG59XG5jb25zdCBnZXRDb21wdXRlZFN0eWxlID0gKGVsZW1lbnQpID0+IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbn1cbmNvbnN0IHBvc2l0aW9ucyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XG5mdW5jdGlvbiBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGVzLCBzdHlsZSwgc3VmZml4KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBzdWZmaXggPSBzdWZmaXggPyAnLScgKyBzdWZmaXggOiAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnNbaV07XG4gICAgcmVzdWx0W3Bvc10gPSBwYXJzZUZsb2F0KHN0eWxlc1tzdHlsZSArICctJyArIHBvcyArIHN1ZmZpeF0pIHx8IDA7XG4gIH1cbiAgcmVzdWx0LndpZHRoID0gcmVzdWx0LmxlZnQgKyByZXN1bHQucmlnaHQ7XG4gIHJlc3VsdC5oZWlnaHQgPSByZXN1bHQudG9wICsgcmVzdWx0LmJvdHRvbTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHVzZU9mZnNldFBvcyA9ICh4LCB5LCB0YXJnZXQpID0+ICh4ID4gMCB8fCB5ID4gMCkgJiYgKCF0YXJnZXQgfHwgIXRhcmdldC5zaGFkb3dSb290KTtcbmZ1bmN0aW9uIGdldENhbnZhc1Bvc2l0aW9uKGUsIGNhbnZhcykge1xuICBjb25zdCB0b3VjaGVzID0gZS50b3VjaGVzO1xuICBjb25zdCBzb3VyY2UgPSB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID8gdG91Y2hlc1swXSA6IGU7XG4gIGNvbnN0IHtvZmZzZXRYLCBvZmZzZXRZfSA9IHNvdXJjZTtcbiAgbGV0IGJveCA9IGZhbHNlO1xuICBsZXQgeCwgeTtcbiAgaWYgKHVzZU9mZnNldFBvcyhvZmZzZXRYLCBvZmZzZXRZLCBlLnRhcmdldCkpIHtcbiAgICB4ID0gb2Zmc2V0WDtcbiAgICB5ID0gb2Zmc2V0WTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHggPSBzb3VyY2UuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICB5ID0gc291cmNlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICBib3ggPSB0cnVlO1xuICB9XG4gIHJldHVybiB7eCwgeSwgYm94fTtcbn1cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZXZ0LCBjaGFydCkge1xuICBpZiAoJ25hdGl2ZScgaW4gZXZ0KSB7XG4gICAgcmV0dXJuIGV2dDtcbiAgfVxuICBjb25zdCB7Y2FudmFzLCBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpb30gPSBjaGFydDtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gIGNvbnN0IGJvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnO1xuICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICBjb25zdCB7eCwgeSwgYm94fSA9IGdldENhbnZhc1Bvc2l0aW9uKGV2dCwgY2FudmFzKTtcbiAgY29uc3QgeE9mZnNldCA9IHBhZGRpbmdzLmxlZnQgKyAoYm94ICYmIGJvcmRlcnMubGVmdCk7XG4gIGNvbnN0IHlPZmZzZXQgPSBwYWRkaW5ncy50b3AgKyAoYm94ICYmIGJvcmRlcnMudG9wKTtcbiAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGNoYXJ0O1xuICBpZiAoYm9yZGVyQm94KSB7XG4gICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQoKHggLSB4T2Zmc2V0KSAvIHdpZHRoICogY2FudmFzLndpZHRoIC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pLFxuICAgIHk6IE1hdGgucm91bmQoKHkgLSB5T2Zmc2V0KSAvIGhlaWdodCAqIGNhbnZhcy5oZWlnaHQgLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbylcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lclNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGxldCBtYXhXaWR0aCwgbWF4SGVpZ2h0O1xuICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuICAgICAgY29uc3QgY29udGFpbmVyQm9yZGVyID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICBjb25zdCBjb250YWluZXJQYWRkaW5nID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAncGFkZGluZycpO1xuICAgICAgd2lkdGggPSByZWN0LndpZHRoIC0gY29udGFpbmVyUGFkZGluZy53aWR0aCAtIGNvbnRhaW5lckJvcmRlci53aWR0aDtcbiAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0IC0gY29udGFpbmVyUGFkZGluZy5oZWlnaHQgLSBjb250YWluZXJCb3JkZXIuaGVpZ2h0O1xuICAgICAgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heFdpZHRoLCBjb250YWluZXIsICdjbGllbnRXaWR0aCcpO1xuICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhIZWlnaHQsIGNvbnRhaW5lciwgJ2NsaWVudEhlaWdodCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBtYXhXaWR0aDogbWF4V2lkdGggfHwgSU5GSU5JVFksXG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQgfHwgSU5GSU5JVFlcbiAgfTtcbn1cbmNvbnN0IHJvdW5kMSA9IHYgPT4gTWF0aC5yb3VuZCh2ICogMTApIC8gMTA7XG5mdW5jdGlvbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgY29uc3QgbWFyZ2lucyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ21hcmdpbicpO1xuICBjb25zdCBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4V2lkdGgsIGNhbnZhcywgJ2NsaWVudFdpZHRoJykgfHwgSU5GSU5JVFk7XG4gIGNvbnN0IG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4SGVpZ2h0LCBjYW52YXMsICdjbGllbnRIZWlnaHQnKSB8fCBJTkZJTklUWTtcbiAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGdldENvbnRhaW5lclNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCk7XG4gIGxldCB7d2lkdGgsIGhlaWdodH0gPSBjb250YWluZXJTaXplO1xuICBpZiAoc3R5bGUuYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gIH1cbiAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCAtIG1hcmdpbnMud2lkdGgpO1xuICBoZWlnaHQgPSBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQgLSBtYXJnaW5zLmhlaWdodCk7XG4gIHdpZHRoID0gcm91bmQxKE1hdGgubWluKHdpZHRoLCBtYXhXaWR0aCwgY29udGFpbmVyU2l6ZS5tYXhXaWR0aCkpO1xuICBoZWlnaHQgPSByb3VuZDEoTWF0aC5taW4oaGVpZ2h0LCBtYXhIZWlnaHQsIGNvbnRhaW5lclNpemUubWF4SGVpZ2h0KSk7XG4gIGlmICh3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgaGVpZ2h0ID0gcm91bmQxKHdpZHRoIC8gMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJldGluYVNjYWxlKGNoYXJ0LCBmb3JjZVJhdGlvLCBmb3JjZVN0eWxlKSB7XG4gIGNvbnN0IHBpeGVsUmF0aW8gPSBmb3JjZVJhdGlvIHx8IDE7XG4gIGNvbnN0IGRldmljZUhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0ICogcGl4ZWxSYXRpbyk7XG4gIGNvbnN0IGRldmljZVdpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCAqIHBpeGVsUmF0aW8pO1xuICBjaGFydC5oZWlnaHQgPSBkZXZpY2VIZWlnaHQgLyBwaXhlbFJhdGlvO1xuICBjaGFydC53aWR0aCA9IGRldmljZVdpZHRoIC8gcGl4ZWxSYXRpbztcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBpZiAoY2FudmFzLnN0eWxlICYmIChmb3JjZVN0eWxlIHx8ICghY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSkpIHtcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7Y2hhcnQuaGVpZ2h0fXB4YDtcbiAgICBjYW52YXMuc3R5bGUud2lkdGggPSBgJHtjaGFydC53aWR0aH1weGA7XG4gIH1cbiAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBwaXhlbFJhdGlvXG4gICAgICB8fCBjYW52YXMuaGVpZ2h0ICE9PSBkZXZpY2VIZWlnaHRcbiAgICAgIHx8IGNhbnZhcy53aWR0aCAhPT0gZGV2aWNlV2lkdGgpIHtcbiAgICBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgY2FudmFzLmhlaWdodCA9IGRldmljZUhlaWdodDtcbiAgICBjYW52YXMud2lkdGggPSBkZXZpY2VXaWR0aDtcbiAgICBjaGFydC5jdHguc2V0VHJhbnNmb3JtKHBpeGVsUmF0aW8sIDAsIDAsIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG4gIGxldCBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGdldCBwYXNzaXZlKCkge1xuICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIHBhc3NpdmVTdXBwb3J0ZWQ7XG59KCkpO1xuZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHkpO1xuICBjb25zdCBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG4gIHJldHVybiBtYXRjaGVzID8gK21hdGNoZXNbMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9wb2ludEluTGluZShwMSwgcDIsIHQsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgeTogcDEueSArIHQgKiAocDIueSAtIHAxLnkpXG4gIH07XG59XG5mdW5jdGlvbiBfc3RlcHBlZEludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgIHk6IG1vZGUgPT09ICdtaWRkbGUnID8gdCA8IDAuNSA/IHAxLnkgOiBwMi55XG4gICAgOiBtb2RlID09PSAnYWZ0ZXInID8gdCA8IDEgPyBwMS55IDogcDIueVxuICAgIDogdCA+IDAgPyBwMi55IDogcDEueVxuICB9O1xufVxuZnVuY3Rpb24gX2JlemllckludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gIGNvbnN0IGNwMSA9IHt4OiBwMS5jcDJ4LCB5OiBwMS5jcDJ5fTtcbiAgY29uc3QgY3AyID0ge3g6IHAyLmNwMXgsIHk6IHAyLmNwMXl9O1xuICBjb25zdCBhID0gX3BvaW50SW5MaW5lKHAxLCBjcDEsIHQpO1xuICBjb25zdCBiID0gX3BvaW50SW5MaW5lKGNwMSwgY3AyLCB0KTtcbiAgY29uc3QgYyA9IF9wb2ludEluTGluZShjcDIsIHAyLCB0KTtcbiAgY29uc3QgZCA9IF9wb2ludEluTGluZShhLCBiLCB0KTtcbiAgY29uc3QgZSA9IF9wb2ludEluTGluZShiLCBjLCB0KTtcbiAgcmV0dXJuIF9wb2ludEluTGluZShkLCBlLCB0KTtcbn1cblxuY29uc3QgaW50bENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgY2FjaGVLZXkgPSBsb2NhbGUgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgbGV0IGZvcm1hdHRlciA9IGludGxDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoIWZvcm1hdHRlcikge1xuICAgIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgIGludGxDYWNoZS5zZXQoY2FjaGVLZXksIGZvcm1hdHRlcik7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0sIGxvY2FsZSwgb3B0aW9ucykge1xuICByZXR1cm4gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KG51bSk7XG59XG5cbmNvbnN0IGdldFJpZ2h0VG9MZWZ0QWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuICByZXR1cm4ge1xuICAgIHgoeCkge1xuICAgICAgcmV0dXJuIHJlY3RYICsgcmVjdFggKyB3aWR0aCAtIHg7XG4gICAgfSxcbiAgICBzZXRXaWR0aCh3KSB7XG4gICAgICB3aWR0aCA9IHc7XG4gICAgfSxcbiAgICB0ZXh0QWxpZ24oYWxpZ24pIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9LFxuICAgIHhQbHVzKHgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4geCAtIHZhbHVlO1xuICAgIH0sXG4gICAgbGVmdEZvckx0cih4LCBpdGVtV2lkdGgpIHtcbiAgICAgIHJldHVybiB4IC0gaXRlbVdpZHRoO1xuICAgIH0sXG4gIH07XG59O1xuY29uc3QgZ2V0TGVmdFRvUmlnaHRBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeCh4KSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9LFxuICAgIHNldFdpZHRoKHcpIHtcbiAgICB9LFxuICAgIHRleHRBbGlnbihhbGlnbikge1xuICAgICAgcmV0dXJuIGFsaWduO1xuICAgIH0sXG4gICAgeFBsdXMoeCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB4ICsgdmFsdWU7XG4gICAgfSxcbiAgICBsZWZ0Rm9yTHRyKHgsIF9pdGVtV2lkdGgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG4gIH07XG59O1xuZnVuY3Rpb24gZ2V0UnRsQWRhcHRlcihydGwsIHJlY3RYLCB3aWR0aCkge1xuICByZXR1cm4gcnRsID8gZ2V0UmlnaHRUb0xlZnRBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIoKTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIGRpcmVjdGlvbikge1xuICBsZXQgc3R5bGUsIG9yaWdpbmFsO1xuICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJyB8fCBkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgc3R5bGUgPSBjdHguY2FudmFzLnN0eWxlO1xuICAgIG9yaWdpbmFsID0gW1xuICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJyksXG4gICAgICBzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdkaXJlY3Rpb24nKSxcbiAgICBdO1xuICAgIHN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBkaXJlY3Rpb24sICdpbXBvcnRhbnQnKTtcbiAgICBjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcmlnaW5hbCkge1xuICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBjdHgucHJldlRleHREaXJlY3Rpb247XG4gICAgY3R4LmNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgb3JpZ2luYWxbMF0sIG9yaWdpbmFsWzFdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZuKHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgIHJldHVybiB7XG4gICAgICBiZXR3ZWVuOiBfYW5nbGVCZXR3ZWVuLFxuICAgICAgY29tcGFyZTogX2FuZ2xlRGlmZixcbiAgICAgIG5vcm1hbGl6ZTogX25vcm1hbGl6ZUFuZ2xlLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBiZXR3ZWVuOiBfaXNCZXR3ZWVuLFxuICAgIGNvbXBhcmU6IChhLCBiKSA9PiBhIC0gYixcbiAgICBub3JtYWxpemU6IHggPT4geFxuICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2VnbWVudCh7c3RhcnQsIGVuZCwgY291bnQsIGxvb3AsIHN0eWxlfSkge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgIGVuZDogZW5kICUgY291bnQsXG4gICAgbG9vcDogbG9vcCAmJiAoZW5kIC0gc3RhcnQgKyAxKSAlIGNvdW50ID09PSAwLFxuICAgIHN0eWxlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQ6IHN0YXJ0Qm91bmQsIGVuZDogZW5kQm91bmR9ID0gYm91bmRzO1xuICBjb25zdCB7YmV0d2Vlbiwgbm9ybWFsaXplfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCB7c3RhcnQsIGVuZCwgbG9vcH0gPSBzZWdtZW50O1xuICBsZXQgaSwgaWxlbjtcbiAgaWYgKGxvb3ApIHtcbiAgICBzdGFydCArPSBjb3VudDtcbiAgICBlbmQgKz0gY291bnQ7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAoIWJldHdlZW4obm9ybWFsaXplKHBvaW50c1tzdGFydCAlIGNvdW50XVtwcm9wZXJ0eV0pLCBzdGFydEJvdW5kLCBlbmRCb3VuZCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzdGFydC0tO1xuICAgICAgZW5kLS07XG4gICAgfVxuICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgIGVuZCAlPSBjb3VudDtcbiAgfVxuICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICBlbmQgKz0gY291bnQ7XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgZW5kLCBsb29wLCBzdHlsZTogc2VnbWVudC5zdHlsZX07XG59XG5mdW5jdGlvbiBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gIGlmICghYm91bmRzKSB7XG4gICAgcmV0dXJuIFtzZWdtZW50XTtcbiAgfVxuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0OiBzdGFydEJvdW5kLCBlbmQ6IGVuZEJvdW5kfSA9IGJvdW5kcztcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCB7Y29tcGFyZSwgYmV0d2Vlbiwgbm9ybWFsaXplfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICBjb25zdCB7c3RhcnQsIGVuZCwgbG9vcCwgc3R5bGV9ID0gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcyk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gIGxldCBzdWJTdGFydCA9IG51bGw7XG4gIGxldCB2YWx1ZSwgcG9pbnQsIHByZXZWYWx1ZTtcbiAgY29uc3Qgc3RhcnRJc0JlZm9yZSA9ICgpID0+IGJldHdlZW4oc3RhcnRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSkgJiYgY29tcGFyZShzdGFydEJvdW5kLCBwcmV2VmFsdWUpICE9PSAwO1xuICBjb25zdCBlbmRJc0JlZm9yZSA9ICgpID0+IGNvbXBhcmUoZW5kQm91bmQsIHZhbHVlKSA9PT0gMCB8fCBiZXR3ZWVuKGVuZEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKTtcbiAgY29uc3Qgc2hvdWxkU3RhcnQgPSAoKSA9PiBpbnNpZGUgfHwgc3RhcnRJc0JlZm9yZSgpO1xuICBjb25zdCBzaG91bGRTdG9wID0gKCkgPT4gIWluc2lkZSB8fCBlbmRJc0JlZm9yZSgpO1xuICBmb3IgKGxldCBpID0gc3RhcnQsIHByZXYgPSBzdGFydDsgaSA8PSBlbmQ7ICsraSkge1xuICAgIHBvaW50ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZShwb2ludFtwcm9wZXJ0eV0pO1xuICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaW5zaWRlID0gYmV0d2Vlbih2YWx1ZSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpO1xuICAgIGlmIChzdWJTdGFydCA9PT0gbnVsbCAmJiBzaG91bGRTdGFydCgpKSB7XG4gICAgICBzdWJTdGFydCA9IGNvbXBhcmUodmFsdWUsIHN0YXJ0Qm91bmQpID09PSAwID8gaSA6IHByZXY7XG4gICAgfVxuICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRTdG9wKCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0OiBzdWJTdGFydCwgZW5kOiBpLCBsb29wLCBjb3VudCwgc3R5bGV9KSk7XG4gICAgICBzdWJTdGFydCA9IG51bGw7XG4gICAgfVxuICAgIHByZXYgPSBpO1xuICAgIHByZXZWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIGlmIChzdWJTdGFydCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0OiBzdWJTdGFydCwgZW5kLCBsb29wLCBjb3VudCwgc3R5bGV9KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9ib3VuZFNlZ21lbnRzKGxpbmUsIGJvdW5kcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3ViID0gX2JvdW5kU2VnbWVudChzZWdtZW50c1tpXSwgbGluZS5wb2ludHMsIGJvdW5kcyk7XG4gICAgaWYgKHN1Yi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLnN1Yik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpIHtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IGNvdW50IC0gMTtcbiAgaWYgKGxvb3AgJiYgIXNwYW5HYXBzKSB7XG4gICAgd2hpbGUgKHN0YXJ0IDwgY291bnQgJiYgIXBvaW50c1tzdGFydF0uc2tpcCkge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHN0YXJ0IDwgY291bnQgJiYgcG9pbnRzW3N0YXJ0XS5za2lwKSB7XG4gICAgc3RhcnQrKztcbiAgfVxuICBzdGFydCAlPSBjb3VudDtcbiAgaWYgKGxvb3ApIHtcbiAgICBlbmQgKz0gc3RhcnQ7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHBvaW50c1tlbmQgJSBjb3VudF0uc2tpcCkge1xuICAgIGVuZC0tO1xuICB9XG4gIGVuZCAlPSBjb3VudDtcbiAgcmV0dXJuIHtzdGFydCwgZW5kfTtcbn1cbmZ1bmN0aW9uIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBsb29wKSB7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBsYXN0ID0gc3RhcnQ7XG4gIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0XTtcbiAgbGV0IGVuZDtcbiAgZm9yIChlbmQgPSBzdGFydCArIDE7IGVuZCA8PSBtYXg7ICsrZW5kKSB7XG4gICAgY29uc3QgY3VyID0gcG9pbnRzW2VuZCAlIGNvdW50XTtcbiAgICBpZiAoY3VyLnNraXAgfHwgY3VyLnN0b3ApIHtcbiAgICAgIGlmICghcHJldi5za2lwKSB7XG4gICAgICAgIGxvb3AgPSBmYWxzZTtcbiAgICAgICAgcmVzdWx0LnB1c2goe3N0YXJ0OiBzdGFydCAlIGNvdW50LCBlbmQ6IChlbmQgLSAxKSAlIGNvdW50LCBsb29wfSk7XG4gICAgICAgIHN0YXJ0ID0gbGFzdCA9IGN1ci5zdG9wID8gZW5kIDogbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IGVuZDtcbiAgICAgIGlmIChwcmV2LnNraXApIHtcbiAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIHByZXYgPSBjdXI7XG4gIH1cbiAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHN0YXJ0ICUgY291bnQsIGVuZDogbGFzdCAlIGNvdW50LCBsb29wfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9jb21wdXRlU2VnbWVudHMobGluZSwgc2VnbWVudE9wdGlvbnMpIHtcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHNwYW5HYXBzID0gbGluZS5vcHRpb25zLnNwYW5HYXBzO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGlmICghY291bnQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgbG9vcCA9ICEhbGluZS5fbG9vcDtcbiAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKTtcbiAgaWYgKHNwYW5HYXBzID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgW3tzdGFydCwgZW5kLCBsb29wfV0sIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xuICB9XG4gIGNvbnN0IG1heCA9IGVuZCA8IHN0YXJ0ID8gZW5kICsgY291bnQgOiBlbmQ7XG4gIGNvbnN0IGNvbXBsZXRlTG9vcCA9ICEhbGluZS5fZnVsbExvb3AgJiYgc3RhcnQgPT09IDAgJiYgZW5kID09PSBjb3VudCAtIDE7XG4gIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBjb21wbGV0ZUxvb3ApLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHNwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgaWYgKCFzZWdtZW50T3B0aW9ucyB8fCAhc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dCB8fCAhcG9pbnRzKSB7XG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG4gIHJldHVybiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGNvbnN0IGNoYXJ0Q29udGV4dCA9IGxpbmUuX2NoYXJ0LmdldENvbnRleHQoKTtcbiAgY29uc3QgYmFzZVN0eWxlID0gcmVhZFN0eWxlKGxpbmUub3B0aW9ucyk7XG4gIGNvbnN0IHtfZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXgsIG9wdGlvbnM6IHtzcGFuR2Fwc319ID0gbGluZTtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IHByZXZTdHlsZSA9IGJhc2VTdHlsZTtcbiAgbGV0IHN0YXJ0ID0gc2VnbWVudHNbMF0uc3RhcnQ7XG4gIGxldCBpID0gc3RhcnQ7XG4gIGZ1bmN0aW9uIGFkZFN0eWxlKHMsIGUsIGwsIHN0KSB7XG4gICAgY29uc3QgZGlyID0gc3BhbkdhcHMgPyAtMSA6IDE7XG4gICAgaWYgKHMgPT09IGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcyArPSBjb3VudDtcbiAgICB3aGlsZSAocG9pbnRzW3MgJSBjb3VudF0uc2tpcCkge1xuICAgICAgcyAtPSBkaXI7XG4gICAgfVxuICAgIHdoaWxlIChwb2ludHNbZSAlIGNvdW50XS5za2lwKSB7XG4gICAgICBlICs9IGRpcjtcbiAgICB9XG4gICAgaWYgKHMgJSBjb3VudCAhPT0gZSAlIGNvdW50KSB7XG4gICAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHMgJSBjb3VudCwgZW5kOiBlICUgY291bnQsIGxvb3A6IGwsIHN0eWxlOiBzdH0pO1xuICAgICAgcHJldlN0eWxlID0gc3Q7XG4gICAgICBzdGFydCA9IGUgJSBjb3VudDtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgc3RhcnQgPSBzcGFuR2FwcyA/IHN0YXJ0IDogc2VnbWVudC5zdGFydDtcbiAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydCAlIGNvdW50XTtcbiAgICBsZXQgc3R5bGU7XG4gICAgZm9yIChpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IHB0ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICBzdHlsZSA9IHJlYWRTdHlsZShzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0KGNyZWF0ZUNvbnRleHQoY2hhcnRDb250ZXh0LCB7XG4gICAgICAgIHR5cGU6ICdzZWdtZW50JyxcbiAgICAgICAgcDA6IHByZXYsXG4gICAgICAgIHAxOiBwdCxcbiAgICAgICAgcDBEYXRhSW5kZXg6IChpIC0gMSkgJSBjb3VudCxcbiAgICAgICAgcDFEYXRhSW5kZXg6IGkgJSBjb3VudCxcbiAgICAgICAgZGF0YXNldEluZGV4XG4gICAgICB9KSkpO1xuICAgICAgaWYgKHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSkge1xuICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByZXYgPSBwdDtcbiAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiByZWFkU3R5bGUob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgYm9yZGVyQ2FwU3R5bGU6IG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICBib3JkZXJKb2luU3R5bGU6IG9wdGlvbnMuYm9yZGVySm9pblN0eWxlLFxuICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yXG4gIH07XG59XG5mdW5jdGlvbiBzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkge1xuICByZXR1cm4gcHJldlN0eWxlICYmIEpTT04uc3RyaW5naWZ5KHN0eWxlKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0eWxlKTtcbn1cblxuZXhwb3J0IHsgX2lzUG9pbnRJbkFyZWEgYXMgJCwgX2ZhY3Rvcml6ZSBhcyBBLCBmaW5pdGVPckRlZmF1bHQgYXMgQiwgY2FsbGJhY2sgYXMgQywgX2FkZEdyYWNlIGFzIEQsIF9saW1pdFZhbHVlIGFzIEUsIHRvRGVncmVlcyBhcyBGLCBfbWVhc3VyZVRleHQgYXMgRywgSEFMRl9QSSBhcyBILCBfaW50MTZSYW5nZSBhcyBJLCBfYWxpZ25QaXhlbCBhcyBKLCB0b1BhZGRpbmcgYXMgSywgY2xpcEFyZWEgYXMgTCwgcmVuZGVyVGV4dCBhcyBNLCB1bmNsaXBBcmVhIGFzIE4sIHRvRm9udCBhcyBPLCBQSSBhcyBQLCBlYWNoIGFzIFEsIF90b0xlZnRSaWdodENlbnRlciBhcyBSLCBfYWxpZ25TdGFydEVuZCBhcyBTLCBUQVUgYXMgVCwgb3ZlcnJpZGVzIGFzIFUsIG1lcmdlIGFzIFYsIF9jYXBpdGFsaXplIGFzIFcsIGdldFJlbGF0aXZlUG9zaXRpb24gYXMgWCwgX3Jsb29rdXBCeUtleSBhcyBZLCBfbG9va3VwQnlLZXkgYXMgWiwgX2FycmF5VW5pcXVlIGFzIF8sIHJlc29sdmUgYXMgYSwgdG9MaW5lSGVpZ2h0IGFzIGEkLCBnZXRBbmdsZUZyb21Qb2ludCBhcyBhMCwgZ2V0TWF4aW11bVNpemUgYXMgYTEsIF9nZXRQYXJlbnROb2RlIGFzIGEyLCByZWFkVXNlZFNpemUgYXMgYTMsIHRocm90dGxlZCBhcyBhNCwgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyBhcyBhNSwgX2lzRG9tU3VwcG9ydGVkIGFzIGE2LCBkZXNjcmlwdG9ycyBhcyBhNywgaXNGdW5jdGlvbiBhcyBhOCwgX2F0dGFjaENvbnRleHQgYXMgYTksIGdldFJ0bEFkYXB0ZXIgYXMgYUEsIG92ZXJyaWRlVGV4dERpcmVjdGlvbiBhcyBhQiwgX3RleHRYIGFzIGFDLCByZXN0b3JlVGV4dERpcmVjdGlvbiBhcyBhRCwgZHJhd1BvaW50TGVnZW5kIGFzIGFFLCBub29wIGFzIGFGLCBkaXN0YW5jZUJldHdlZW5Qb2ludHMgYXMgYUcsIF9zZXRNaW5BbmRNYXhCeUtleSBhcyBhSCwgbmljZU51bSBhcyBhSSwgYWxtb3N0V2hvbGUgYXMgYUosIGFsbW9zdEVxdWFscyBhcyBhSywgX2RlY2ltYWxQbGFjZXMgYXMgYUwsIF9sb25nZXN0VGV4dCBhcyBhTSwgX2ZpbHRlckJldHdlZW4gYXMgYU4sIF9sb29rdXAgYXMgYU8sIGlzUGF0dGVybk9yR3JhZGllbnQgYXMgYVAsIGdldEhvdmVyQ29sb3IgYXMgYVEsIGNsb25lJDEgYXMgYVIsIF9tZXJnZXIgYXMgYVMsIF9tZXJnZXJJZiBhcyBhVCwgX2RlcHJlY2F0ZWQgYXMgYVUsIF9zcGxpdEtleSBhcyBhViwgdG9Gb250U3RyaW5nIGFzIGFXLCBzcGxpbmVDdXJ2ZSBhcyBhWCwgc3BsaW5lQ3VydmVNb25vdG9uZSBhcyBhWSwgZ2V0U3R5bGUgYXMgYVosIGZvbnRTdHJpbmcgYXMgYV8sIF9jcmVhdGVSZXNvbHZlciBhcyBhYSwgX2Rlc2NyaXB0b3JzIGFzIGFiLCBtZXJnZUlmIGFzIGFjLCB1aWQgYXMgYWQsIGRlYm91bmNlIGFzIGFlLCByZXRpbmFTY2FsZSBhcyBhZiwgY2xlYXJDYW52YXMgYXMgYWcsIHNldHNFcXVhbCBhcyBhaCwgX2VsZW1lbnRzRXF1YWwgYXMgYWksIF9pc0NsaWNrRXZlbnQgYXMgYWosIF9pc0JldHdlZW4gYXMgYWssIF9yZWFkVmFsdWVUb1Byb3BzIGFzIGFsLCBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyBhcyBhbSwgX2NvbXB1dGVTZWdtZW50cyBhcyBhbiwgX2JvdW5kU2VnbWVudHMgYXMgYW8sIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiBhcyBhcCwgX2JlemllckludGVycG9sYXRpb24gYXMgYXEsIF9wb2ludEluTGluZSBhcyBhciwgX3N0ZXBwZWRMaW5lVG8gYXMgYXMsIF9iZXppZXJDdXJ2ZVRvIGFzIGF0LCBkcmF3UG9pbnQgYXMgYXUsIGFkZFJvdW5kZWRSZWN0UGF0aCBhcyBhdiwgdG9UUkJMIGFzIGF3LCB0b1RSQkxDb3JuZXJzIGFzIGF4LCBfYm91bmRTZWdtZW50IGFzIGF5LCBfbm9ybWFsaXplQW5nbGUgYXMgYXosIGlzQXJyYXkgYXMgYiwgUElUQVUgYXMgYjAsIElORklOSVRZIGFzIGIxLCBSQURfUEVSX0RFRyBhcyBiMiwgUVVBUlRFUl9QSSBhcyBiMywgVFdPX1RISVJEU19QSSBhcyBiNCwgX2FuZ2xlRGlmZiBhcyBiNSwgY29sb3IgYXMgYywgZGVmYXVsdHMgYXMgZCwgZWZmZWN0cyBhcyBlLCByZXNvbHZlT2JqZWN0S2V5IGFzIGYsIGlzTnVtYmVyRmluaXRlIGFzIGcsIGNyZWF0ZUNvbnRleHQgYXMgaCwgaXNPYmplY3QgYXMgaSwgZGVmaW5lZCBhcyBqLCBpc051bGxPclVuZGVmIGFzIGssIGxpc3RlbkFycmF5RXZlbnRzIGFzIGwsIHRvUGVyY2VudGFnZSBhcyBtLCB0b0RpbWVuc2lvbiBhcyBuLCBmb3JtYXROdW1iZXIgYXMgbywgX2FuZ2xlQmV0d2VlbiBhcyBwLCBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyBhcyBxLCByZXF1ZXN0QW5pbUZyYW1lIGFzIHIsIHNpZ24gYXMgcywgdG9SYWRpYW5zIGFzIHQsIHVubGlzdGVuQXJyYXlFdmVudHMgYXMgdSwgdmFsdWVPckRlZmF1bHQgYXMgdiwgX3NjYWxlUmFuZ2VzQ2hhbmdlZCBhcyB3LCBpc051bWJlciBhcyB4LCBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUgYXMgeSwgbG9nMTAgYXMgeiB9O1xuIiwiLyohXG4gKiBDaGFydC5qcyB2My45LjFcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAyMiBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyByIGFzIHJlcXVlc3RBbmltRnJhbWUsIGEgYXMgcmVzb2x2ZSwgZSBhcyBlZmZlY3RzLCBjIGFzIGNvbG9yLCBkIGFzIGRlZmF1bHRzLCBpIGFzIGlzT2JqZWN0LCBiIGFzIGlzQXJyYXksIHYgYXMgdmFsdWVPckRlZmF1bHQsIHUgYXMgdW5saXN0ZW5BcnJheUV2ZW50cywgbCBhcyBsaXN0ZW5BcnJheUV2ZW50cywgZiBhcyByZXNvbHZlT2JqZWN0S2V5LCBnIGFzIGlzTnVtYmVyRmluaXRlLCBoIGFzIGNyZWF0ZUNvbnRleHQsIGogYXMgZGVmaW5lZCwgcyBhcyBzaWduLCBrIGFzIGlzTnVsbE9yVW5kZWYsIF8gYXMgX2FycmF5VW5pcXVlLCB0IGFzIHRvUmFkaWFucywgbSBhcyB0b1BlcmNlbnRhZ2UsIG4gYXMgdG9EaW1lbnNpb24sIFQgYXMgVEFVLCBvIGFzIGZvcm1hdE51bWJlciwgcCBhcyBfYW5nbGVCZXR3ZWVuLCBIIGFzIEhBTEZfUEksIFAgYXMgUEksIHEgYXMgX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMsIHcgYXMgX3NjYWxlUmFuZ2VzQ2hhbmdlZCwgeCBhcyBpc051bWJlciwgeSBhcyBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUsIHogYXMgbG9nMTAsIEEgYXMgX2ZhY3Rvcml6ZSwgQiBhcyBmaW5pdGVPckRlZmF1bHQsIEMgYXMgY2FsbGJhY2ssIEQgYXMgX2FkZEdyYWNlLCBFIGFzIF9saW1pdFZhbHVlLCBGIGFzIHRvRGVncmVlcywgRyBhcyBfbWVhc3VyZVRleHQsIEkgYXMgX2ludDE2UmFuZ2UsIEogYXMgX2FsaWduUGl4ZWwsIEsgYXMgdG9QYWRkaW5nLCBMIGFzIGNsaXBBcmVhLCBNIGFzIHJlbmRlclRleHQsIE4gYXMgdW5jbGlwQXJlYSwgTyBhcyB0b0ZvbnQsIFEgYXMgZWFjaCwgUiBhcyBfdG9MZWZ0UmlnaHRDZW50ZXIsIFMgYXMgX2FsaWduU3RhcnRFbmQsIFUgYXMgb3ZlcnJpZGVzLCBWIGFzIG1lcmdlLCBXIGFzIF9jYXBpdGFsaXplLCBYIGFzIGdldFJlbGF0aXZlUG9zaXRpb24sIFkgYXMgX3Jsb29rdXBCeUtleSwgWiBhcyBfbG9va3VwQnlLZXksICQgYXMgX2lzUG9pbnRJbkFyZWEsIGEwIGFzIGdldEFuZ2xlRnJvbVBvaW50LCBhMSBhcyBnZXRNYXhpbXVtU2l6ZSwgYTIgYXMgX2dldFBhcmVudE5vZGUsIGEzIGFzIHJlYWRVc2VkU2l6ZSwgYTQgYXMgdGhyb3R0bGVkLCBhNSBhcyBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zLCBhNiBhcyBfaXNEb21TdXBwb3J0ZWQsIGE3IGFzIGRlc2NyaXB0b3JzLCBhOCBhcyBpc0Z1bmN0aW9uLCBhOSBhcyBfYXR0YWNoQ29udGV4dCwgYWEgYXMgX2NyZWF0ZVJlc29sdmVyLCBhYiBhcyBfZGVzY3JpcHRvcnMsIGFjIGFzIG1lcmdlSWYsIGFkIGFzIHVpZCwgYWUgYXMgZGVib3VuY2UsIGFmIGFzIHJldGluYVNjYWxlLCBhZyBhcyBjbGVhckNhbnZhcywgYWggYXMgc2V0c0VxdWFsLCBhaSBhcyBfZWxlbWVudHNFcXVhbCwgYWogYXMgX2lzQ2xpY2tFdmVudCwgYWsgYXMgX2lzQmV0d2VlbiwgYWwgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFtIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhbiBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbyBhcyBfYm91bmRTZWdtZW50cywgYXAgYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhcSBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYXIgYXMgX3BvaW50SW5MaW5lLCBhcyBhcyBfc3RlcHBlZExpbmVUbywgYXQgYXMgX2JlemllckN1cnZlVG8sIGF1IGFzIGRyYXdQb2ludCwgYXYgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdyBhcyB0b1RSQkwsIGF4IGFzIHRvVFJCTENvcm5lcnMsIGF5IGFzIF9ib3VuZFNlZ21lbnQsIGF6IGFzIF9ub3JtYWxpemVBbmdsZSwgYUEgYXMgZ2V0UnRsQWRhcHRlciwgYUIgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBhQyBhcyBfdGV4dFgsIGFEIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhRSBhcyBkcmF3UG9pbnRMZWdlbmQsIGFGIGFzIG5vb3AsIGFHIGFzIGRpc3RhbmNlQmV0d2VlblBvaW50cywgYUggYXMgX3NldE1pbkFuZE1heEJ5S2V5LCBhSSBhcyBuaWNlTnVtLCBhSiBhcyBhbG1vc3RXaG9sZSwgYUsgYXMgYWxtb3N0RXF1YWxzLCBhTCBhcyBfZGVjaW1hbFBsYWNlcywgYU0gYXMgX2xvbmdlc3RUZXh0LCBhTiBhcyBfZmlsdGVyQmV0d2VlbiwgYU8gYXMgX2xvb2t1cCB9IGZyb20gJy4vY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5tanMnO1xuZXhwb3J0IHsgZCBhcyBkZWZhdWx0cyB9IGZyb20gJy4vY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5tanMnO1xuXG5jbGFzcyBBbmltYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMuX2NoYXJ0cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fbGFzdERhdGUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsIHR5cGUpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgY29uc3QgbnVtU3RlcHMgPSBhbmltcy5kdXJhdGlvbjtcbiAgICBjYWxsYmFja3MuZm9yRWFjaChmbiA9PiBmbih7XG4gICAgICBjaGFydCxcbiAgICAgIGluaXRpYWw6IGFuaW1zLmluaXRpYWwsXG4gICAgICBudW1TdGVwcyxcbiAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgIH0pKTtcbiAgfVxuICBfcmVmcmVzaCgpIHtcbiAgICBpZiAodGhpcy5fcmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLl9ydW5uaW5nKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgbGV0IHJlbWFpbmluZyA9IDA7XG4gICAgdGhpcy5fY2hhcnRzLmZvckVhY2goKGFuaW1zLCBjaGFydCkgPT4ge1xuICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIGxldCBkcmF3ID0gZmFsc2U7XG4gICAgICBsZXQgaXRlbTtcbiAgICAgIGZvciAoOyBpID49IDA7IC0taSkge1xuICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGlmIChpdGVtLl9hY3RpdmUpIHtcbiAgICAgICAgICBpZiAoaXRlbS5fdG90YWwgPiBhbmltcy5kdXJhdGlvbikge1xuICAgICAgICAgICAgYW5pbXMuZHVyYXRpb24gPSBpdGVtLl90b3RhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS50aWNrKGRhdGUpO1xuICAgICAgICAgIGRyYXcgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zW2ldID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkcmF3KSB7XG4gICAgICAgIGNoYXJ0LmRyYXcoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBhbmltcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsICdjb21wbGV0ZScpO1xuICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgIH0pO1xuICAgIHRoaXMuX2xhc3REYXRlID0gZGF0ZTtcbiAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIF9nZXRBbmltcyhjaGFydCkge1xuICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICBsZXQgYW5pbXMgPSBjaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zKSB7XG4gICAgICBhbmltcyA9IHtcbiAgICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgY29tcGxldGU6IFtdLFxuICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hhcnRzLnNldChjaGFydCwgYW5pbXMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbXM7XG4gIH1cbiAgbGlzdGVuKGNoYXJ0LCBldmVudCwgY2IpIHtcbiAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgfVxuICBhZGQoY2hhcnQsIGl0ZW1zKSB7XG4gICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5pdGVtcy5wdXNoKC4uLml0ZW1zKTtcbiAgfVxuICBoYXMoY2hhcnQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gIH1cbiAgc3RhcnQoY2hhcnQpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYW5pbXMucnVubmluZyA9IHRydWU7XG4gICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGFuaW1zLmR1cmF0aW9uID0gYW5pbXMuaXRlbXMucmVkdWNlKChhY2MsIGN1cikgPT4gTWF0aC5tYXgoYWNjLCBjdXIuX2R1cmF0aW9uKSwgMCk7XG4gICAgdGhpcy5fcmVmcmVzaCgpO1xuICB9XG4gIHJ1bm5pbmcoY2hhcnQpIHtcbiAgICBpZiAoIXRoaXMuX3J1bm5pbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3RvcChjaGFydCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBpID49IDA7IC0taSkge1xuICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgfVxuICAgIGFuaW1zLml0ZW1zID0gW107XG4gICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gIH1cbiAgcmVtb3ZlKGNoYXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICB9XG59XG52YXIgYW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IoKTtcblxuY29uc3QgdHJhbnNwYXJlbnQgPSAndHJhbnNwYXJlbnQnO1xuY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgYm9vbGVhbihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgfSxcbiAgY29sb3IoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgY29uc3QgYzEgPSBjMC52YWxpZCAmJiBjb2xvcih0byB8fCB0cmFuc3BhcmVudCk7XG4gICAgcmV0dXJuIGMxICYmIGMxLnZhbGlkXG4gICAgICA/IGMxLm1peChjMCwgZmFjdG9yKS5oZXhTdHJpbmcoKVxuICAgICAgOiB0bztcbiAgfSxcbiAgbnVtYmVyKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICB9XG59O1xuY2xhc3MgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IoY2ZnLCB0YXJnZXQsIHByb3AsIHRvKSB7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdO1xuICAgIHRvID0gcmVzb2x2ZShbY2ZnLnRvLCB0bywgY3VycmVudFZhbHVlLCBjZmcuZnJvbV0pO1xuICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtjZmcuZnJvbSwgY3VycmVudFZhbHVlLCB0b10pO1xuICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5fZm4gPSBjZmcuZm4gfHwgaW50ZXJwb2xhdG9yc1tjZmcudHlwZSB8fCB0eXBlb2YgZnJvbV07XG4gICAgdGhpcy5fZWFzaW5nID0gZWZmZWN0c1tjZmcuZWFzaW5nXSB8fCBlZmZlY3RzLmxpbmVhcjtcbiAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgIHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWwgPSBNYXRoLmZsb29yKGNmZy5kdXJhdGlvbik7XG4gICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuX3Byb3AgPSBwcm9wO1xuICAgIHRoaXMuX2Zyb20gPSBmcm9tO1xuICAgIHRoaXMuX3RvID0gdG87XG4gICAgdGhpcy5fcHJvbWlzZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cbiAgdXBkYXRlKGNmZywgdG8sIGRhdGUpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5fdGFyZ2V0W3RoaXMuX3Byb3BdO1xuICAgICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICAgIGNvbnN0IHJlbWFpbiA9IHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZDtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gZGF0ZTtcbiAgICAgIHRoaXMuX2R1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLm1heChyZW1haW4sIGNmZy5kdXJhdGlvbikpO1xuICAgICAgdGhpcy5fdG90YWwgKz0gZWxhcHNlZDtcbiAgICAgIHRoaXMuX2xvb3AgPSAhIWNmZy5sb29wO1xuICAgICAgdGhpcy5fdG8gPSByZXNvbHZlKFtjZmcudG8sIHRvLCBjdXJyZW50VmFsdWUsIGNmZy5mcm9tXSk7XG4gICAgICB0aGlzLl9mcm9tID0gcmVzb2x2ZShbY2ZnLmZyb20sIGN1cnJlbnRWYWx1ZSwgdG9dKTtcbiAgICB9XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMudGljayhEYXRlLm5vdygpKTtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fbm90aWZ5KGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgdGljayhkYXRlKSB7XG4gICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uO1xuICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLl9mcm9tO1xuICAgIGNvbnN0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgbGV0IGZhY3RvcjtcbiAgICB0aGlzLl9hY3RpdmUgPSBmcm9tICE9PSB0byAmJiAobG9vcCB8fCAoZWxhcHNlZCA8IGR1cmF0aW9uKSk7XG4gICAgaWYgKCF0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IHRvO1xuICAgICAgdGhpcy5fbm90aWZ5KHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZhY3RvciA9IChlbGFwc2VkIC8gZHVyYXRpb24pICUgMjtcbiAgICBmYWN0b3IgPSBsb29wICYmIGZhY3RvciA+IDEgPyAyIC0gZmFjdG9yIDogZmFjdG9yO1xuICAgIGZhY3RvciA9IHRoaXMuX2Vhc2luZyhNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBmYWN0b3IpKSk7XG4gICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gIH1cbiAgd2FpdCgpIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8ICh0aGlzLl9wcm9taXNlcyA9IFtdKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICBwcm9taXNlcy5wdXNoKHtyZXMsIHJlan0pO1xuICAgIH0pO1xuICB9XG4gIF9ub3RpZnkocmVzb2x2ZWQpIHtcbiAgICBjb25zdCBtZXRob2QgPSByZXNvbHZlZCA/ICdyZXMnIDogJ3Jlaic7XG4gICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9taXNlc1tpXVttZXRob2RdKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG51bWJlcnMgPSBbJ3gnLCAneScsICdib3JkZXJXaWR0aCcsICdyYWRpdXMnLCAndGVuc2lvbiddO1xuY29uc3QgY29sb3JzID0gWydjb2xvcicsICdib3JkZXJDb2xvcicsICdiYWNrZ3JvdW5kQ29sb3InXTtcbmRlZmF1bHRzLnNldCgnYW5pbWF0aW9uJywge1xuICBkZWxheTogdW5kZWZpbmVkLFxuICBkdXJhdGlvbjogMTAwMCxcbiAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgZm46IHVuZGVmaW5lZCxcbiAgZnJvbTogdW5kZWZpbmVkLFxuICBsb29wOiB1bmRlZmluZWQsXG4gIHRvOiB1bmRlZmluZWQsXG4gIHR5cGU6IHVuZGVmaW5lZCxcbn0pO1xuY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG5kZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9uJywge1xuICBfZmFsbGJhY2s6IGZhbHNlLFxuICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnb25Qcm9ncmVzcycgJiYgbmFtZSAhPT0gJ29uQ29tcGxldGUnICYmIG5hbWUgIT09ICdmbicsXG59KTtcbmRlZmF1bHRzLnNldCgnYW5pbWF0aW9ucycsIHtcbiAgY29sb3JzOiB7XG4gICAgdHlwZTogJ2NvbG9yJyxcbiAgICBwcm9wZXJ0aWVzOiBjb2xvcnNcbiAgfSxcbiAgbnVtYmVyczoge1xuICAgIHR5cGU6ICdudW1iZXInLFxuICAgIHByb3BlcnRpZXM6IG51bWJlcnNcbiAgfSxcbn0pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbnMnLCB7XG4gIF9mYWxsYmFjazogJ2FuaW1hdGlvbicsXG59KTtcbmRlZmF1bHRzLnNldCgndHJhbnNpdGlvbnMnLCB7XG4gIGFjdGl2ZToge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDQwMFxuICAgIH1cbiAgfSxcbiAgcmVzaXplOiB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogMFxuICAgIH1cbiAgfSxcbiAgc2hvdzoge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBmcm9tOiAndHJhbnNwYXJlbnQnXG4gICAgICB9LFxuICAgICAgdmlzaWJsZToge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICB9LFxuICAgIH1cbiAgfSxcbiAgaGlkZToge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICB0bzogJ3RyYW5zcGFyZW50J1xuICAgICAgfSxcbiAgICAgIHZpc2libGU6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICBmbjogdiA9PiB2IHwgMFxuICAgICAgfSxcbiAgICB9XG4gIH1cbn0pO1xuY2xhc3MgQW5pbWF0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBjb25maWcpIHtcbiAgICB0aGlzLl9jaGFydCA9IGNoYXJ0O1xuICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5jb25maWd1cmUoY29uZmlnKTtcbiAgfVxuICBjb25maWd1cmUoY29uZmlnKSB7XG4gICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNvbmZpZykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgY2ZnID0gY29uZmlnW2tleV07XG4gICAgICBpZiAoIWlzT2JqZWN0KGNmZykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgcmVzb2x2ZWRbb3B0aW9uXSA9IGNmZ1tvcHRpb25dO1xuICAgICAgfVxuICAgICAgKGlzQXJyYXkoY2ZnLnByb3BlcnRpZXMpICYmIGNmZy5wcm9wZXJ0aWVzIHx8IFtrZXldKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgYW5pbWF0ZWRQcm9wcy5zZXQocHJvcCwgcmVzb2x2ZWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBfYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVUYXJnZXRPcHRpb25zKHRhcmdldCwgbmV3T3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVBbmltYXRpb25zKG9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgIGlmIChuZXdPcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgIGF3YWl0QWxsKHRhcmdldC5vcHRpb25zLiRhbmltYXRpb25zLCBuZXdPcHRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCk7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3AgPT09ICdvcHRpb25zJykge1xuICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1twcm9wXTtcbiAgICAgIGxldCBhbmltYXRpb24gPSBydW5uaW5nW3Byb3BdO1xuICAgICAgY29uc3QgY2ZnID0gYW5pbWF0ZWRQcm9wcy5nZXQocHJvcCk7XG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGlmIChjZmcgJiYgYW5pbWF0aW9uLmFjdGl2ZSgpKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnVwZGF0ZShjZmcsIHZhbHVlLCBkYXRlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghY2ZnIHx8ICFjZmcuZHVyYXRpb24pIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBpZiAodGhpcy5fcHJvcGVydGllcy5zaXplID09PSAwKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRhcmdldCwgdmFsdWVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgIGlmIChhbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgYW5pbWF0b3IuYWRkKHRoaXMuX2NoYXJ0LCBhbmltYXRpb25zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYXdhaXRBbGwoYW5pbWF0aW9ucywgcHJvcGVydGllcykge1xuICBjb25zdCBydW5uaW5nID0gW107XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgaWYgKGFuaW0gJiYgYW5pbS5hY3RpdmUoKSkge1xuICAgICAgcnVubmluZy5wdXNoKGFuaW0ud2FpdCgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gIGlmICghbmV3T3B0aW9ucykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgb3B0aW9ucyA9IHRhcmdldC5vcHRpb25zO1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICB0YXJnZXQub3B0aW9ucyA9IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7JHNoYXJlZDogZmFsc2UsICRhbmltYXRpb25zOiB7fX0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICBjb25zdCBvcHRzID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgcmV2ZXJzZSA9IG9wdHMucmV2ZXJzZTtcbiAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gIGNvbnN0IG1heCA9IG9wdHMubWF4ID09PSB1bmRlZmluZWQgPyBhbGxvd2VkT3ZlcmZsb3cgOiAwO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiByZXZlcnNlID8gbWF4IDogbWluLFxuICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICB9O1xufVxuZnVuY3Rpb24gZGVmYXVsdENsaXAoeFNjYWxlLCB5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICBpZiAoYWxsb3dlZE92ZXJmbG93ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgY29uc3QgeSA9IHNjYWxlQ2xpcCh5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdyk7XG4gIHJldHVybiB7XG4gICAgdG9wOiB5LmVuZCxcbiAgICByaWdodDogeC5lbmQsXG4gICAgYm90dG9tOiB5LnN0YXJ0LFxuICAgIGxlZnQ6IHguc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHRvQ2xpcCh2YWx1ZSkge1xuICBsZXQgdCwgciwgYiwgbDtcbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgciA9IHZhbHVlLnJpZ2h0O1xuICAgIGIgPSB2YWx1ZS5ib3R0b207XG4gICAgbCA9IHZhbHVlLmxlZnQ7XG4gIH0gZWxzZSB7XG4gICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdG9wOiB0LFxuICAgIHJpZ2h0OiByLFxuICAgIGJvdHRvbTogYixcbiAgICBsZWZ0OiBsLFxuICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCBmaWx0ZXJWaXNpYmxlKSB7XG4gIGNvbnN0IGtleXMgPSBbXTtcbiAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICBsZXQgaSwgaWxlbjtcbiAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgZHNJbmRleCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICBjb25zdCBzaW5nbGVNb2RlID0gb3B0aW9ucy5tb2RlID09PSAnc2luZ2xlJztcbiAgbGV0IGksIGlsZW4sIGRhdGFzZXRJbmRleCwgb3RoZXJWYWx1ZTtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGRhdGFzZXRJbmRleCA9ICtrZXlzW2ldO1xuICAgIGlmIChkYXRhc2V0SW5kZXggPT09IGRzSW5kZXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmFsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKG90aGVyVmFsdWUpICYmIChzaW5nbGVNb2RlIHx8ICh2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpKSB7XG4gICAgICB2YWx1ZSArPSBvdGhlclZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGNvbnN0IGFkYXRhID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgbGV0IGksIGlsZW4sIGtleTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBhZGF0YVtpXSA9IHtcbiAgICAgIHg6IGtleSxcbiAgICAgIHk6IGRhdGFba2V5XVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGFkYXRhO1xufVxuZnVuY3Rpb24gaXNTdGFja2VkKHNjYWxlLCBtZXRhKSB7XG4gIGNvbnN0IHN0YWNrZWQgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG4gIHJldHVybiBzdGFja2VkIHx8IChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGdldFN0YWNrS2V5KGluZGV4U2NhbGUsIHZhbHVlU2NhbGUsIG1ldGEpIHtcbiAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gc2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICByZXR1cm4ge1xuICAgIG1pbjogbWluRGVmaW5lZCA/IG1pbiA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBzdGFja0tleSwgaW5kZXhWYWx1ZSkge1xuICBjb25zdCBzdWJTdGFjayA9IHN0YWNrc1tzdGFja0tleV0gfHwgKHN0YWNrc1tzdGFja0tleV0gPSB7fSk7XG4gIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gIGZvciAoY29uc3QgbWV0YSBvZiB2U2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSkucmV2ZXJzZSgpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBzdGFja1ttZXRhLmluZGV4XTtcbiAgICBpZiAoKHBvc2l0aXZlICYmIHZhbHVlID4gMCkgfHwgKCFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApKSB7XG4gICAgICByZXR1cm4gbWV0YS5pbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1cGRhdGVTdGFja3MoY29udHJvbGxlciwgcGFyc2VkKSB7XG4gIGNvbnN0IHtjaGFydCwgX2NhY2hlZE1ldGE6IG1ldGF9ID0gY29udHJvbGxlcjtcbiAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBpbmRleDogZGF0YXNldEluZGV4fSA9IG1ldGE7XG4gIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gIGNvbnN0IGtleSA9IGdldFN0YWNrS2V5KGlTY2FsZSwgdlNjYWxlLCBtZXRhKTtcbiAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gIGxldCBzdGFjaztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgIGNvbnN0IHtbaUF4aXNdOiBpbmRleCwgW3ZBeGlzXTogdmFsdWV9ID0gaXRlbTtcbiAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgc3RhY2sgPSBpdGVtU3RhY2tzW3ZBeGlzXSA9IGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBrZXksIGluZGV4KTtcbiAgICBzdGFja1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICBzdGFjay5fYm90dG9tID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCBmYWxzZSwgbWV0YS50eXBlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gIGNvbnN0IHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjYWxlcykuZmlsdGVyKGtleSA9PiBzY2FsZXNba2V5XS5heGlzID09PSBheGlzKS5zaGlmdCgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YXNldENvbnRleHQocGFyZW50LCBpbmRleCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsXG4gICAge1xuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGRhdGFzZXQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFzZXRJbmRleDogaW5kZXgsXG4gICAgICBpbmRleCxcbiAgICAgIG1vZGU6ICdkZWZhdWx0JyxcbiAgICAgIHR5cGU6ICdkYXRhc2V0J1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgIHBhcnNlZDogdW5kZWZpbmVkLFxuICAgIHJhdzogdW5kZWZpbmVkLFxuICAgIGVsZW1lbnQsXG4gICAgaW5kZXgsXG4gICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgIHR5cGU6ICdkYXRhJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gIGNvbnN0IGRhdGFzZXRJbmRleCA9IG1ldGEuY29udHJvbGxlci5pbmRleDtcbiAgY29uc3QgYXhpcyA9IG1ldGEudlNjYWxlICYmIG1ldGEudlNjYWxlLmF4aXM7XG4gIGlmICghYXhpcykge1xuICAgIHJldHVybjtcbiAgfVxuICBpdGVtcyA9IGl0ZW1zIHx8IG1ldGEuX3BhcnNlZDtcbiAgZm9yIChjb25zdCBwYXJzZWQgb2YgaXRlbXMpIHtcbiAgICBjb25zdCBzdGFja3MgPSBwYXJzZWQuX3N0YWNrcztcbiAgICBpZiAoIXN0YWNrcyB8fCBzdGFja3NbYXhpc10gPT09IHVuZGVmaW5lZCB8fCBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlbGV0ZSBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XTtcbiAgfVxufVxuY29uc3QgaXNEaXJlY3RVcGRhdGVNb2RlID0gKG1vZGUpID0+IG1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCkgPT4gc2hhcmVkID8gY2FjaGVkIDogT2JqZWN0LmFzc2lnbih7fSwgY2FjaGVkKTtcbmNvbnN0IGNyZWF0ZVN0YWNrID0gKGNhblN0YWNrLCBtZXRhLCBjaGFydCkgPT4gY2FuU3RhY2sgJiYgIW1ldGEuaGlkZGVuICYmIG1ldGEuX3N0YWNrZWRcbiAgJiYge2tleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSwgdmFsdWVzOiBudWxsfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICB0aGlzLl90eXBlID0gdGhpcy5fY2FjaGVkTWV0YS50eXBlO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wYXJzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NoYXJlZE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZHJhd1N0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnN1cHBvcnRzRGVjaW1hdGlvbiA9IGZhbHNlO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuICBpbml0aWFsaXplKCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgdGhpcy5hZGRFbGVtZW50cygpO1xuICB9XG4gIHVwZGF0ZUluZGV4KGRhdGFzZXRJbmRleCkge1xuICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuICB9XG4gIGxpbmtTY2FsZXMoKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBjb25zdCBjaG9vc2VJZCA9IChheGlzLCB4LCB5LCByKSA9PiBheGlzID09PSAneCcgPyB4IDogYXhpcyA9PT0gJ3InID8gciA6IHk7XG4gICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgIGNvbnN0IHlpZCA9IG1ldGEueUF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueUF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneScpKTtcbiAgICBjb25zdCByaWQgPSBtZXRhLnJBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnJBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3InKSk7XG4gICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgY29uc3QgaWlkID0gbWV0YS5pQXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB4aWQsIHlpZCwgcmlkKTtcbiAgICBjb25zdCB2aWQgPSBtZXRhLnZBeGlzSUQgPSBjaG9vc2VJZChpbmRleEF4aXMsIHlpZCwgeGlkLCByaWQpO1xuICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgbWV0YS55U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoeWlkKTtcbiAgICBtZXRhLnJTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChyaWQpO1xuICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgbWV0YS52U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQodmlkKTtcbiAgfVxuICBnZXREYXRhc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gIH1cbiAgZ2V0TWV0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcbiAgfVxuICBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5zY2FsZXNbc2NhbGVJRF07XG4gIH1cbiAgX2dldE90aGVyU2NhbGUoc2NhbGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICByZXR1cm4gc2NhbGUgPT09IG1ldGEuaVNjYWxlXG4gICAgICA/IG1ldGEudlNjYWxlXG4gICAgICA6IG1ldGEuaVNjYWxlO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3VwZGF0ZSgncmVzZXQnKTtcbiAgfVxuICBfZGVzdHJveSgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fZGF0YSkge1xuICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyh0aGlzLl9kYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgIH1cbiAgfVxuICBfZGF0YUNoZWNrKCkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBjb25zdCBkYXRhID0gZGF0YXNldC5kYXRhIHx8IChkYXRhc2V0LmRhdGEgPSBbXSk7XG4gICAgY29uc3QgX2RhdGEgPSB0aGlzLl9kYXRhO1xuICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICB9IGVsc2UgaWYgKF9kYXRhICE9PSBkYXRhKSB7XG4gICAgICBpZiAoX2RhdGEpIHtcbiAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICB9XG4gICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgIGxpc3RlbkFycmF5RXZlbnRzKGRhdGEsIHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuICBhZGRFbGVtZW50cygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICBpZiAodGhpcy5kYXRhc2V0RWxlbWVudFR5cGUpIHtcbiAgICAgIG1ldGEuZGF0YXNldCA9IG5ldyB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSgpO1xuICAgIH1cbiAgfVxuICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgY29uc3Qgb2xkU3RhY2tlZCA9IG1ldGEuX3N0YWNrZWQ7XG4gICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgaWYgKG1ldGEuc3RhY2sgIT09IGRhdGFzZXQuc3RhY2spIHtcbiAgICAgIHN0YWNrQ2hhbmdlZCA9IHRydWU7XG4gICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgIG1ldGEuc3RhY2sgPSBkYXRhc2V0LnN0YWNrO1xuICAgIH1cbiAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICBpZiAoc3RhY2tDaGFuZ2VkIHx8IG9sZFN0YWNrZWQgIT09IG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgIHVwZGF0ZVN0YWNrcyh0aGlzLCBtZXRhLl9wYXJzZWQpO1xuICAgIH1cbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRTY29wZUtleXModGhpcy5fdHlwZSk7XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgdGhpcy5fcGFyc2luZyA9IHRoaXMub3B0aW9ucy5wYXJzaW5nO1xuICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gIH1cbiAgcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge19jYWNoZWRNZXRhOiBtZXRhLCBfZGF0YTogZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtpU2NhbGUsIF9zdGFja2VkfSA9IG1ldGE7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBsZXQgc29ydGVkID0gc3RhcnQgPT09IDAgJiYgY291bnQgPT09IGRhdGEubGVuZ3RoID8gdHJ1ZSA6IG1ldGEuX3NvcnRlZDtcbiAgICBsZXQgcHJldiA9IHN0YXJ0ID4gMCAmJiBtZXRhLl9wYXJzZWRbc3RhcnQgLSAxXTtcbiAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgICAgbWV0YS5fc29ydGVkID0gdHJ1ZTtcbiAgICAgIHBhcnNlZCA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0FycmF5KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2ID0gKCkgPT4gY3VyW2lBeGlzXSA9PT0gbnVsbCB8fCAocHJldiAmJiBjdXJbaUF4aXNdIDwgcHJldltpQXhpc10pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgICAgbWV0YS5fcGFyc2VkW2kgKyBzdGFydF0gPSBjdXIgPSBwYXJzZWRbaV07XG4gICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICBpZiAoaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYoKSkge1xuICAgICAgICAgICAgc29ydGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1ldGEuX3NvcnRlZCA9IHNvcnRlZDtcbiAgICB9XG4gICAgaWYgKF9zdGFja2VkKSB7XG4gICAgICB1cGRhdGVTdGFja3ModGhpcywgcGFyc2VkKTtcbiAgICB9XG4gIH1cbiAgcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBsYWJlbHMgPSBpU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICBbdkF4aXNdOiB2U2NhbGUucGFyc2UoZGF0YVtpbmRleF0sIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7eFNjYWxlLCB5U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICB4OiB4U2NhbGUucGFyc2UoaXRlbVswXSwgaW5kZXgpLFxuICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7eFNjYWxlLCB5U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCB7eEF4aXNLZXkgPSAneCcsIHlBeGlzS2V5ID0gJ3knfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgeDogeFNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwgeEF4aXNLZXkpLCBpbmRleCksXG4gICAgICAgIHk6IHlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHlBeGlzS2V5KSwgaW5kZXgpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIGdldFBhcnNlZChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLl9wYXJzZWRbaW5kZXhdO1xuICB9XG4gIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuZGF0YVtpbmRleF07XG4gIH1cbiAgYXBwbHlTdGFjayhzY2FsZSwgcGFyc2VkLCBtb2RlKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VkW3NjYWxlLmF4aXNdO1xuICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXVxuICAgIH07XG4gICAgcmV0dXJuIGFwcGx5U3RhY2soc3RhY2ssIHZhbHVlLCBtZXRhLmluZGV4LCB7bW9kZX0pO1xuICB9XG4gIHVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spIHtcbiAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICBsZXQgdmFsdWUgPSBwYXJzZWRWYWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHBhcnNlZFZhbHVlO1xuICAgIGNvbnN0IHZhbHVlcyA9IHN0YWNrICYmIHBhcnNlZC5fc3RhY2tzW3NjYWxlLmF4aXNdO1xuICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgIH1cbiAgICByYW5nZS5taW4gPSBNYXRoLm1pbihyYW5nZS5taW4sIHZhbHVlKTtcbiAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgfVxuICBnZXRNaW5NYXgoc2NhbGUsIGNhblN0YWNrKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICBjb25zdCBzb3J0ZWQgPSBtZXRhLl9zb3J0ZWQgJiYgc2NhbGUgPT09IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IGlsZW4gPSBfcGFyc2VkLmxlbmd0aDtcbiAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgY29uc3Qgc3RhY2sgPSBjcmVhdGVTdGFjayhjYW5TdGFjaywgbWV0YSwgdGhpcy5jaGFydCk7XG4gICAgY29uc3QgcmFuZ2UgPSB7bWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIG1heDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZfTtcbiAgICBjb25zdCB7bWluOiBvdGhlck1pbiwgbWF4OiBvdGhlck1heH0gPSBnZXRVc2VyQm91bmRzKG90aGVyU2NhbGUpO1xuICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgZnVuY3Rpb24gX3NraXAoKSB7XG4gICAgICBwYXJzZWQgPSBfcGFyc2VkW2ldO1xuICAgICAgY29uc3Qgb3RoZXJWYWx1ZSA9IHBhcnNlZFtvdGhlclNjYWxlLmF4aXNdO1xuICAgICAgcmV0dXJuICFpc051bWJlckZpbml0ZShwYXJzZWRbc2NhbGUuYXhpc10pIHx8IG90aGVyTWluID4gb3RoZXJWYWx1ZSB8fCBvdGhlck1heCA8IG90aGVyVmFsdWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGlmIChfc2tpcCgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgIGZvciAoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSB7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gcGFyc2VkLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdmFsdWUgPSBwYXJzZWRbaV1bc2NhbGUuYXhpc107XG4gICAgICBpZiAoaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGlTY2FsZSA/ICcnICsgaVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW2lTY2FsZS5heGlzXSkgOiAnJyxcbiAgICAgIHZhbHVlOiB2U2NhbGUgPyAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pIDogJydcbiAgICB9O1xuICB9XG4gIF91cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHRoaXMudXBkYXRlKG1vZGUgfHwgJ2RlZmF1bHQnKTtcbiAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgfVxuICB1cGRhdGUobW9kZSkge31cbiAgZHJhdygpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9jdHg7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9kcmF3U3RhcnQgfHwgMDtcbiAgICBjb25zdCBjb3VudCA9IHRoaXMuX2RyYXdDb3VudCB8fCAoZWxlbWVudHMubGVuZ3RoIC0gc3RhcnQpO1xuICAgIGNvbnN0IGRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdGhpcy5vcHRpb25zLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wO1xuICAgIGxldCBpO1xuICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50LmFjdGl2ZSAmJiBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCkge1xuICAgICAgICBhY3RpdmUucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlLmxlbmd0aDsgKytpKSB7XG4gICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgIH1cbiAgfVxuICBnZXRTdHlsZShpbmRleCwgYWN0aXZlKSB7XG4gICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgIHJldHVybiBpbmRleCA9PT0gdW5kZWZpbmVkICYmIHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldFxuICAgICAgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSlcbiAgICAgIDogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4IHx8IDAsIG1vZGUpO1xuICB9XG4gIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHxcbiAgICAgICAgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzLiRjb250ZXh0IHx8XG4gICAgICAgICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlRGF0YXNldENvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMuaW5kZXgpKTtcbiAgICAgIGNvbnRleHQuZGF0YXNldCA9IGRhdGFzZXQ7XG4gICAgICBjb250ZXh0LmluZGV4ID0gY29udGV4dC5kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgIH1cbiAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgIGNvbnRleHQubW9kZSA9IG1vZGU7XG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cbiAgcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZS5pZCwgbW9kZSk7XG4gIH1cbiAgcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgfVxuICBfcmVzb2x2ZUVsZW1lbnRPcHRpb25zKGVsZW1lbnRUeXBlLCBtb2RlID0gJ2RlZmF1bHQnLCBpbmRleCkge1xuICAgIGNvbnN0IGFjdGl2ZSA9IG1vZGUgPT09ICdhY3RpdmUnO1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBlbGVtZW50VHlwZSArICctJyArIG1vZGU7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNsb25lSWZOb3RTaGFyZWQoY2FjaGVkLCBzaGFyaW5nKTtcbiAgICB9XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKHRoaXMuX3R5cGUsIGVsZW1lbnRUeXBlKTtcbiAgICBjb25zdCBwcmVmaXhlcyA9IGFjdGl2ZSA/IFtgJHtlbGVtZW50VHlwZX1Ib3ZlcmAsICdob3ZlcicsIGVsZW1lbnRUeXBlLCAnJ10gOiBbZWxlbWVudFR5cGUsICcnXTtcbiAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoZGVmYXVsdHMuZWxlbWVudHNbZWxlbWVudFR5cGVdKTtcbiAgICBjb25zdCBjb250ZXh0ID0gKCkgPT4gdGhpcy5nZXRDb250ZXh0KGluZGV4LCBhY3RpdmUpO1xuICAgIGNvbnN0IHZhbHVlcyA9IGNvbmZpZy5yZXNvbHZlTmFtZWRPcHRpb25zKHNjb3BlcywgbmFtZXMsIGNvbnRleHQsIHByZWZpeGVzKTtcbiAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuICBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyh0aGlzLl90eXBlLCB0cmFuc2l0aW9uKTtcbiAgICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cyk7XG4gICAgICBvcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIHRyYW5zaXRpb24pKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKGNoYXJ0LCBvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5fY2FjaGVhYmxlKSB7XG4gICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICBnZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2hhcmVkT3B0aW9ucyB8fCAodGhpcy5fc2hhcmVkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpKTtcbiAgfVxuICBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgcmV0dXJuICFzaGFyZWRPcHRpb25zIHx8IGlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSB8fCB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gIH1cbiAgX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpIHtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zID0gdGhpcy5fc2hhcmVkT3B0aW9ucztcbiAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHx8IChzaGFyZWRPcHRpb25zICE9PSBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyk7XG4gICAgdGhpcy51cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIGZpcnN0T3B0cyk7XG4gICAgcmV0dXJuIHtzaGFyZWRPcHRpb25zLCBpbmNsdWRlT3B0aW9uc307XG4gIH1cbiAgdXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgcHJvcGVydGllcywgbW9kZSkge1xuICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlKS51cGRhdGUoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgIGlmIChzaGFyZWRPcHRpb25zICYmICFpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKHVuZGVmaW5lZCwgbW9kZSkudXBkYXRlKHNoYXJlZE9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgIGVsZW1lbnQuYWN0aXZlID0gYWN0aXZlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldFN0eWxlKGluZGV4LCBhY3RpdmUpO1xuICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICBvcHRpb25zOiAoIWFjdGl2ZSAmJiB0aGlzLmdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykpIHx8IG9wdGlvbnNcbiAgICB9KTtcbiAgfVxuICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgfVxuICBzZXRIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICB9XG4gIF9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIF9zZXREYXRhc2V0SG92ZXJTdHlsZSgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KSB7XG4gICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgfVxuICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgY29uc3QgbnVtTWV0YSA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgY29uc3QgY291bnQgPSBNYXRoLm1pbihudW1EYXRhLCBudW1NZXRhKTtcbiAgICBpZiAoY291bnQpIHtcbiAgICAgIHRoaXMucGFyc2UoMCwgY291bnQpO1xuICAgIH1cbiAgICBpZiAobnVtRGF0YSA+IG51bU1ldGEpIHtcbiAgICAgIHRoaXMuX2luc2VydEVsZW1lbnRzKG51bU1ldGEsIG51bURhdGEgLSBudW1NZXRhLCByZXNldE5ld0VsZW1lbnRzKTtcbiAgICB9IGVsc2UgaWYgKG51bURhdGEgPCBudW1NZXRhKSB7XG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50cyhudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG4gICAgfVxuICB9XG4gIF9pbnNlcnRFbGVtZW50cyhzdGFydCwgY291bnQsIHJlc2V0TmV3RWxlbWVudHMgPSB0cnVlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGNvdW50O1xuICAgIGxldCBpO1xuICAgIGNvbnN0IG1vdmUgPSAoYXJyKSA9PiB7XG4gICAgICBhcnIubGVuZ3RoICs9IGNvdW50O1xuICAgICAgZm9yIChpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pIHtcbiAgICAgICAgYXJyW2ldID0gYXJyW2kgLSBjb3VudF07XG4gICAgICB9XG4gICAgfTtcbiAgICBtb3ZlKGRhdGEpO1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIGRhdGFbaV0gPSBuZXcgdGhpcy5kYXRhRWxlbWVudFR5cGUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgIG1vdmUobWV0YS5fcGFyc2VkKTtcbiAgICB9XG4gICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgIGlmIChyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGRhdGEsIHN0YXJ0LCBjb3VudCwgJ3Jlc2V0Jyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiAgX3JlbW92ZUVsZW1lbnRzKHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICBjb25zdCByZW1vdmVkID0gbWV0YS5fcGFyc2VkLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIG1ldGEuZGF0YS5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgfVxuICBfc3luYyhhcmdzKSB7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgIHRoaXMuX3N5bmNMaXN0LnB1c2goYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdID0gYXJncztcbiAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICB9XG4gICAgdGhpcy5jaGFydC5fZGF0YUNoYW5nZXMucHVzaChbdGhpcy5pbmRleCwgLi4uYXJnc10pO1xuICB9XG4gIF9vbkRhdGFQdXNoKCkge1xuICAgIGNvbnN0IGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgdGhpcy5nZXREYXRhc2V0KCkuZGF0YS5sZW5ndGggLSBjb3VudCwgY291bnRdKTtcbiAgfVxuICBfb25EYXRhUG9wKCkge1xuICAgIHRoaXMuX3N5bmMoWydfcmVtb3ZlRWxlbWVudHMnLCB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSwgMV0pO1xuICB9XG4gIF9vbkRhdGFTaGlmdCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgMCwgMV0pO1xuICB9XG4gIF9vbkRhdGFTcGxpY2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgc3RhcnQsIGNvdW50XSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gICAgaWYgKG5ld0NvdW50KSB7XG4gICAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgc3RhcnQsIG5ld0NvdW50XSk7XG4gICAgfVxuICB9XG4gIF9vbkRhdGFVbnNoaWZ0KCkge1xuICAgIHRoaXMuX3N5bmMoWydfaW5zZXJ0RWxlbWVudHMnLCAwLCBhcmd1bWVudHMubGVuZ3RoXSk7XG4gIH1cbn1cbkRhdGFzZXRDb250cm9sbGVyLmRlZmF1bHRzID0ge307XG5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5kYXRhRWxlbWVudFR5cGUgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRBbGxTY2FsZVZhbHVlcyhzY2FsZSwgdHlwZSkge1xuICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgY29uc3QgdmlzaWJsZU1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSk7XG4gICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdmlzaWJsZU1ldGFzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh2aXNpYmxlTWV0YXNbaV0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpKTtcbiAgICB9XG4gICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKSk7XG4gIH1cbiAgcmV0dXJuIHNjYWxlLl9jYWNoZS4kYmFyO1xufVxuZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICBjb25zdCBzY2FsZSA9IG1ldGEuaVNjYWxlO1xuICBjb25zdCB2YWx1ZXMgPSBnZXRBbGxTY2FsZVZhbHVlcyhzY2FsZSwgbWV0YS50eXBlKTtcbiAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gIGxldCBpLCBpbGVuLCBjdXJyLCBwcmV2O1xuICBjb25zdCB1cGRhdGVNaW5BbmRQcmV2ID0gKCkgPT4ge1xuICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRlZmluZWQocHJldikpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgTWF0aC5hYnMoY3VyciAtIHByZXYpIHx8IG1pbik7XG4gICAgfVxuICAgIHByZXYgPSBjdXJyO1xuICB9O1xuICBmb3IgKGkgPSAwLCBpbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlc1tpXSk7XG4gICAgdXBkYXRlTWluQW5kUHJldigpO1xuICB9XG4gIHByZXYgPSB1bmRlZmluZWQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBzY2FsZS50aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKGkpO1xuICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgfVxuICByZXR1cm4gbWluO1xufVxuZnVuY3Rpb24gY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgbGV0IHNpemUsIHJhdGlvO1xuICBpZiAoaXNOdWxsT3JVbmRlZih0aGlja25lc3MpKSB7XG4gICAgc2l6ZSA9IHJ1bGVyLm1pbiAqIG9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlO1xuICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICB9IGVsc2Uge1xuICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgIHJhdGlvID0gMTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICByYXRpbyxcbiAgICBzdGFydDogcnVsZXIucGl4ZWxzW2luZGV4XSAtIChzaXplIC8gMilcbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gIGNvbnN0IHBpeGVscyA9IHJ1bGVyLnBpeGVscztcbiAgY29uc3QgY3VyciA9IHBpeGVsc1tpbmRleF07XG4gIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICBsZXQgbmV4dCA9IGluZGV4IDwgcGl4ZWxzLmxlbmd0aCAtIDEgPyBwaXhlbHNbaW5kZXggKyAxXSA6IG51bGw7XG4gIGNvbnN0IHBlcmNlbnQgPSBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICBwcmV2ID0gY3VyciAtIChuZXh0ID09PSBudWxsID8gcnVsZXIuZW5kIC0gcnVsZXIuc3RhcnQgOiBuZXh0IC0gY3Vycik7XG4gIH1cbiAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICB9XG4gIGNvbnN0IHN0YXJ0ID0gY3VyciAtIChjdXJyIC0gTWF0aC5taW4ocHJldiwgbmV4dCkpIC8gMiAqIHBlcmNlbnQ7XG4gIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgcmV0dXJuIHtcbiAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgcmF0aW86IG9wdGlvbnMuYmFyUGVyY2VudGFnZSxcbiAgICBzdGFydFxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSB7XG4gIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICBjb25zdCBlbmRWYWx1ZSA9IHZTY2FsZS5wYXJzZShlbnRyeVsxXSwgaSk7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICBsZXQgYmFyU3RhcnQgPSBtaW47XG4gIGxldCBiYXJFbmQgPSBtYXg7XG4gIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgIGJhclN0YXJ0ID0gbWF4O1xuICAgIGJhckVuZCA9IG1pbjtcbiAgfVxuICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgaXRlbS5fY3VzdG9tID0ge1xuICAgIGJhclN0YXJ0LFxuICAgIGJhckVuZCxcbiAgICBzdGFydDogc3RhcnRWYWx1ZSxcbiAgICBlbmQ6IGVuZFZhbHVlLFxuICAgIG1pbixcbiAgICBtYXhcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlVmFsdWUoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICBwYXJzZUZsb2F0QmFyKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpO1xuICB9IGVsc2Uge1xuICAgIGl0ZW1bdlNjYWxlLmF4aXNdID0gdlNjYWxlLnBhcnNlKGVudHJ5LCBpKTtcbiAgfVxuICByZXR1cm4gaXRlbTtcbn1cbmZ1bmN0aW9uIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICBjb25zdCBsYWJlbHMgPSBpU2NhbGUuZ2V0TGFiZWxzKCk7XG4gIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gIGNvbnN0IHBhcnNlZCA9IFtdO1xuICBsZXQgaSwgaWxlbiwgaXRlbSwgZW50cnk7XG4gIGZvciAoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICBpdGVtID0ge307XG4gICAgaXRlbVtpU2NhbGUuYXhpc10gPSBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2ldLCBpKTtcbiAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuZnVuY3Rpb24gaXNGbG9hdEJhcihjdXN0b20pIHtcbiAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICBpZiAoc2l6ZSAhPT0gMCkge1xuICAgIHJldHVybiBzaWduKHNpemUpO1xuICB9XG4gIHJldHVybiAodlNjYWxlLmlzSG9yaXpvbnRhbCgpID8gMSA6IC0xKSAqICh2U2NhbGUubWluID49IGFjdHVhbEJhc2UgPyAxIDogLTEpO1xufVxuZnVuY3Rpb24gYm9yZGVyUHJvcHMocHJvcGVydGllcykge1xuICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gIGlmIChwcm9wZXJ0aWVzLmhvcml6b250YWwpIHtcbiAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgIHN0YXJ0ID0gJ2xlZnQnO1xuICAgIGVuZCA9ICdyaWdodCc7XG4gIH0gZWxzZSB7XG4gICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA8IHByb3BlcnRpZXMueTtcbiAgICBzdGFydCA9ICdib3R0b20nO1xuICAgIGVuZCA9ICd0b3AnO1xuICB9XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgdG9wID0gJ2VuZCc7XG4gICAgYm90dG9tID0gJ3N0YXJ0JztcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSAnc3RhcnQnO1xuICAgIGJvdHRvbSA9ICdlbmQnO1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGVuZCwgcmV2ZXJzZSwgdG9wLCBib3R0b219O1xufVxuZnVuY3Rpb24gc2V0Qm9yZGVyU2tpcHBlZChwcm9wZXJ0aWVzLCBvcHRpb25zLCBzdGFjaywgaW5kZXgpIHtcbiAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gIGNvbnN0IHJlcyA9IHt9O1xuICBpZiAoIWVkZ2UpIHtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlZGdlID09PSB0cnVlKSB7XG4gICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0ge3RvcDogdHJ1ZSwgcmlnaHQ6IHRydWUsIGJvdHRvbTogdHJ1ZSwgbGVmdDogdHJ1ZX07XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtzdGFydCwgZW5kLCByZXZlcnNlLCB0b3AsIGJvdHRvbX0gPSBib3JkZXJQcm9wcyhwcm9wZXJ0aWVzKTtcbiAgaWYgKGVkZ2UgPT09ICdtaWRkbGUnICYmIHN0YWNrKSB7XG4gICAgcHJvcGVydGllcy5lbmFibGVCb3JkZXJSYWRpdXMgPSB0cnVlO1xuICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgIGVkZ2UgPSB0b3A7XG4gICAgfSBlbHNlIGlmICgoc3RhY2suX2JvdHRvbSB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgIGVkZ2UgPSBib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1twYXJzZUVkZ2UoYm90dG9tLCBzdGFydCwgZW5kLCByZXZlcnNlKV0gPSB0cnVlO1xuICAgICAgZWRnZSA9IHRvcDtcbiAgICB9XG4gIH1cbiAgcmVzW3BhcnNlRWRnZShlZGdlLCBzdGFydCwgZW5kLCByZXZlcnNlKV0gPSB0cnVlO1xuICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgIGVkZ2UgPSBzdGFydEVuZChlZGdlLCBiLCBhKTtcbiAgfSBlbHNlIHtcbiAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYSwgYik7XG4gIH1cbiAgcmV0dXJuIGVkZ2U7XG59XG5mdW5jdGlvbiBzd2FwKG9yaWcsIHYxLCB2Mikge1xuICByZXR1cm4gb3JpZyA9PT0gdjEgPyB2MiA6IG9yaWcgPT09IHYyID8gdjEgOiBvcmlnO1xufVxuZnVuY3Rpb24gc3RhcnRFbmQodiwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7aW5mbGF0ZUFtb3VudH0sIHJhdGlvKSB7XG4gIHByb3BlcnRpZXMuaW5mbGF0ZUFtb3VudCA9IGluZmxhdGVBbW91bnQgPT09ICdhdXRvJ1xuICAgID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMFxuICAgIDogaW5mbGF0ZUFtb3VudDtcbn1cbmNsYXNzIEJhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICByZXR1cm4gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCB7eEF4aXNLZXkgPSAneCcsIHlBeGlzS2V5ID0gJ3knfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgY29uc3QgaUF4aXNLZXkgPSBpU2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBvYmo7XG4gICAgZm9yIChpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBvYmogPSBkYXRhW2ldO1xuICAgICAgaXRlbSA9IHt9O1xuICAgICAgaXRlbVtpU2NhbGUuYXhpc10gPSBpU2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShvYmosIGlBeGlzS2V5KSwgaSk7XG4gICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKHJlc29sdmVPYmplY3RLZXkob2JqLCB2QXhpc0tleSksIGl0ZW0sIHZTY2FsZSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spIHtcbiAgICBzdXBlci51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICBpZiAoY3VzdG9tICYmIHNjYWxlID09PSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZSkge1xuICAgICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCBjdXN0b20ubWluKTtcbiAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgY3VzdG9tLm1heCk7XG4gICAgfVxuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgY29uc3QgdmFsdWUgPSBpc0Zsb2F0QmFyKGN1c3RvbSlcbiAgICAgID8gJ1snICsgY3VzdG9tLnN0YXJ0ICsgJywgJyArIGN1c3RvbS5lbmQgKyAnXSdcbiAgICAgIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6ICcnICsgaVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW2lTY2FsZS5heGlzXSksXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBtZXRhLnN0YWNrID0gdGhpcy5nZXREYXRhc2V0KCkuc3RhY2s7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKG1ldGEuZGF0YSwgMCwgbWV0YS5kYXRhLmxlbmd0aCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMoYmFycywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IHtpbmRleCwgX2NhY2hlZE1ldGE6IHt2U2NhbGV9fSA9IHRoaXM7XG4gICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICBjb25zdCBob3Jpem9udGFsID0gdlNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHJ1bGVyID0gdGhpcy5fZ2V0UnVsZXIoKTtcbiAgICBjb25zdCB7c2hhcmVkT3B0aW9ucywgaW5jbHVkZU9wdGlvbnN9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge2Jhc2UsIGhlYWQ6IGJhc2V9IDogdGhpcy5fY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMoaSk7XG4gICAgICBjb25zdCBpcGl4ZWxzID0gdGhpcy5fY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaSwgcnVsZXIpO1xuICAgICAgY29uc3Qgc3RhY2sgPSAocGFyc2VkLl9zdGFja3MgfHwge30pW3ZTY2FsZS5heGlzXTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIGhvcml6b250YWwsXG4gICAgICAgIGJhc2U6IHZwaXhlbHMuYmFzZSxcbiAgICAgICAgZW5hYmxlQm9yZGVyUmFkaXVzOiAhc3RhY2sgfHwgaXNGbG9hdEJhcihwYXJzZWQuX2N1c3RvbSkgfHwgKGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tKSxcbiAgICAgICAgeDogaG9yaXpvbnRhbCA/IHZwaXhlbHMuaGVhZCA6IGlwaXhlbHMuY2VudGVyLFxuICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgIGhlaWdodDogaG9yaXpvbnRhbCA/IGlwaXhlbHMuc2l6ZSA6IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSksXG4gICAgICAgIHdpZHRoOiBob3Jpem9udGFsID8gTWF0aC5hYnModnBpeGVscy5zaXplKSA6IGlwaXhlbHMuc2l6ZVxuICAgICAgfTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxuICBfZ2V0U3RhY2tzKGxhc3QsIGRhdGFJbmRleCkge1xuICAgIGNvbnN0IHtpU2NhbGV9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGlTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0aGlzLl90eXBlKVxuICAgICAgLmZpbHRlcihtZXRhID0+IG1ldGEuY29udHJvbGxlci5vcHRpb25zLmdyb3VwZWQpO1xuICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIGNvbnN0IHN0YWNrcyA9IFtdO1xuICAgIGNvbnN0IHNraXBOdWxsID0gKG1ldGEpID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IG1ldGEuY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KTtcbiAgICAgIGNvbnN0IHZhbCA9IHBhcnNlZCAmJiBwYXJzZWRbbWV0YS52U2NhbGUuYXhpc107XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWwpIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IG1ldGEgb2YgbWV0YXNldHMpIHtcbiAgICAgIGlmIChkYXRhSW5kZXggIT09IHVuZGVmaW5lZCAmJiBza2lwTnVsbChtZXRhKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFja2VkID09PSBmYWxzZSB8fCBzdGFja3MuaW5kZXhPZihtZXRhLnN0YWNrKSA9PT0gLTEgfHxcblx0XHRcdFx0KHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHN0YWNrcy5wdXNoKG1ldGEuc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKG1ldGEuaW5kZXggPT09IGxhc3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrcztcbiAgfVxuICBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRTdGFja3ModW5kZWZpbmVkLCBpbmRleCkubGVuZ3RoO1xuICB9XG4gIF9nZXRTdGFja0luZGV4KGRhdGFzZXRJbmRleCwgbmFtZSwgZGF0YUluZGV4KSB7XG4gICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICBjb25zdCBpbmRleCA9IChuYW1lICE9PSB1bmRlZmluZWQpXG4gICAgICA/IHN0YWNrcy5pbmRleE9mKG5hbWUpXG4gICAgICA6IC0xO1xuICAgIHJldHVybiAoaW5kZXggPT09IC0xKVxuICAgICAgPyBzdGFja3MubGVuZ3RoIC0gMVxuICAgICAgOiBpbmRleDtcbiAgfVxuICBfZ2V0UnVsZXIoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBwaXhlbHMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcGl4ZWxzLnB1c2goaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaSlbaVNjYWxlLmF4aXNdLCBpKSk7XG4gICAgfVxuICAgIGNvbnN0IGJhclRoaWNrbmVzcyA9IG9wdHMuYmFyVGhpY2tuZXNzO1xuICAgIGNvbnN0IG1pbiA9IGJhclRoaWNrbmVzcyB8fCBjb21wdXRlTWluU2FtcGxlU2l6ZShtZXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgbWluLFxuICAgICAgcGl4ZWxzLFxuICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgfTtcbiAgfVxuICBfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMoaW5kZXgpIHtcbiAgICBjb25zdCB7X2NhY2hlZE1ldGE6IHt2U2NhbGUsIF9zdGFja2VkfSwgb3B0aW9uczoge2Jhc2U6IGJhc2VWYWx1ZSwgbWluQmFyTGVuZ3RofX0gPSB0aGlzO1xuICAgIGNvbnN0IGFjdHVhbEJhc2UgPSBiYXNlVmFsdWUgfHwgMDtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgY29uc3QgZmxvYXRpbmcgPSBpc0Zsb2F0QmFyKGN1c3RvbSk7XG4gICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBsZW5ndGggPSBfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogdmFsdWU7XG4gICAgbGV0IGhlYWQsIHNpemU7XG4gICAgaWYgKGxlbmd0aCAhPT0gdmFsdWUpIHtcbiAgICAgIHN0YXJ0ID0gbGVuZ3RoIC0gdmFsdWU7XG4gICAgICBsZW5ndGggPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgKz0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSAhaXNOdWxsT3JVbmRlZihiYXNlVmFsdWUpICYmICFmbG9hdGluZyA/IGJhc2VWYWx1ZSA6IHN0YXJ0O1xuICAgIGxldCBiYXNlID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnRWYWx1ZSk7XG4gICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkID0gYmFzZTtcbiAgICB9XG4gICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgIGlmIChNYXRoLmFicyhzaXplKSA8IG1pbkJhckxlbmd0aCkge1xuICAgICAgc2l6ZSA9IGJhclNpZ24oc2l6ZSwgdlNjYWxlLCBhY3R1YWxCYXNlKSAqIG1pbkJhckxlbmd0aDtcbiAgICAgIGlmICh2YWx1ZSA9PT0gYWN0dWFsQmFzZSkge1xuICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhcnRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMCk7XG4gICAgICBjb25zdCBlbmRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMSk7XG4gICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICBiYXNlID0gTWF0aC5tYXgoTWF0aC5taW4oYmFzZSwgbWF4KSwgbWluKTtcbiAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICB9XG4gICAgaWYgKGJhc2UgPT09IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKGFjdHVhbEJhc2UpKSB7XG4gICAgICBjb25zdCBoYWxmR3JpZCA9IHNpZ24oc2l6ZSkgKiB2U2NhbGUuZ2V0TGluZVdpZHRoRm9yVmFsdWUoYWN0dWFsQmFzZSkgLyAyO1xuICAgICAgYmFzZSArPSBoYWxmR3JpZDtcbiAgICAgIHNpemUgLT0gaGFsZkdyaWQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzaXplLFxuICAgICAgYmFzZSxcbiAgICAgIGhlYWQsXG4gICAgICBjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuICAgIH07XG4gIH1cbiAgX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgIGNvbnN0IHNjYWxlID0gcnVsZXIuc2NhbGU7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgY29uc3QgbWF4QmFyVGhpY2tuZXNzID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5tYXhCYXJUaGlja25lc3MsIEluZmluaXR5KTtcbiAgICBsZXQgY2VudGVyLCBzaXplO1xuICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCdcbiAgICAgICAgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudClcbiAgICAgICAgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyAocmFuZ2UuY2h1bmsgKiBzdGFja0luZGV4KSArIChyYW5nZS5jaHVuayAvIDIpO1xuICAgICAgc2l6ZSA9IE1hdGgubWluKG1heEJhclRoaWNrbmVzcywgcmFuZ2UuY2h1bmsgKiByYW5nZS5yYXRpbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcbiAgICAgIGhlYWQ6IGNlbnRlciArIHNpemUgLyAyLFxuICAgICAgY2VudGVyLFxuICAgICAgc2l6ZVxuICAgIH07XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCByZWN0cyA9IG1ldGEuZGF0YTtcbiAgICBjb25zdCBpbGVuID0gcmVjdHMubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaWYgKHRoaXMuZ2V0UGFyc2VkKGkpW3ZTY2FsZS5heGlzXSAhPT0gbnVsbCkge1xuICAgICAgICByZWN0c1tpXS5kcmF3KHRoaXMuX2N0eCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5CYXJDb250cm9sbGVyLmlkID0gJ2Jhcic7XG5CYXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdiYXInLFxuICBjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcbiAgYmFyUGVyY2VudGFnZTogMC45LFxuICBncm91cGVkOiB0cnVlLFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdiYXNlJywgJ3dpZHRoJywgJ2hlaWdodCddXG4gICAgfVxuICB9XG59O1xuQmFyQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIHNjYWxlczoge1xuICAgIF9pbmRleF86IHtcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICBvZmZzZXQ6IHRydWUsXG4gICAgICBncmlkOiB7XG4gICAgICAgIG9mZnNldDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgX3ZhbHVlXzoge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIEJ1YmJsZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cbiAgcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIGxldCBtYXggPSAwO1xuICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgfVxuICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgY29uc3QgeSA9IHlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC55KTtcbiAgICBjb25zdCByID0gcGFyc2VkLl9jdXN0b207XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBtZXRhLmxhYmVsLFxuICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7c2hhcmVkT3B0aW9ucywgaW5jbHVkZU9wdGlvbnN9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSAhcmVzZXQgJiYgdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IHJlc2V0ID8gaVNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwLjUpIDogaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSk7XG4gICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0ID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW3ZBeGlzXSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCk7XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zLnJhZGl1cyA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICB9XG4gIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgbGV0IHZhbHVlcyA9IHN1cGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpO1xuICAgIGlmICh2YWx1ZXMuJHNoYXJlZCkge1xuICAgICAgdmFsdWVzID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsdWVzLCB7JHNoYXJlZDogZmFsc2V9KTtcbiAgICB9XG4gICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICBpZiAobW9kZSAhPT0gJ2FjdGl2ZScpIHtcbiAgICAgIHZhbHVlcy5yYWRpdXMgPSAwO1xuICAgIH1cbiAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG59XG5CdWJibGVDb250cm9sbGVyLmlkID0gJ2J1YmJsZSc7XG5CdWJibGVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ2JvcmRlcldpZHRoJywgJ3JhZGl1cyddXG4gICAgfVxuICB9XG59O1xuQnViYmxlQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIHNjYWxlczoge1xuICAgIHg6IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH1cbiAgfSxcbiAgcGx1Z2luczoge1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgbGV0IHJhdGlvWCA9IDE7XG4gIGxldCByYXRpb1kgPSAxO1xuICBsZXQgb2Zmc2V0WCA9IDA7XG4gIGxldCBvZmZzZXRZID0gMDtcbiAgaWYgKGNpcmN1bWZlcmVuY2UgPCBUQVUpIHtcbiAgICBjb25zdCBzdGFydEFuZ2xlID0gcm90YXRpb247XG4gICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICBjb25zdCBzdGFydFggPSBNYXRoLmNvcyhzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBzdGFydFkgPSBNYXRoLnNpbihzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgIGNvbnN0IGVuZFkgPSBNYXRoLnNpbihlbmRBbmdsZSk7XG4gICAgY29uc3QgY2FsY01heCA9IChhbmdsZSwgYSwgYikgPT4gX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgIGNvbnN0IGNhbGNNaW4gPSAoYW5nbGUsIGEsIGIpID0+IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IC0xIDogTWF0aC5taW4oYSwgYSAqIGN1dG91dCwgYiwgYiAqIGN1dG91dCk7XG4gICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICBjb25zdCBtYXhZID0gY2FsY01heChIQUxGX1BJLCBzdGFydFksIGVuZFkpO1xuICAgIGNvbnN0IG1pblggPSBjYWxjTWluKFBJLCBzdGFydFgsIGVuZFgpO1xuICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICByYXRpb1ggPSAobWF4WCAtIG1pblgpIC8gMjtcbiAgICByYXRpb1kgPSAobWF4WSAtIG1pblkpIC8gMjtcbiAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgIG9mZnNldFkgPSAtKG1heFkgKyBtaW5ZKSAvIDI7XG4gIH1cbiAgcmV0dXJuIHtyYXRpb1gsIHJhdGlvWSwgb2Zmc2V0WCwgb2Zmc2V0WX07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcbiAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9mZnNldFggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vZmZzZXRZID0gdW5kZWZpbmVkO1xuICB9XG4gIGxpbmtTY2FsZXMoKSB7fVxuICBwYXJzZShzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhc2V0KCkuZGF0YTtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fcGFyc2luZyA9PT0gZmFsc2UpIHtcbiAgICAgIG1ldGEuX3BhcnNlZCA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBnZXR0ZXIgPSAoaSkgPT4gK2RhdGFbaV07XG4gICAgICBpZiAoaXNPYmplY3QoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgIGNvbnN0IHtrZXkgPSAndmFsdWUnfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgICAgIGdldHRlciA9IChpKSA9PiArcmVzb2x2ZU9iamVjdEtleShkYXRhW2ldLCBrZXkpO1xuICAgICAgfVxuICAgICAgbGV0IGksIGlsZW47XG4gICAgICBmb3IgKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgbWV0YS5fcGFyc2VkW2ldID0gZ2V0dGVyKGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfZ2V0Um90YXRpb24oKSB7XG4gICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMucm90YXRpb24gLSA5MCk7XG4gIH1cbiAgX2dldENpcmN1bWZlcmVuY2UoKSB7XG4gICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMuY2lyY3VtZmVyZW5jZSk7XG4gIH1cbiAgX2dldFJvdGF0aW9uRXh0ZW50cygpIHtcbiAgICBsZXQgbWluID0gVEFVO1xuICAgIGxldCBtYXggPSAtVEFVO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXI7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gY29udHJvbGxlci5fZ2V0Um90YXRpb24oKTtcbiAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IGNvbnRyb2xsZXIuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByb3RhdGlvbik7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcm90YXRpb24gKyBjaXJjdW1mZXJlbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdGF0aW9uOiBtaW4sXG4gICAgICBjaXJjdW1mZXJlbmNlOiBtYXggLSBtaW4sXG4gICAgfTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCB7Y2hhcnRBcmVhfSA9IGNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgY29uc3Qgc3BhY2luZyA9IHRoaXMuZ2V0TWF4Qm9yZGVyV2lkdGgoKSArIHRoaXMuZ2V0TWF4T2Zmc2V0KGFyY3MpICsgdGhpcy5vcHRpb25zLnNwYWNpbmc7XG4gICAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KChNYXRoLm1pbihjaGFydEFyZWEud2lkdGgsIGNoYXJ0QXJlYS5oZWlnaHQpIC0gc3BhY2luZykgLyAyLCAwKTtcbiAgICBjb25zdCBjdXRvdXQgPSBNYXRoLm1pbih0b1BlcmNlbnRhZ2UodGhpcy5vcHRpb25zLmN1dG91dCwgbWF4U2l6ZSksIDEpO1xuICAgIGNvbnN0IGNoYXJ0V2VpZ2h0ID0gdGhpcy5fZ2V0UmluZ1dlaWdodCh0aGlzLmluZGV4KTtcbiAgICBjb25zdCB7Y2lyY3VtZmVyZW5jZSwgcm90YXRpb259ID0gdGhpcy5fZ2V0Um90YXRpb25FeHRlbnRzKCk7XG4gICAgY29uc3Qge3JhdGlvWCwgcmF0aW9ZLCBvZmZzZXRYLCBvZmZzZXRZfSA9IGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpO1xuICAgIGNvbnN0IG1heFdpZHRoID0gKGNoYXJ0QXJlYS53aWR0aCAtIHNwYWNpbmcpIC8gcmF0aW9YO1xuICAgIGNvbnN0IG1heEhlaWdodCA9IChjaGFydEFyZWEuaGVpZ2h0IC0gc3BhY2luZykgLyByYXRpb1k7XG4gICAgY29uc3QgbWF4UmFkaXVzID0gTWF0aC5tYXgoTWF0aC5taW4obWF4V2lkdGgsIG1heEhlaWdodCkgLyAyLCAwKTtcbiAgICBjb25zdCBvdXRlclJhZGl1cyA9IHRvRGltZW5zaW9uKHRoaXMub3B0aW9ucy5yYWRpdXMsIG1heFJhZGl1cyk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG4gICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gdGhpcy5fZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpO1xuICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFggKiBvdXRlclJhZGl1cztcbiAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZICogb3V0ZXJSYWRpdXM7XG4gICAgbWV0YS50b3RhbCA9IHRoaXMuY2FsY3VsYXRlVG90YWwoKTtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuaW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSBNYXRoLm1heCh0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIF9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fZ2V0Q2lyY3VtZmVyZW5jZSgpO1xuICAgIGlmICgocmVzZXQgJiYgb3B0cy5hbmltYXRpb24uYW5pbWF0ZVJvdGF0ZSkgfHwgIXRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgfHwgbWV0YS5fcGFyc2VkW2ldID09PSBudWxsIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKG1ldGEuX3BhcnNlZFtpXSAqIGNpcmN1bWZlcmVuY2UgLyBUQVUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICBjb25zdCBjZW50ZXJYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDI7XG4gICAgY29uc3QgY2VudGVyWSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyO1xuICAgIGNvbnN0IGFuaW1hdGVTY2FsZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMuaW5uZXJSYWRpdXM7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBhbmltYXRlU2NhbGUgPyAwIDogdGhpcy5vdXRlclJhZGl1cztcbiAgICBjb25zdCB7c2hhcmVkT3B0aW9ucywgaW5jbHVkZU9wdGlvbnN9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgbGV0IHN0YXJ0QW5nbGUgPSB0aGlzLl9nZXRSb3RhdGlvbigpO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGFydDsgKytpKSB7XG4gICAgICBzdGFydEFuZ2xlICs9IHRoaXMuX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpO1xuICAgIH1cbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpO1xuICAgICAgY29uc3QgYXJjID0gYXJjc1tpXTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIHg6IGNlbnRlclggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgIHk6IGNlbnRlclkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlOiBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgIGlubmVyUmFkaXVzXG4gICAgICB9O1xuICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgc3RhcnRBbmdsZSArPSBjaXJjdW1mZXJlbmNlO1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICB9XG4gIGNhbGN1bGF0ZVRvdGFsKCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuICAgIGxldCB0b3RhbCA9IDA7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IG1ldGFEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1ldGEuX3BhcnNlZFtpXTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiAhaXNOYU4odmFsdWUpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgJiYgIW1ldGFEYXRhW2ldLmhpZGRlbikge1xuICAgICAgICB0b3RhbCArPSBNYXRoLmFicyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b3RhbDtcbiAgfVxuICBjYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHZhbHVlKSB7XG4gICAgY29uc3QgdG90YWwgPSB0aGlzLl9jYWNoZWRNZXRhLnRvdGFsO1xuICAgIGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIFRBVSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XSwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgIHZhbHVlLFxuICAgIH07XG4gIH1cbiAgZ2V0TWF4Qm9yZGVyV2lkdGgoYXJjcykge1xuICAgIGxldCBtYXggPSAwO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBsZXQgaSwgaWxlbiwgbWV0YSwgY29udHJvbGxlciwgb3B0aW9ucztcbiAgICBpZiAoIWFyY3MpIHtcbiAgICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgICBpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICAgIGNvbnRyb2xsZXIgPSBtZXRhLmNvbnRyb2xsZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhcmNzKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBvcHRpb25zID0gY29udHJvbGxlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyQWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDAsIG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aCB8fCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuICBnZXRNYXhPZmZzZXQoYXJjcykge1xuICAgIGxldCBtYXggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7XG4gICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMub2Zmc2V0IHx8IDAsIG9wdGlvbnMuaG92ZXJPZmZzZXQgfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgX2dldFJpbmdXZWlnaHRPZmZzZXQoZGF0YXNldEluZGV4KSB7XG4gICAgbGV0IHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgcmluZ1dlaWdodE9mZnNldCArPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmluZ1dlaWdodE9mZnNldDtcbiAgfVxuICBfZ2V0UmluZ1dlaWdodChkYXRhc2V0SW5kZXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgodmFsdWVPckRlZmF1bHQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ud2VpZ2h0LCAxKSwgMCk7XG4gIH1cbiAgX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCkgfHwgMTtcbiAgfVxufVxuRG91Z2hudXRDb250cm9sbGVyLmlkID0gJ2RvdWdobnV0JztcbkRvdWdobnV0Q29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgYW5pbWF0aW9uOiB7XG4gICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICBhbmltYXRlU2NhbGU6IGZhbHNlXG4gIH0sXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsnY2lyY3VtZmVyZW5jZScsICdlbmRBbmdsZScsICdpbm5lclJhZGl1cycsICdvdXRlclJhZGl1cycsICdzdGFydEFuZ2xlJywgJ3gnLCAneScsICdvZmZzZXQnLCAnYm9yZGVyV2lkdGgnLCAnc3BhY2luZyddXG4gICAgfSxcbiAgfSxcbiAgY3V0b3V0OiAnNTAlJyxcbiAgcm90YXRpb246IDAsXG4gIGNpcmN1bWZlcmVuY2U6IDM2MCxcbiAgcmFkaXVzOiAnMTAwJScsXG4gIHNwYWNpbmc6IDAsXG4gIGluZGV4QXhpczogJ3InLFxufTtcbkRvdWdobnV0Q29udHJvbGxlci5kZXNjcmlwdG9ycyA9IHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnc3BhY2luZycsXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnc3BhY2luZycsXG59O1xuRG91Z2hudXRDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgYXNwZWN0UmF0aW86IDEsXG4gIHBsdWdpbnM6IHtcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBnZW5lcmF0ZUxhYmVscyhjaGFydCkge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5kYXRhO1xuICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHtsYWJlbHM6IHtwb2ludFN0eWxlfX0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmxhYmVscy5tYXAoKGxhYmVsLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQ2xpY2soZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgIGxlZ2VuZC5jaGFydC50b2dnbGVEYXRhVmlzaWJpbGl0eShsZWdlbmRJdGVtLmluZGV4KTtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIHRpdGxlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWwodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgICBsZXQgZGF0YUxhYmVsID0gdG9vbHRpcEl0ZW0ubGFiZWw7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YUxhYmVsKSkge1xuICAgICAgICAgICAgZGF0YUxhYmVsID0gZGF0YUxhYmVsLnNsaWNlKCk7XG4gICAgICAgICAgICBkYXRhTGFiZWxbMF0gKz0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbCArPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRhdGFMYWJlbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgTGluZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnN1cHBvcnRzRGVjaW1hdGlvbiA9IHRydWU7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2RhdGFzZXQ6IGxpbmUsIGRhdGE6IHBvaW50cyA9IFtdLCBfZGF0YXNldH0gPSBtZXRhO1xuICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICBsZXQge3N0YXJ0LCBjb3VudH0gPSBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCk7XG4gICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgaWYgKF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkpIHtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICB9XG4gICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgIH1cbiAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgIG9wdGlvbnNcbiAgICB9LCBtb2RlKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGUsIF9zdGFja2VkLCBfZGF0YXNldH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHtzaGFyZWRPcHRpb25zLCBpbmNsdWRlT3B0aW9uc30gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3Qge3NwYW5HYXBzLCBzZWdtZW50fSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgIGxldCBwcmV2UGFyc2VkID0gc3RhcnQgPiAwICYmIHRoaXMuZ2V0UGFyc2VkKHN0YXJ0IC0gMSk7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICBjb25zdCBudWxsRGF0YSA9IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZBeGlzXSk7XG4gICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10sIGkpO1xuICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCB8fCBudWxsRGF0YSA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiBwYXJzZWRbdkF4aXNdLCBpKTtcbiAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKSB8fCBudWxsRGF0YTtcbiAgICAgIHByb3BlcnRpZXMuc3RvcCA9IGkgPiAwICYmIChNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pKSA+IG1heEdhcExlbmd0aDtcbiAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICB9XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICB9XG4gICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgIH1cbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBib3JkZXI7XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBtZXRhLmRhdGFzZXQudXBkYXRlQ29udHJvbFBvaW50cyh0aGlzLmNoYXJ0LmNoYXJ0QXJlYSwgbWV0YS5pU2NhbGUuYXhpcyk7XG4gICAgc3VwZXIuZHJhdygpO1xuICB9XG59XG5MaW5lQ29udHJvbGxlci5pZCA9ICdsaW5lJztcbkxpbmVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBzaG93TGluZTogdHJ1ZSxcbiAgc3BhbkdhcHM6IGZhbHNlLFxufTtcbkxpbmVDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgc2NhbGVzOiB7XG4gICAgX2luZGV4Xzoge1xuICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICB9LFxuICAgIF92YWx1ZV86IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIH0sXG4gIH1cbn07XG5cbmNsYXNzIFBvbGFyQXJlYUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcbiAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdE51bWJlcihtZXRhLl9wYXJzZWRbaW5kZXhdLnIsIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IGFyY3MgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgdGhpcy5fdXBkYXRlUmFkaXVzKCk7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gIH1cbiAgZ2V0TWluTWF4KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHJhbmdlID0ge21pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWX07XG4gICAgbWV0YS5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCkucjtcbiAgICAgIGlmICghaXNOYU4ocGFyc2VkKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICBpZiAocGFyc2VkIDwgcmFuZ2UubWluKSB7XG4gICAgICAgICAgcmFuZ2UubWluID0gcGFyc2VkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQgPiByYW5nZS5tYXgpIHtcbiAgICAgICAgICByYW5nZS5tYXggPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgX3VwZGF0ZVJhZGl1cygpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgIGNvbnN0IG1pblNpemUgPSBNYXRoLm1pbihjaGFydEFyZWEucmlnaHQgLSBjaGFydEFyZWEubGVmdCwgY2hhcnRBcmVhLmJvdHRvbSAtIGNoYXJ0QXJlYS50b3ApO1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3B0cy5jdXRvdXRQZXJjZW50YWdlID8gKG91dGVyUmFkaXVzIC8gMTAwKSAqIChvcHRzLmN1dG91dFBlcmNlbnRhZ2UpIDogMSwgMCk7XG4gICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gY2hhcnQuZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIChyYWRpdXNMZW5ndGggKiB0aGlzLmluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aDtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgIGNvbnN0IGNlbnRlclggPSBzY2FsZS54Q2VudGVyO1xuICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgIGNvbnN0IGRhdGFzZXRTdGFydEFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZSgwKSAtIDAuNSAqIFBJO1xuICAgIGxldCBhbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgIGxldCBpO1xuICAgIGNvbnN0IGRlZmF1bHRBbmdsZSA9IDM2MCAvIHRoaXMuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSkge1xuICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpLnIpIDogMDtcbiAgICAgIGFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlKSB7XG4gICAgICAgICAgb3V0ZXJSYWRpdXMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUpIHtcbiAgICAgICAgICBzdGFydEFuZ2xlID0gZW5kQW5nbGUgPSBkYXRhc2V0U3RhcnRBbmdsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgeDogY2VudGVyWCxcbiAgICAgICAgeTogY2VudGVyWSxcbiAgICAgICAgaW5uZXJSYWRpdXM6IDAsXG4gICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICBlbmRBbmdsZSxcbiAgICAgICAgb3B0aW9uczogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpXG4gICAgICB9O1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICB9XG4gIGNvdW50VmlzaWJsZUVsZW1lbnRzKCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbWV0YS5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoIWlzTmFOKHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjb3VudDtcbiAgfVxuICBfY29tcHV0ZUFuZ2xlKGluZGV4LCBtb2RlLCBkZWZhdWx0QW5nbGUpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleClcbiAgICAgID8gdG9SYWRpYW5zKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkuYW5nbGUgfHwgZGVmYXVsdEFuZ2xlKVxuICAgICAgOiAwO1xuICB9XG59XG5Qb2xhckFyZWFDb250cm9sbGVyLmlkID0gJ3BvbGFyQXJlYSc7XG5Qb2xhckFyZWFDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhRWxlbWVudFR5cGU6ICdhcmMnLFxuICBhbmltYXRpb246IHtcbiAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgIGFuaW1hdGVTY2FsZTogdHJ1ZVxuICB9LFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdzdGFydEFuZ2xlJywgJ2VuZEFuZ2xlJywgJ2lubmVyUmFkaXVzJywgJ291dGVyUmFkaXVzJ11cbiAgICB9LFxuICB9LFxuICBpbmRleEF4aXM6ICdyJyxcbiAgc3RhcnRBbmdsZTogMCxcbn07XG5Qb2xhckFyZWFDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgYXNwZWN0UmF0aW86IDEsXG4gIHBsdWdpbnM6IHtcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBnZW5lcmF0ZUxhYmVscyhjaGFydCkge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5kYXRhO1xuICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHtsYWJlbHM6IHtwb2ludFN0eWxlfX0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmxhYmVscy5tYXAoKGxhYmVsLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQ2xpY2soZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgIGxlZ2VuZC5jaGFydC50b2dnbGVEYXRhVmlzaWJpbGl0eShsZWdlbmRJdGVtLmluZGV4KTtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIHRpdGxlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWwoY29udGV4dCkge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0LmNoYXJ0LmRhdGEubGFiZWxzW2NvbnRleHQuZGF0YUluZGV4XSArICc6ICcgKyBjb250ZXh0LmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzY2FsZXM6IHtcbiAgICByOiB7XG4gICAgICB0eXBlOiAncmFkaWFsTGluZWFyJyxcbiAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgY2lyY3VsYXI6IHRydWVcbiAgICAgIH0sXG4gICAgICBwb2ludExhYmVsczoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHN0YXJ0QW5nbGU6IDBcbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIFBpZUNvbnRyb2xsZXIgZXh0ZW5kcyBEb3VnaG51dENvbnRyb2xsZXIge1xufVxuUGllQ29udHJvbGxlci5pZCA9ICdwaWUnO1xuUGllQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgY3V0b3V0OiAwLFxuICByb3RhdGlvbjogMCxcbiAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICByYWRpdXM6ICcxMDAlJ1xufTtcblxuY2xhc3MgUmFkYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgdlNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGU7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogdlNjYWxlLmdldExhYmVscygpW2luZGV4XSxcbiAgICAgIHZhbHVlOiAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pXG4gICAgfTtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZS5iaW5kKHRoaXMpKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgIGNvbnN0IHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBjb25zdCBsYWJlbHMgPSBtZXRhLmlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICBpZiAobW9kZSAhPT0gJ3Jlc2l6ZScpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIF9sb29wOiB0cnVlLFxuICAgICAgICBfZnVsbExvb3A6IGxhYmVscy5sZW5ndGggPT09IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdGhpcy5nZXRQYXJzZWQoaSkucik7XG4gICAgICBjb25zdCB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuICAgICAgY29uc3QgeSA9IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGFuZ2xlOiBwb2ludFBvc2l0aW9uLmFuZ2xlLFxuICAgICAgICBza2lwOiBpc05hTih4KSB8fCBpc05hTih5KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICB9XG59XG5SYWRhckNvbnRyb2xsZXIuaWQgPSAncmFkYXInO1xuUmFkYXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBpbmRleEF4aXM6ICdyJyxcbiAgc2hvd0xpbmU6IHRydWUsXG4gIGVsZW1lbnRzOiB7XG4gICAgbGluZToge1xuICAgICAgZmlsbDogJ3N0YXJ0J1xuICAgIH1cbiAgfSxcbn07XG5SYWRhckNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBhc3BlY3RSYXRpbzogMSxcbiAgc2NhbGVzOiB7XG4gICAgcjoge1xuICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcicsXG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy54ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRhbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICB9XG4gIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4ge3gsIHl9O1xuICB9XG4gIGhhc1ZhbHVlKCkge1xuICAgIHJldHVybiBpc051bWJlcih0aGlzLngpICYmIGlzTnVtYmVyKHRoaXMueSk7XG4gIH1cbiAgZ2V0UHJvcHMocHJvcHMsIGZpbmFsKSB7XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgIGlmICghZmluYWwgfHwgIWFuaW1zKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIHJldFtwcm9wXSA9IGFuaW1zW3Byb3BdICYmIGFuaW1zW3Byb3BdLmFjdGl2ZSgpID8gYW5pbXNbcHJvcF0uX3RvIDogdGhpc1twcm9wXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5FbGVtZW50LmRlZmF1bHRzID0ge307XG5FbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB1bmRlZmluZWQ7XG5cbmNvbnN0IGZvcm1hdHRlcnMgPSB7XG4gIHZhbHVlcyh2YWx1ZSkge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogJycgKyB2YWx1ZTtcbiAgfSxcbiAgbnVtZXJpYyh0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgIHJldHVybiAnMCc7XG4gICAgfVxuICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGU7XG4gICAgbGV0IG5vdGF0aW9uO1xuICAgIGxldCBkZWx0YSA9IHRpY2tWYWx1ZTtcbiAgICBpZiAodGlja3MubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3QgbWF4VGljayA9IE1hdGgubWF4KE1hdGguYWJzKHRpY2tzWzBdLnZhbHVlKSwgTWF0aC5hYnModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUpKTtcbiAgICAgIGlmIChtYXhUaWNrIDwgMWUtNCB8fCBtYXhUaWNrID4gMWUrMTUpIHtcbiAgICAgICAgbm90YXRpb24gPSAnc2NpZW50aWZpYyc7XG4gICAgICB9XG4gICAgICBkZWx0YSA9IGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpO1xuICAgIH1cbiAgICBjb25zdCBsb2dEZWx0YSA9IGxvZzEwKE1hdGguYWJzKGRlbHRhKSk7XG4gICAgY29uc3QgbnVtRGVjaW1hbCA9IE1hdGgubWF4KE1hdGgubWluKC0xICogTWF0aC5mbG9vcihsb2dEZWx0YSksIDIwKSwgMCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtub3RhdGlvbiwgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsLCBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWx9O1xuICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgcmV0dXJuIGZvcm1hdE51bWJlcih0aWNrVmFsdWUsIGxvY2FsZSwgb3B0aW9ucyk7XG4gIH0sXG4gIGxvZ2FyaXRobWljKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwJztcbiAgICB9XG4gICAgY29uc3QgcmVtYWluID0gdGlja1ZhbHVlIC8gKE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWx1ZSkpKSk7XG4gICAgaWYgKHJlbWFpbiA9PT0gMSB8fCByZW1haW4gPT09IDIgfHwgcmVtYWluID09PSA1KSB7XG4gICAgICByZXR1cm4gZm9ybWF0dGVycy5udW1lcmljLmNhbGwodGhpcywgdGlja1ZhbHVlLCBpbmRleCwgdGlja3MpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5mdW5jdGlvbiBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKSB7XG4gIGxldCBkZWx0YSA9IHRpY2tzLmxlbmd0aCA+IDMgPyB0aWNrc1syXS52YWx1ZSAtIHRpY2tzWzFdLnZhbHVlIDogdGlja3NbMV0udmFsdWUgLSB0aWNrc1swXS52YWx1ZTtcbiAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSAxICYmIHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG4gICAgZGVsdGEgPSB0aWNrVmFsdWUgLSBNYXRoLmZsb29yKHRpY2tWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGRlbHRhO1xufVxudmFyIFRpY2tzID0ge2Zvcm1hdHRlcnN9O1xuXG5kZWZhdWx0cy5zZXQoJ3NjYWxlJywge1xuICBkaXNwbGF5OiB0cnVlLFxuICBvZmZzZXQ6IGZhbHNlLFxuICByZXZlcnNlOiBmYWxzZSxcbiAgYmVnaW5BdFplcm86IGZhbHNlLFxuICBib3VuZHM6ICd0aWNrcycsXG4gIGdyYWNlOiAwLFxuICBncmlkOiB7XG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBsaW5lV2lkdGg6IDEsXG4gICAgZHJhd0JvcmRlcjogdHJ1ZSxcbiAgICBkcmF3T25DaGFydEFyZWE6IHRydWUsXG4gICAgZHJhd1RpY2tzOiB0cnVlLFxuICAgIHRpY2tMZW5ndGg6IDgsXG4gICAgdGlja1dpZHRoOiAoX2N0eCwgb3B0aW9ucykgPT4gb3B0aW9ucy5saW5lV2lkdGgsXG4gICAgdGlja0NvbG9yOiAoX2N0eCwgb3B0aW9ucykgPT4gb3B0aW9ucy5jb2xvcixcbiAgICBvZmZzZXQ6IGZhbHNlLFxuICAgIGJvcmRlckRhc2g6IFtdLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcbiAgICBib3JkZXJXaWR0aDogMVxuICB9LFxuICB0aXRsZToge1xuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIHRleHQ6ICcnLFxuICAgIHBhZGRpbmc6IHtcbiAgICAgIHRvcDogNCxcbiAgICAgIGJvdHRvbTogNFxuICAgIH1cbiAgfSxcbiAgdGlja3M6IHtcbiAgICBtaW5Sb3RhdGlvbjogMCxcbiAgICBtYXhSb3RhdGlvbjogNTAsXG4gICAgbWlycm9yOiBmYWxzZSxcbiAgICB0ZXh0U3Ryb2tlV2lkdGg6IDAsXG4gICAgdGV4dFN0cm9rZUNvbG9yOiAnJyxcbiAgICBwYWRkaW5nOiAzLFxuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgYXV0b1NraXA6IHRydWUsXG4gICAgYXV0b1NraXBQYWRkaW5nOiAzLFxuICAgIGxhYmVsT2Zmc2V0OiAwLFxuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcbiAgICBtaW5vcjoge30sXG4gICAgbWFqb3I6IHt9LFxuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBjcm9zc0FsaWduOiAnbmVhcicsXG4gICAgc2hvd0xhYmVsQmFja2Ryb3A6IGZhbHNlLFxuICAgIGJhY2tkcm9wQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpJyxcbiAgICBiYWNrZHJvcFBhZGRpbmc6IDIsXG4gIH1cbn0pO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpY2tzJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLmdyaWQnLCAnY29sb3InLCAnJywgJ2JvcmRlckNvbG9yJyk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdib3JkZXJDb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aXRsZScsICdjb2xvcicsICcnLCAnY29sb3InKTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZScsIHtcbiAgX2ZhbGxiYWNrOiBmYWxzZSxcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhbmFtZS5zdGFydHNXaXRoKCdiZWZvcmUnKSAmJiAhbmFtZS5zdGFydHNXaXRoKCdhZnRlcicpICYmIG5hbWUgIT09ICdjYWxsYmFjaycgJiYgbmFtZSAhPT0gJ3BhcnNlcicsXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ3RpY2tCb3JkZXJEYXNoJyxcbn0pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlcycsIHtcbiAgX2ZhbGxiYWNrOiAnc2NhbGUnLFxufSk7XG5kZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUudGlja3MnLCB7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZycgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnLFxufSk7XG5cbmZ1bmN0aW9uIGF1dG9Ta2lwKHNjYWxlLCB0aWNrcykge1xuICBjb25zdCB0aWNrT3B0cyA9IHNjYWxlLm9wdGlvbnMudGlja3M7XG4gIGNvbnN0IHRpY2tzTGltaXQgPSB0aWNrT3B0cy5tYXhUaWNrc0xpbWl0IHx8IGRldGVybWluZU1heFRpY2tzKHNjYWxlKTtcbiAgY29uc3QgbWFqb3JJbmRpY2VzID0gdGlja09wdHMubWFqb3IuZW5hYmxlZCA/IGdldE1ham9ySW5kaWNlcyh0aWNrcykgOiBbXTtcbiAgY29uc3QgbnVtTWFqb3JJbmRpY2VzID0gbWFqb3JJbmRpY2VzLmxlbmd0aDtcbiAgY29uc3QgZmlyc3QgPSBtYWpvckluZGljZXNbMF07XG4gIGNvbnN0IGxhc3QgPSBtYWpvckluZGljZXNbbnVtTWFqb3JJbmRpY2VzIC0gMV07XG4gIGNvbnN0IG5ld1RpY2tzID0gW107XG4gIGlmIChudW1NYWpvckluZGljZXMgPiB0aWNrc0xpbWl0KSB7XG4gICAgc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgbnVtTWFqb3JJbmRpY2VzIC8gdGlja3NMaW1pdCk7XG4gICAgcmV0dXJuIG5ld1RpY2tzO1xuICB9XG4gIGNvbnN0IHNwYWNpbmcgPSBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpO1xuICBpZiAobnVtTWFqb3JJbmRpY2VzID4gMCkge1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGNvbnN0IGF2Z01ham9yU3BhY2luZyA9IG51bU1ham9ySW5kaWNlcyA+IDEgPyBNYXRoLnJvdW5kKChsYXN0IC0gZmlyc3QpIC8gKG51bU1ham9ySW5kaWNlcyAtIDEpKSA6IG51bGw7XG4gICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIGlzTnVsbE9yVW5kZWYoYXZnTWFqb3JTcGFjaW5nKSA/IDAgOiBmaXJzdCAtIGF2Z01ham9yU3BhY2luZywgZmlyc3QpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBudW1NYWpvckluZGljZXMgLSAxOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JJbmRpY2VzW2ldLCBtYWpvckluZGljZXNbaSArIDFdKTtcbiAgICB9XG4gICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIGxhc3QsIGlzTnVsbE9yVW5kZWYoYXZnTWFqb3JTcGFjaW5nKSA/IHRpY2tzLmxlbmd0aCA6IGxhc3QgKyBhdmdNYWpvclNwYWNpbmcpO1xuICAgIHJldHVybiBuZXdUaWNrcztcbiAgfVxuICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZyk7XG4gIHJldHVybiBuZXdUaWNrcztcbn1cbmZ1bmN0aW9uIGRldGVybWluZU1heFRpY2tzKHNjYWxlKSB7XG4gIGNvbnN0IG9mZnNldCA9IHNjYWxlLm9wdGlvbnMub2Zmc2V0O1xuICBjb25zdCB0aWNrTGVuZ3RoID0gc2NhbGUuX3RpY2tTaXplKCk7XG4gIGNvbnN0IG1heFNjYWxlID0gc2NhbGUuX2xlbmd0aCAvIHRpY2tMZW5ndGggKyAob2Zmc2V0ID8gMCA6IDEpO1xuICBjb25zdCBtYXhDaGFydCA9IHNjYWxlLl9tYXhMZW5ndGggLyB0aWNrTGVuZ3RoO1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1pbihtYXhTY2FsZSwgbWF4Q2hhcnQpKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCkge1xuICBjb25zdCBldmVuTWFqb3JTcGFjaW5nID0gZ2V0RXZlblNwYWNpbmcobWFqb3JJbmRpY2VzKTtcbiAgY29uc3Qgc3BhY2luZyA9IHRpY2tzLmxlbmd0aCAvIHRpY2tzTGltaXQ7XG4gIGlmICghZXZlbk1ham9yU3BhY2luZykge1xuICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbiAgfVxuICBjb25zdCBmYWN0b3JzID0gX2ZhY3Rvcml6ZShldmVuTWFqb3JTcGFjaW5nKTtcbiAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBmYWN0b3JzLmxlbmd0aCAtIDE7IGkgPCBpbGVuOyBpKyspIHtcbiAgICBjb25zdCBmYWN0b3IgPSBmYWN0b3JzW2ldO1xuICAgIGlmIChmYWN0b3IgPiBzcGFjaW5nKSB7XG4gICAgICByZXR1cm4gZmFjdG9yO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG59XG5mdW5jdGlvbiBnZXRNYWpvckluZGljZXModGlja3MpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgaWYgKHRpY2tzW2ldLm1ham9yKSB7XG4gICAgICByZXN1bHQucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIHNwYWNpbmcpIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IG5leHQgPSBtYWpvckluZGljZXNbMF07XG4gIGxldCBpO1xuICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGlja3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICBjb3VudCsrO1xuICAgICAgbmV4dCA9IG1ham9ySW5kaWNlc1tjb3VudCAqIHNwYWNpbmddO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9yU3RhcnQsIG1ham9yRW5kKSB7XG4gIGNvbnN0IHN0YXJ0ID0gdmFsdWVPckRlZmF1bHQobWFqb3JTdGFydCwgMCk7XG4gIGNvbnN0IGVuZCA9IE1hdGgubWluKHZhbHVlT3JEZWZhdWx0KG1ham9yRW5kLCB0aWNrcy5sZW5ndGgpLCB0aWNrcy5sZW5ndGgpO1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgbGVuZ3RoLCBpLCBuZXh0O1xuICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuICBpZiAobWFqb3JFbmQpIHtcbiAgICBsZW5ndGggPSBtYWpvckVuZCAtIG1ham9yU3RhcnQ7XG4gICAgc3BhY2luZyA9IGxlbmd0aCAvIE1hdGguZmxvb3IobGVuZ3RoIC8gc3BhY2luZyk7XG4gIH1cbiAgbmV4dCA9IHN0YXJ0O1xuICB3aGlsZSAobmV4dCA8IDApIHtcbiAgICBjb3VudCsrO1xuICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgfVxuICBmb3IgKGkgPSBNYXRoLm1heChzdGFydCwgMCk7IGkgPCBlbmQ7IGkrKykge1xuICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgIGNvdW50Kys7XG4gICAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRFdmVuU3BhY2luZyhhcnIpIHtcbiAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgbGV0IGksIGRpZmY7XG4gIGlmIChsZW4gPCAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoZGlmZiA9IGFyclswXSwgaSA9IDE7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhcnJbaV0gLSBhcnJbaSAtIDFdICE9PSBkaWZmKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBkaWZmO1xufVxuXG5jb25zdCByZXZlcnNlQWxpZ24gPSAoYWxpZ24pID0+IGFsaWduID09PSAnbGVmdCcgPyAncmlnaHQnIDogYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiBhbGlnbjtcbmNvbnN0IG9mZnNldEZyb21FZGdlID0gKHNjYWxlLCBlZGdlLCBvZmZzZXQpID0+IGVkZ2UgPT09ICd0b3AnIHx8IGVkZ2UgPT09ICdsZWZ0JyA/IHNjYWxlW2VkZ2VdICsgb2Zmc2V0IDogc2NhbGVbZWRnZV0gLSBvZmZzZXQ7XG5mdW5jdGlvbiBzYW1wbGUoYXJyLCBudW1JdGVtcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3QgaW5jcmVtZW50ID0gYXJyLmxlbmd0aCAvIG51bUl0ZW1zO1xuICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG4gIGZvciAoOyBpIDwgbGVuOyBpICs9IGluY3JlbWVudCkge1xuICAgIHJlc3VsdC5wdXNoKGFycltNYXRoLmZsb29yKGkpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldFBpeGVsRm9yR3JpZExpbmUoc2NhbGUsIGluZGV4LCBvZmZzZXRHcmlkTGluZXMpIHtcbiAgY29uc3QgbGVuZ3RoID0gc2NhbGUudGlja3MubGVuZ3RoO1xuICBjb25zdCB2YWxpZEluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICBjb25zdCBzdGFydCA9IHNjYWxlLl9zdGFydFBpeGVsO1xuICBjb25zdCBlbmQgPSBzY2FsZS5fZW5kUGl4ZWw7XG4gIGNvbnN0IGVwc2lsb24gPSAxZS02O1xuICBsZXQgbGluZVZhbHVlID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXgpO1xuICBsZXQgb2Zmc2V0O1xuICBpZiAob2Zmc2V0R3JpZExpbmVzKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgobGluZVZhbHVlIC0gc3RhcnQsIGVuZCAtIGxpbmVWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgb2Zmc2V0ID0gKHNjYWxlLmdldFBpeGVsRm9yVGljaygxKSAtIGxpbmVWYWx1ZSkgLyAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXQgPSAobGluZVZhbHVlIC0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXggLSAxKSkgLyAyO1xuICAgIH1cbiAgICBsaW5lVmFsdWUgKz0gdmFsaWRJbmRleCA8IGluZGV4ID8gb2Zmc2V0IDogLW9mZnNldDtcbiAgICBpZiAobGluZVZhbHVlIDwgc3RhcnQgLSBlcHNpbG9uIHx8IGxpbmVWYWx1ZSA+IGVuZCArIGVwc2lsb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpbmVWYWx1ZTtcbn1cbmZ1bmN0aW9uIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKSB7XG4gIGVhY2goY2FjaGVzLCAoY2FjaGUpID0+IHtcbiAgICBjb25zdCBnYyA9IGNhY2hlLmdjO1xuICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICBsZXQgaTtcbiAgICBpZiAoZ2NMZW4gPiBsZW5ndGgpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBnY0xlbjsgKytpKSB7XG4gICAgICAgIGRlbGV0ZSBjYWNoZS5kYXRhW2djW2ldXTtcbiAgICAgIH1cbiAgICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZHJhd1RpY2tzID8gb3B0aW9ucy50aWNrTGVuZ3RoIDogMDtcbn1cbmZ1bmN0aW9uIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gIGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3QgZm9udCA9IHRvRm9udChvcHRpb25zLmZvbnQsIGZhbGxiYWNrKTtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICBjb25zdCBsaW5lcyA9IGlzQXJyYXkob3B0aW9ucy50ZXh0KSA/IG9wdGlvbnMudGV4dC5sZW5ndGggOiAxO1xuICByZXR1cm4gKGxpbmVzICogZm9udC5saW5lSGVpZ2h0KSArIHBhZGRpbmcuaGVpZ2h0O1xufVxuZnVuY3Rpb24gY3JlYXRlU2NhbGVDb250ZXh0KHBhcmVudCwgc2NhbGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgc2NhbGUsXG4gICAgdHlwZTogJ3NjYWxlJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpY2tDb250ZXh0KHBhcmVudCwgaW5kZXgsIHRpY2spIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgdGljayxcbiAgICBpbmRleCxcbiAgICB0eXBlOiAndGljaydcbiAgfSk7XG59XG5mdW5jdGlvbiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSkge1xuICBsZXQgcmV0ID0gX3RvTGVmdFJpZ2h0Q2VudGVyKGFsaWduKTtcbiAgaWYgKChyZXZlcnNlICYmIHBvc2l0aW9uICE9PSAncmlnaHQnKSB8fCAoIXJldmVyc2UgJiYgcG9zaXRpb24gPT09ICdyaWdodCcpKSB7XG4gICAgcmV0ID0gcmV2ZXJzZUFsaWduKHJldCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRpdGxlQXJncyhzY2FsZSwgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pIHtcbiAgY29uc3Qge3RvcCwgbGVmdCwgYm90dG9tLCByaWdodCwgY2hhcnR9ID0gc2NhbGU7XG4gIGNvbnN0IHtjaGFydEFyZWEsIHNjYWxlc30gPSBjaGFydDtcbiAgbGV0IHJvdGF0aW9uID0gMDtcbiAgbGV0IG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcbiAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgaWYgKHNjYWxlLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgdGl0bGVYID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGxlZnQsIHJpZ2h0KTtcbiAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgdGl0bGVZID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIGhlaWdodCAtIG9mZnNldDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgdGl0bGVZID0gKGNoYXJ0QXJlYS5ib3R0b20gKyBjaGFydEFyZWEudG9wKSAvIDIgKyBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlWSA9IG9mZnNldEZyb21FZGdlKHNjYWxlLCBwb3NpdGlvbiwgb2Zmc2V0KTtcbiAgICB9XG4gICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgIHRpdGxlWCA9IHNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgLSB3aWR0aCArIG9mZnNldDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgdGl0bGVYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIgLSB3aWR0aCArIG9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGVYID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgIH1cbiAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgIHJvdGF0aW9uID0gcG9zaXRpb24gPT09ICdsZWZ0JyA/IC1IQUxGX1BJIDogSEFMRl9QSTtcbiAgfVxuICByZXR1cm4ge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259O1xufVxuY2xhc3MgU2NhbGUgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlkID0gY2ZnLmlkO1xuICAgIHRoaXMudHlwZSA9IGNmZy50eXBlO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmN0eCA9IGNmZy5jdHg7XG4gICAgdGhpcy5jaGFydCA9IGNmZy5jaGFydDtcbiAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX21hcmdpbnMgPSB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBib3R0b206IDBcbiAgICB9O1xuICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nVG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYXhpcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsUm90YXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5taW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50aWNrcyA9IFtdO1xuICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gMDtcbiAgICB0aGlzLl9sb25nZXN0VGV4dENhY2hlID0ge307XG4gICAgdGhpcy5fc3RhcnRQaXhlbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9lbmRQaXhlbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gZmFsc2U7XG4gICAgdGhpcy5fdXNlck1heCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl91c2VyTWluID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdGlja3NMZW5ndGggPSAwO1xuICAgIHRoaXMuX2JvcmRlclZhbHVlID0gMDtcbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXQob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgdGhpcy5heGlzID0gb3B0aW9ucy5heGlzO1xuICAgIHRoaXMuX3VzZXJNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMubWluKTtcbiAgICB0aGlzLl91c2VyTWF4ID0gdGhpcy5wYXJzZShvcHRpb25zLm1heCk7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1pbik7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1heCk7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIHJldHVybiByYXc7XG4gIH1cbiAgZ2V0VXNlckJvdW5kcygpIHtcbiAgICBsZXQge191c2VyTWluLCBfdXNlck1heCwgX3N1Z2dlc3RlZE1pbiwgX3N1Z2dlc3RlZE1heH0gPSB0aGlzO1xuICAgIF91c2VyTWluID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIF91c2VyTWF4ID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgIF9zdWdnZXN0ZWRNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1pbiwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICBfc3VnZ2VzdGVkTWF4ID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBfc3VnZ2VzdGVkTWluKSxcbiAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBfc3VnZ2VzdGVkTWF4KSxcbiAgICAgIG1pbkRlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWluKSxcbiAgICAgIG1heERlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWF4KVxuICAgIH07XG4gIH1cbiAgZ2V0TWluTWF4KGNhblN0YWNrKSB7XG4gICAgbGV0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQgcmFuZ2U7XG4gICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHttaW4sIG1heH07XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICByYW5nZSA9IG1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0TWluTWF4KHRoaXMsIGNhblN0YWNrKTtcbiAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJhbmdlLm1pbik7XG4gICAgICB9XG4gICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByYW5nZS5tYXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBtaW4gPSBtYXhEZWZpbmVkICYmIG1pbiA+IG1heCA/IG1heCA6IG1pbjtcbiAgICBtYXggPSBtaW5EZWZpbmVkICYmIG1pbiA+IG1heCA/IG1pbiA6IG1heDtcbiAgICByZXR1cm4ge1xuICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQobWluLCBmaW5pdGVPckRlZmF1bHQobWF4LCBtaW4pKSxcbiAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KG1heCwgZmluaXRlT3JEZWZhdWx0KG1pbiwgbWF4KSlcbiAgICB9O1xuICB9XG4gIGdldFBhZGRpbmcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHRoaXMucGFkZGluZ0xlZnQgfHwgMCxcbiAgICAgIHRvcDogdGhpcy5wYWRkaW5nVG9wIHx8IDAsXG4gICAgICByaWdodDogdGhpcy5wYWRkaW5nUmlnaHQgfHwgMCxcbiAgICAgIGJvdHRvbTogdGhpcy5wYWRkaW5nQm90dG9tIHx8IDBcbiAgICB9O1xuICB9XG4gIGdldFRpY2tzKCkge1xuICAgIHJldHVybiB0aGlzLnRpY2tzO1xuICB9XG4gIGdldExhYmVscygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGFiZWxzIHx8ICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZGF0YS54TGFiZWxzIDogZGF0YS55TGFiZWxzKSB8fCBkYXRhLmxhYmVscyB8fCBbXTtcbiAgfVxuICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gIH1cbiAgYmVmb3JlVXBkYXRlKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVVcGRhdGUsIFt0aGlzXSk7XG4gIH1cbiAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICBjb25zdCB7YmVnaW5BdFplcm8sIGdyYWNlLCB0aWNrczogdGlja09wdHN9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aWNrT3B0cy5zYW1wbGVTaXplO1xuICAgIHRoaXMuYmVmb3JlVXBkYXRlKCk7XG4gICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgIHRoaXMuX21hcmdpbnMgPSBtYXJnaW5zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBib3R0b206IDBcbiAgICB9LCBtYXJnaW5zKTtcbiAgICB0aGlzLnRpY2tzID0gbnVsbDtcbiAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICB0aGlzLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuX21heExlbmd0aCA9IHRoaXMuaXNIb3Jpem9udGFsKClcbiAgICAgID8gdGhpcy53aWR0aCArIG1hcmdpbnMubGVmdCArIG1hcmdpbnMucmlnaHRcbiAgICAgIDogdGhpcy5oZWlnaHQgKyBtYXJnaW5zLnRvcCArIG1hcmdpbnMuYm90dG9tO1xuICAgIGlmICghdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCkge1xuICAgICAgdGhpcy5iZWZvcmVEYXRhTGltaXRzKCk7XG4gICAgICB0aGlzLmRldGVybWluZURhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuYWZ0ZXJEYXRhTGltaXRzKCk7XG4gICAgICB0aGlzLl9yYW5nZSA9IF9hZGRHcmFjZSh0aGlzLCBncmFjZSwgYmVnaW5BdFplcm8pO1xuICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuYmVmb3JlQnVpbGRUaWNrcygpO1xuICAgIHRoaXMudGlja3MgPSB0aGlzLmJ1aWxkVGlja3MoKSB8fCBbXTtcbiAgICB0aGlzLmFmdGVyQnVpbGRUaWNrcygpO1xuICAgIGNvbnN0IHNhbXBsaW5nRW5hYmxlZCA9IHNhbXBsZVNpemUgPCB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyhzYW1wbGluZ0VuYWJsZWQgPyBzYW1wbGUodGhpcy50aWNrcywgc2FtcGxlU2l6ZSkgOiB0aGlzLnRpY2tzKTtcbiAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIHRoaXMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgIHRoaXMuY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgIHRoaXMuYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgKHRpY2tPcHRzLmF1dG9Ta2lwIHx8IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgdGhpcy50aWNrcyA9IGF1dG9Ta2lwKHRoaXMsIHRoaXMudGlja3MpO1xuICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICB0aGlzLmFmdGVyQXV0b1NraXAoKTtcbiAgICB9XG4gICAgaWYgKHNhbXBsaW5nRW5hYmxlZCkge1xuICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHModGhpcy50aWNrcyk7XG4gICAgfVxuICAgIHRoaXMuYmVmb3JlRml0KCk7XG4gICAgdGhpcy5maXQoKTtcbiAgICB0aGlzLmFmdGVyRml0KCk7XG4gICAgdGhpcy5hZnRlclVwZGF0ZSgpO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBsZXQgcmV2ZXJzZVBpeGVscyA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuICAgIGxldCBzdGFydFBpeGVsLCBlbmRQaXhlbDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgc3RhcnRQaXhlbCA9IHRoaXMubGVmdDtcbiAgICAgIGVuZFBpeGVsID0gdGhpcy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRQaXhlbCA9IHRoaXMudG9wO1xuICAgICAgZW5kUGl4ZWwgPSB0aGlzLmJvdHRvbTtcbiAgICAgIHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcbiAgICB9XG4gICAgdGhpcy5fc3RhcnRQaXhlbCA9IHN0YXJ0UGl4ZWw7XG4gICAgdGhpcy5fZW5kUGl4ZWwgPSBlbmRQaXhlbDtcbiAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcbiAgICB0aGlzLl9sZW5ndGggPSBlbmRQaXhlbCAtIHN0YXJ0UGl4ZWw7XG4gICAgdGhpcy5fYWxpZ25Ub1BpeGVscyA9IHRoaXMub3B0aW9ucy5hbGlnblRvUGl4ZWxzO1xuICB9XG4gIGFmdGVyVXBkYXRlKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVTZXREaW1lbnNpb25zKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICB9XG4gIHNldERpbWVuc2lvbnMoKSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICB9XG4gICAgdGhpcy5wYWRkaW5nTGVmdCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nVG9wID0gMDtcbiAgICB0aGlzLnBhZGRpbmdSaWdodCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDtcbiAgfVxuICBhZnRlclNldERpbWVuc2lvbnMoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcbiAgfVxuICBfY2FsbEhvb2tzKG5hbWUpIHtcbiAgICB0aGlzLmNoYXJ0Lm5vdGlmeVBsdWdpbnMobmFtZSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9uc1tuYW1lXSwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVEYXRhTGltaXRzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlRGF0YUxpbWl0cycpO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7fVxuICBhZnRlckRhdGFMaW1pdHMoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckRhdGFMaW1pdHMnKTtcbiAgfVxuICBiZWZvcmVCdWlsZFRpY2tzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlQnVpbGRUaWNrcycpO1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGFmdGVyQnVpbGRUaWNrcygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyQnVpbGRUaWNrcycpO1xuICB9XG4gIGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbdGhpc10pO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIHRpY2subGFiZWwgPSBjYWxsYmFjayh0aWNrT3B0cy5jYWxsYmFjaywgW3RpY2sudmFsdWUsIGksIHRpY2tzXSwgdGhpcyk7XG4gICAgfVxuICB9XG4gIGFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uLCBbdGhpc10pO1xuICB9XG4gIGNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgbnVtVGlja3MgPSB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDA7XG4gICAgY29uc3QgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcbiAgICBsZXQgbGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgIGxldCB0aWNrV2lkdGgsIG1heEhlaWdodCwgbWF4TGFiZWxEaWFnb25hbDtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICF0aWNrT3B0cy5kaXNwbGF5IHx8IG1pblJvdGF0aW9uID49IG1heFJvdGF0aW9uIHx8IG51bVRpY2tzIDw9IDEgfHwgIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICBjb25zdCBtYXhMYWJlbEhlaWdodCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQ7XG4gICAgY29uc3QgbWF4V2lkdGggPSBfbGltaXRWYWx1ZSh0aGlzLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgdGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyB0aGlzLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuICAgIGlmIChtYXhMYWJlbFdpZHRoICsgNiA+IHRpY2tXaWR0aCkge1xuICAgICAgdGlja1dpZHRoID0gbWF4V2lkdGggLyAobnVtVGlja3MgLSAob3B0aW9ucy5vZmZzZXQgPyAwLjUgOiAxKSk7XG4gICAgICBtYXhIZWlnaHQgPSB0aGlzLm1heEhlaWdodCAtIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZClcblx0XHRcdFx0LSB0aWNrT3B0cy5wYWRkaW5nIC0gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucy50aXRsZSwgdGhpcy5jaGFydC5vcHRpb25zLmZvbnQpO1xuICAgICAgbWF4TGFiZWxEaWFnb25hbCA9IE1hdGguc3FydChtYXhMYWJlbFdpZHRoICogbWF4TGFiZWxXaWR0aCArIG1heExhYmVsSGVpZ2h0ICogbWF4TGFiZWxIZWlnaHQpO1xuICAgICAgbGFiZWxSb3RhdGlvbiA9IHRvRGVncmVlcyhNYXRoLm1pbihcbiAgICAgICAgTWF0aC5hc2luKF9saW1pdFZhbHVlKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIC0xLCAxKSksXG4gICAgICAgIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpIC0gTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKVxuICAgICAgKSk7XG4gICAgICBsYWJlbFJvdGF0aW9uID0gTWF0aC5tYXgobWluUm90YXRpb24sIE1hdGgubWluKG1heFJvdGF0aW9uLCBsYWJlbFJvdGF0aW9uKSk7XG4gICAgfVxuICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IGxhYmVsUm90YXRpb247XG4gIH1cbiAgYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFt0aGlzXSk7XG4gIH1cbiAgYWZ0ZXJBdXRvU2tpcCgpIHt9XG4gIGJlZm9yZUZpdCgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRml0LCBbdGhpc10pO1xuICB9XG4gIGZpdCgpIHtcbiAgICBjb25zdCBtaW5TaXplID0ge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIGNvbnN0IHtjaGFydCwgb3B0aW9uczoge3RpY2tzOiB0aWNrT3B0cywgdGl0bGU6IHRpdGxlT3B0cywgZ3JpZDogZ3JpZE9wdHN9fSA9IHRoaXM7XG4gICAgY29uc3QgZGlzcGxheSA9IHRoaXMuX2lzVmlzaWJsZSgpO1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKGRpc3BsYXkpIHtcbiAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gZ2V0VGl0bGVIZWlnaHQodGl0bGVPcHRzLCBjaGFydC5vcHRpb25zLmZvbnQpO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBtaW5TaXplLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pblNpemUuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgIG1pblNpemUud2lkdGggPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgIH1cbiAgICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIHRoaXMudGlja3MubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHtmaXJzdCwgbGFzdCwgd2lkZXN0LCBoaWdoZXN0fSA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgY29uc3QgdGlja1BhZGRpbmcgPSB0aWNrT3B0cy5wYWRkaW5nICogMjtcbiAgICAgICAgY29uc3QgYW5nbGVSYWRpYW5zID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlUmFkaWFucyk7XG4gICAgICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKGFuZ2xlUmFkaWFucyk7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICBjb25zdCBsYWJlbEhlaWdodCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBzaW4gKiB3aWRlc3Qud2lkdGggKyBjb3MgKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKHRoaXMubWF4SGVpZ2h0LCBtaW5TaXplLmhlaWdodCArIGxhYmVsSGVpZ2h0ICsgdGlja1BhZGRpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGxhYmVsV2lkdGggPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogY29zICogd2lkZXN0LndpZHRoICsgc2luICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgbWluU2l6ZS53aWR0aCA9IE1hdGgubWluKHRoaXMubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYWJlbFdpZHRoICsgdGlja1BhZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZVBhZGRpbmcoZmlyc3QsIGxhc3QsIHNpbiwgY29zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faGFuZGxlTWFyZ2lucygpO1xuICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLl9sZW5ndGggPSBjaGFydC53aWR0aCAtIHRoaXMuX21hcmdpbnMubGVmdCAtIHRoaXMuX21hcmdpbnMucmlnaHQ7XG4gICAgICB0aGlzLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndpZHRoID0gbWluU2l6ZS53aWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQuaGVpZ2h0IC0gdGhpcy5fbWFyZ2lucy50b3AgLSB0aGlzLl9tYXJnaW5zLmJvdHRvbTtcbiAgICB9XG4gIH1cbiAgX2NhbGN1bGF0ZVBhZGRpbmcoZmlyc3QsIGxhc3QsIHNpbiwgY29zKSB7XG4gICAgY29uc3Qge3RpY2tzOiB7YWxpZ24sIHBhZGRpbmd9LCBwb3NpdGlvbn0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgaXNSb3RhdGVkID0gdGhpcy5sYWJlbFJvdGF0aW9uICE9PSAwO1xuICAgIGNvbnN0IGxhYmVsc0JlbG93VGlja3MgPSBwb3NpdGlvbiAhPT0gJ3RvcCcgJiYgdGhpcy5heGlzID09PSAneCc7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGNvbnN0IG9mZnNldExlZnQgPSB0aGlzLmdldFBpeGVsRm9yVGljaygwKSAtIHRoaXMubGVmdDtcbiAgICAgIGNvbnN0IG9mZnNldFJpZ2h0ID0gdGhpcy5yaWdodCAtIHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKHRoaXMudGlja3MubGVuZ3RoIC0gMSk7XG4gICAgICBsZXQgcGFkZGluZ0xlZnQgPSAwO1xuICAgICAgbGV0IHBhZGRpbmdSaWdodCA9IDA7XG4gICAgICBpZiAoaXNSb3RhdGVkKSB7XG4gICAgICAgIGlmIChsYWJlbHNCZWxvd1RpY2tzKSB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQgPSBjb3MgKiBmaXJzdC53aWR0aDtcbiAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBzaW4gKiBsYXN0LmhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWRkaW5nTGVmdCA9IHNpbiAqIGZpcnN0LmhlaWdodDtcbiAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBjb3MgKiBsYXN0LndpZHRoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBhZGRpbmdSaWdodCA9IGxhc3Qud2lkdGg7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoO1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoIC8gMjtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aCAvIDI7XG4gICAgICB9XG4gICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoKHBhZGRpbmdMZWZ0IC0gb2Zmc2V0TGVmdCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0TGVmdCksIDApO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heCgocGFkZGluZ1JpZ2h0IC0gb2Zmc2V0UmlnaHQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldFJpZ2h0KSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQgLyAyO1xuICAgICAgbGV0IHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQgLyAyO1xuICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBhZGRpbmdUb3AgPSAwO1xuICAgICAgICBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0O1xuICAgICAgICBwYWRkaW5nQm90dG9tID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHBhZGRpbmdUb3AgKyBwYWRkaW5nO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gcGFkZGluZ0JvdHRvbSArIHBhZGRpbmc7XG4gICAgfVxuICB9XG4gIF9oYW5kbGVNYXJnaW5zKCkge1xuICAgIGlmICh0aGlzLl9tYXJnaW5zKSB7XG4gICAgICB0aGlzLl9tYXJnaW5zLmxlZnQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdMZWZ0LCB0aGlzLl9tYXJnaW5zLmxlZnQpO1xuICAgICAgdGhpcy5fbWFyZ2lucy50b3AgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdUb3AsIHRoaXMuX21hcmdpbnMudG9wKTtcbiAgICAgIHRoaXMuX21hcmdpbnMucmlnaHQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdSaWdodCwgdGhpcy5fbWFyZ2lucy5yaWdodCk7XG4gICAgICB0aGlzLl9tYXJnaW5zLmJvdHRvbSA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0JvdHRvbSwgdGhpcy5fbWFyZ2lucy5ib3R0b20pO1xuICAgIH1cbiAgfVxuICBhZnRlckZpdCgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJGaXQsIFt0aGlzXSk7XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIGNvbnN0IHtheGlzLCBwb3NpdGlvbn0gPSB0aGlzLm9wdGlvbnM7XG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgYXhpcyA9PT0gJ3gnO1xuICB9XG4gIGlzRnVsbFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5mdWxsU2l6ZTtcbiAgfVxuICBfY29udmVydFRpY2tzVG9MYWJlbHModGlja3MpIHtcbiAgICB0aGlzLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgIHRoaXMuZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih0aWNrc1tpXS5sYWJlbCkpIHtcbiAgICAgICAgdGlja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICBpbGVuLS07XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICB9XG4gIF9nZXRMYWJlbFNpemVzKCkge1xuICAgIGxldCBsYWJlbFNpemVzID0gdGhpcy5fbGFiZWxTaXplcztcbiAgICBpZiAoIWxhYmVsU2l6ZXMpIHtcbiAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aGlzLm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtcbiAgICAgIGxldCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICBpZiAoc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICB0aWNrcyA9IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IHRoaXMuX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCB0aWNrcy5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWxTaXplcztcbiAgfVxuICBfY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIGxlbmd0aCkge1xuICAgIGNvbnN0IHtjdHgsIF9sb25nZXN0VGV4dENhY2hlOiBjYWNoZXN9ID0gdGhpcztcbiAgICBjb25zdCB3aWR0aHMgPSBbXTtcbiAgICBjb25zdCBoZWlnaHRzID0gW107XG4gICAgbGV0IHdpZGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgbGV0IGhpZ2hlc3RMYWJlbFNpemUgPSAwO1xuICAgIGxldCBpLCBqLCBqbGVuLCBsYWJlbCwgdGlja0ZvbnQsIGZvbnRTdHJpbmcsIGNhY2hlLCBsaW5lSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBuZXN0ZWRMYWJlbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGxhYmVsID0gdGlja3NbaV0ubGFiZWw7XG4gICAgICB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICBjdHguZm9udCA9IGZvbnRTdHJpbmcgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICBjYWNoZSA9IGNhY2hlc1tmb250U3RyaW5nXSA9IGNhY2hlc1tmb250U3RyaW5nXSB8fCB7ZGF0YToge30sIGdjOiBbXX07XG4gICAgICBsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcbiAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMDtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZihsYWJlbCkgJiYgIWlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBsYWJlbCk7XG4gICAgICAgIGhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcbiAgICAgICAgICBuZXN0ZWRMYWJlbCA9IGxhYmVsW2pdO1xuICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihuZXN0ZWRMYWJlbCkgJiYgIWlzQXJyYXkobmVzdGVkTGFiZWwpKSB7XG4gICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuICAgICAgICAgICAgaGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aWR0aHMucHVzaCh3aWR0aCk7XG4gICAgICBoZWlnaHRzLnB1c2goaGVpZ2h0KTtcbiAgICAgIHdpZGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KHdpZHRoLCB3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgaGlnaGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KGhlaWdodCwgaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgfVxuICAgIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcbiAgICBjb25zdCB3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZih3aWRlc3RMYWJlbFNpemUpO1xuICAgIGNvbnN0IGhpZ2hlc3QgPSBoZWlnaHRzLmluZGV4T2YoaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgY29uc3QgdmFsdWVBdCA9IChpZHgpID0+ICh7d2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsIGhlaWdodDogaGVpZ2h0c1tpZHhdIHx8IDB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IHZhbHVlQXQoMCksXG4gICAgICBsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuICAgICAgd2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG4gICAgICBoaWdoZXN0OiB2YWx1ZUF0KGhpZ2hlc3QpLFxuICAgICAgd2lkdGhzLFxuICAgICAgaGVpZ2h0cyxcbiAgICB9O1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHt9XG4gIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgfVxuICBnZXRQaXhlbEZvckRlY2ltYWwoZGVjaW1hbCkge1xuICAgIGlmICh0aGlzLl9yZXZlcnNlUGl4ZWxzKSB7XG4gICAgICBkZWNpbWFsID0gMSAtIGRlY2ltYWw7XG4gICAgfVxuICAgIGNvbnN0IHBpeGVsID0gdGhpcy5fc3RhcnRQaXhlbCArIGRlY2ltYWwgKiB0aGlzLl9sZW5ndGg7XG4gICAgcmV0dXJuIF9pbnQxNlJhbmdlKHRoaXMuX2FsaWduVG9QaXhlbHMgPyBfYWxpZ25QaXhlbCh0aGlzLmNoYXJ0LCBwaXhlbCwgMCkgOiBwaXhlbCk7XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3QgZGVjaW1hbCA9IChwaXhlbCAtIHRoaXMuX3N0YXJ0UGl4ZWwpIC8gdGhpcy5fbGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9yZXZlcnNlUGl4ZWxzID8gMSAtIGRlY2ltYWwgOiBkZWNpbWFsO1xuICB9XG4gIGdldEJhc2VQaXhlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICB9XG4gIGdldEJhc2VWYWx1ZSgpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICByZXR1cm4gbWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDpcbiAgICAgIG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6XG4gICAgICAwO1xuICB9XG4gIGdldENvbnRleHQoaW5kZXgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3MgfHwgW107XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgICByZXR1cm4gdGljay4kY29udGV4dCB8fFxuXHRcdFx0XHQodGljay4kY29udGV4dCA9IGNyZWF0ZVRpY2tDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgdGljaykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fFxuXHRcdFx0KHRoaXMuJGNvbnRleHQgPSBjcmVhdGVTY2FsZUNvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMpKTtcbiAgfVxuICBfdGlja1NpemUoKSB7XG4gICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3Qgcm90ID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3Mocm90KSk7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCBwYWRkaW5nID0gb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nIHx8IDA7XG4gICAgY29uc3QgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuICAgIGNvbnN0IGggPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIHBhZGRpbmcgOiAwO1xuICAgIHJldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpXG4gICAgICA/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW5cbiAgICAgIDogaCAqIHNpbiA8IHcgKiBjb3MgPyBoIC8gY29zIDogdyAvIHNpbjtcbiAgfVxuICBfaXNWaXNpYmxlKCkge1xuICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLm9wdGlvbnMuZGlzcGxheTtcbiAgICBpZiAoZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gISFkaXNwbGF5O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpLmxlbmd0aCA+IDA7XG4gIH1cbiAgX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge2dyaWQsIHBvc2l0aW9ufSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZ3JpZC5vZmZzZXQ7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3QgdGlja3NMZW5ndGggPSB0aWNrcy5sZW5ndGggKyAob2Zmc2V0ID8gMSA6IDApO1xuICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZCk7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBib3JkZXJPcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXJPcHRzLmRyYXdCb3JkZXIgPyBib3JkZXJPcHRzLmJvcmRlcldpZHRoIDogMDtcbiAgICBjb25zdCBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcbiAgICBjb25zdCBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgIHJldHVybiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIGF4aXNXaWR0aCk7XG4gICAgfTtcbiAgICBsZXQgYm9yZGVyVmFsdWUsIGksIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcbiAgICBsZXQgdHgxLCB0eTEsIHR4MiwgdHkyLCB4MSwgeTEsIHgyLCB5MjtcbiAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5ib3R0b20pO1xuICAgICAgdHkxID0gdGhpcy5ib3R0b20gLSB0bDtcbiAgICAgIHR5MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHkxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEudG9wKSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnRvcCk7XG4gICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICB5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHkyID0gdGhpcy50b3AgKyB0bDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnJpZ2h0KTtcbiAgICAgIHR4MSA9IHRoaXMucmlnaHQgLSB0bDtcbiAgICAgIHR4MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHgxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEubGVmdCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMubGVmdCk7XG4gICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgeDIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5yaWdodCkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHgxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHgyID0gdGhpcy5sZWZ0ICsgdGw7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgMC41KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTIgPSB0eTEgKyB0bDtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHR4MSA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR4MiA9IHR4MSAtIHRsO1xuICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgIH1cbiAgICBjb25zdCBsaW1pdCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCwgdGlja3NMZW5ndGgpO1xuICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwodGlja3NMZW5ndGggLyBsaW1pdCkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aWNrc0xlbmd0aDsgaSArPSBzdGVwKSB7XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgY29uc3QgbGluZVdpZHRoID0gb3B0c0F0SW5kZXgubGluZVdpZHRoO1xuICAgICAgY29uc3QgbGluZUNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICBjb25zdCBib3JkZXJEYXNoID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaCB8fCBbXTtcbiAgICAgIGNvbnN0IGJvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgY29uc3QgdGlja1dpZHRoID0gb3B0c0F0SW5kZXgudGlja1dpZHRoO1xuICAgICAgY29uc3QgdGlja0NvbG9yID0gb3B0c0F0SW5kZXgudGlja0NvbG9yO1xuICAgICAgY29uc3QgdGlja0JvcmRlckRhc2ggPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaCB8fCBbXTtcbiAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2hPZmZzZXQ7XG4gICAgICBsaW5lVmFsdWUgPSBnZXRQaXhlbEZvckdyaWRMaW5lKHRoaXMsIGksIG9mZnNldCk7XG4gICAgICBpZiAobGluZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBhbGlnbmVkTGluZVZhbHVlID0gX2FsaWduUGl4ZWwoY2hhcnQsIGxpbmVWYWx1ZSwgbGluZVdpZHRoKTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgdHgxID0gdHgyID0geDEgPSB4MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eTEgPSB0eTIgPSB5MSA9IHkyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICB0eDEsXG4gICAgICAgIHR5MSxcbiAgICAgICAgdHgyLFxuICAgICAgICB0eTIsXG4gICAgICAgIHgxLFxuICAgICAgICB5MSxcbiAgICAgICAgeDIsXG4gICAgICAgIHkyLFxuICAgICAgICB3aWR0aDogbGluZVdpZHRoLFxuICAgICAgICBjb2xvcjogbGluZUNvbG9yLFxuICAgICAgICBib3JkZXJEYXNoLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICB0aWNrV2lkdGgsXG4gICAgICAgIHRpY2tDb2xvcixcbiAgICAgICAgdGlja0JvcmRlckRhc2gsXG4gICAgICAgIHRpY2tCb3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gdGlja3NMZW5ndGg7XG4gICAgdGhpcy5fYm9yZGVyVmFsdWUgPSBib3JkZXJWYWx1ZTtcbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7cG9zaXRpb24sIHRpY2tzOiBvcHRpb25UaWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGNvbnN0IHthbGlnbiwgY3Jvc3NBbGlnbiwgcGFkZGluZywgbWlycm9yfSA9IG9wdGlvblRpY2tzO1xuICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKTtcbiAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICBjb25zdCBoVGlja0FuZFBhZGRpbmcgPSBtaXJyb3IgPyAtcGFkZGluZyA6IHRpY2tBbmRQYWRkaW5nO1xuICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgbGV0IGksIGlsZW4sIHRpY2ssIGxhYmVsLCB4LCB5LCB0ZXh0QWxpZ24sIHBpeGVsLCBmb250LCBsaW5lSGVpZ2h0LCBsaW5lQ291bnQsIHRleHRPZmZzZXQ7XG4gICAgbGV0IHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgIHkgPSB0aGlzLmJvdHRvbSAtIGhUaWNrQW5kUGFkZGluZztcbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgeSA9IHRoaXMudG9wICsgaFRpY2tBbmRQYWRkaW5nO1xuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgeCA9IHJldC54O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGNvbnN0IHJldCA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpO1xuICAgICAgdGV4dEFsaWduID0gcmV0LnRleHRBbGlnbjtcbiAgICAgIHggPSByZXQueDtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICB5ID0gKChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyKSArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICB5ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICB9XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCA9ICgoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMikgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgeCA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpLnRleHRBbGlnbjtcbiAgICB9XG4gICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgbGFiZWwgPSB0aWNrLmxhYmVsO1xuICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBvcHRpb25UaWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpKSk7XG4gICAgICBwaXhlbCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKGkpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7XG4gICAgICBmb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgIGxpbmVIZWlnaHQgPSBmb250LmxpbmVIZWlnaHQ7XG4gICAgICBsaW5lQ291bnQgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsLmxlbmd0aCA6IDE7XG4gICAgICBjb25zdCBoYWxmQ291bnQgPSBsaW5lQ291bnQgLyAyO1xuICAgICAgY29uc3QgY29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yO1xuICAgICAgY29uc3Qgc3Ryb2tlV2lkdGggPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGg7XG4gICAgICBsZXQgdGlja1RleHRBbGlnbiA9IHRleHRBbGlnbjtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgeCA9IHBpeGVsO1xuICAgICAgICBpZiAodGV4dEFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICAgICAgaWYgKGkgPT09IGlsZW4gLSAxKSB7XG4gICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInIHx8IHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxpbmVDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInIHx8IHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsaW5lQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgdGV4dE9mZnNldCAqPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeSA9IHBpeGVsO1xuICAgICAgICB0ZXh0T2Zmc2V0ID0gKDEgLSBsaW5lQ291bnQpICogbGluZUhlaWdodCAvIDI7XG4gICAgICB9XG4gICAgICBsZXQgYmFja2Ryb3A7XG4gICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgY29uc3QgbGFiZWxQYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGxhYmVsU2l6ZXMuaGVpZ2h0c1tpXTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBsYWJlbFNpemVzLndpZHRoc1tpXTtcbiAgICAgICAgbGV0IHRvcCA9IHkgKyB0ZXh0T2Zmc2V0IC0gbGFiZWxQYWRkaW5nLnRvcDtcbiAgICAgICAgbGV0IGxlZnQgPSB4IC0gbGFiZWxQYWRkaW5nLmxlZnQ7XG4gICAgICAgIHN3aXRjaCAodGV4dEJhc2VsaW5lKSB7XG4gICAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgICAgdG9wIC09IGhlaWdodCAvIDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRleHRBbGlnbikge1xuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBiYWNrZHJvcCA9IHtcbiAgICAgICAgICBsZWZ0LFxuICAgICAgICAgIHRvcCxcbiAgICAgICAgICB3aWR0aDogd2lkdGggKyBsYWJlbFBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyBsYWJlbFBhZGRpbmcuaGVpZ2h0LFxuICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIHJvdGF0aW9uLFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgZm9udCxcbiAgICAgICAgY29sb3IsXG4gICAgICAgIHN0cm9rZUNvbG9yLFxuICAgICAgICBzdHJva2VXaWR0aCxcbiAgICAgICAgdGV4dE9mZnNldCxcbiAgICAgICAgdGV4dEFsaWduOiB0aWNrVGV4dEFsaWduLFxuICAgICAgICB0ZXh0QmFzZWxpbmUsXG4gICAgICAgIHRyYW5zbGF0aW9uOiBbeCwgeV0sXG4gICAgICAgIGJhY2tkcm9wLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpIHtcbiAgICBjb25zdCB7cG9zaXRpb24sIHRpY2tzfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICBpZiAocm90YXRpb24pIHtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH1cbiAgICBsZXQgYWxpZ24gPSAnY2VudGVyJztcbiAgICBpZiAodGlja3MuYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgIGFsaWduID0gJ2xlZnQnO1xuICAgIH0gZWxzZSBpZiAodGlja3MuYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICBhbGlnbiA9ICdyaWdodCc7XG4gICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgYWxpZ24gPSAnaW5uZXInO1xuICAgIH1cbiAgICByZXR1cm4gYWxpZ247XG4gIH1cbiAgX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpIHtcbiAgICBjb25zdCB7cG9zaXRpb24sIHRpY2tzOiB7Y3Jvc3NBbGlnbiwgbWlycm9yLCBwYWRkaW5nfX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICBjb25zdCB3aWRlc3QgPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICBsZXQgdGV4dEFsaWduO1xuICAgIGxldCB4O1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgIHggPSB0aGlzLnJpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggKz0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgeCArPSB3aWRlc3Q7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB0aGlzLnJpZ2h0IC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCAtPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgIHggPSB0aGlzLmxlZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgIHggPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggLT0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICB4IC09IHdpZGVzdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHRoaXMubGVmdCArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCArPSB3aWRlc3QgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgeCA9IHRoaXMucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICB9XG4gICAgcmV0dXJuIHt0ZXh0QWxpZ24sIHh9O1xuICB9XG4gIF9jb21wdXRlTGFiZWxBcmVhKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudGlja3MubWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIHt0b3A6IDAsIGxlZnQ6IHRoaXMubGVmdCwgYm90dG9tOiBjaGFydC5oZWlnaHQsIHJpZ2h0OiB0aGlzLnJpZ2h0fTtcbiAgICB9IGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICByZXR1cm4ge3RvcDogdGhpcy50b3AsIGxlZnQ6IDAsIGJvdHRvbTogdGhpcy5ib3R0b20sIHJpZ2h0OiBjaGFydC53aWR0aH07XG4gICAgfVxuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHtjdHgsIG9wdGlvbnM6IHtiYWNrZ3JvdW5kQ29sb3J9LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHR9ID0gdGhpcztcbiAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0TGluZVdpZHRoRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhZ3JpZC5kaXNwbGF5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGNvbnN0IGluZGV4ID0gdGlja3MuZmluZEluZGV4KHQgPT4gdC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBjb25zdCBvcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgcmV0dXJuIG9wdHMubGluZVdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBkcmF3R3JpZChjaGFydEFyZWEpIHtcbiAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl9ncmlkTGluZUl0ZW1zIHx8ICh0aGlzLl9ncmlkTGluZUl0ZW1zID0gdGhpcy5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgY29uc3QgZHJhd0xpbmUgPSAocDEsIHAyLCBzdHlsZSkgPT4ge1xuICAgICAgaWYgKCFzdHlsZS53aWR0aCB8fCAhc3R5bGUuY29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlLmNvbG9yO1xuICAgICAgY3R4LnNldExpbmVEYXNoKHN0eWxlLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gc3R5bGUuYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG4gICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBpZiAoZ3JpZC5kcmF3T25DaGFydEFyZWEpIHtcbiAgICAgICAgICBkcmF3TGluZShcbiAgICAgICAgICAgIHt4OiBpdGVtLngxLCB5OiBpdGVtLnkxfSxcbiAgICAgICAgICAgIHt4OiBpdGVtLngyLCB5OiBpdGVtLnkyfSxcbiAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncmlkLmRyYXdUaWNrcykge1xuICAgICAgICAgIGRyYXdMaW5lKFxuICAgICAgICAgICAge3g6IGl0ZW0udHgxLCB5OiBpdGVtLnR5MX0sXG4gICAgICAgICAgICB7eDogaXRlbS50eDIsIHk6IGl0ZW0udHkyfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29sb3I6IGl0ZW0udGlja0NvbG9yLFxuICAgICAgICAgICAgICB3aWR0aDogaXRlbS50aWNrV2lkdGgsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2g6IGl0ZW0udGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IGl0ZW0udGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXdCb3JkZXIoKSB7XG4gICAgY29uc3Qge2NoYXJ0LCBjdHgsIG9wdGlvbnM6IHtncmlkfX0gPSB0aGlzO1xuICAgIGNvbnN0IGJvcmRlck9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGF4aXNXaWR0aCA9IGdyaWQuZHJhd0JvcmRlciA/IGJvcmRlck9wdHMuYm9yZGVyV2lkdGggOiAwO1xuICAgIGlmICghYXhpc1dpZHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhc3RMaW5lV2lkdGggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KDApKS5saW5lV2lkdGg7XG4gICAgY29uc3QgYm9yZGVyVmFsdWUgPSB0aGlzLl9ib3JkZXJWYWx1ZTtcbiAgICBsZXQgeDEsIHgyLCB5MSwgeTI7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHgxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMubGVmdCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICB4MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgeTEgPSB5MiA9IGJvcmRlclZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB5MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnRvcCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICB5MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmJvdHRvbSwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgIHgxID0geDIgPSBib3JkZXJWYWx1ZTtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyT3B0cy5ib3JkZXJXaWR0aDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJPcHRzLmJvcmRlckNvbG9yO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGRyYXdMYWJlbHMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgaWYgKCFvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLl9jb21wdXRlTGFiZWxBcmVhKCk7XG4gICAgaWYgKGFyZWEpIHtcbiAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fbGFiZWxJdGVtcyB8fCAodGhpcy5fbGFiZWxJdGVtcyA9IHRoaXMuX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGNvbnN0IHRpY2tGb250ID0gaXRlbS5mb250O1xuICAgICAgY29uc3QgbGFiZWwgPSBpdGVtLmxhYmVsO1xuICAgICAgaWYgKGl0ZW0uYmFja2Ryb3ApIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGl0ZW0uYmFja2Ryb3AuY29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdChpdGVtLmJhY2tkcm9wLmxlZnQsIGl0ZW0uYmFja2Ryb3AudG9wLCBpdGVtLmJhY2tkcm9wLndpZHRoLCBpdGVtLmJhY2tkcm9wLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBsZXQgeSA9IGl0ZW0udGV4dE9mZnNldDtcbiAgICAgIHJlbmRlclRleHQoY3R4LCBsYWJlbCwgMCwgeSwgdGlja0ZvbnQsIGl0ZW0pO1xuICAgIH1cbiAgICBpZiAoYXJlYSkge1xuICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbiAgfVxuICBkcmF3VGl0bGUoKSB7XG4gICAgY29uc3Qge2N0eCwgb3B0aW9uczoge3Bvc2l0aW9uLCB0aXRsZSwgcmV2ZXJzZX19ID0gdGhpcztcbiAgICBpZiAoIXRpdGxlLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHRvRm9udCh0aXRsZS5mb250KTtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlLnBhZGRpbmcpO1xuICAgIGNvbnN0IGFsaWduID0gdGl0bGUuYWxpZ247XG4gICAgbGV0IG9mZnNldCA9IGZvbnQubGluZUhlaWdodCAvIDI7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBwb3NpdGlvbiA9PT0gJ2NlbnRlcicgfHwgaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBvZmZzZXQgKz0gcGFkZGluZy5ib3R0b207XG4gICAgICBpZiAoaXNBcnJheSh0aXRsZS50ZXh0KSkge1xuICAgICAgICBvZmZzZXQgKz0gZm9udC5saW5lSGVpZ2h0ICogKHRpdGxlLnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCArPSBwYWRkaW5nLnRvcDtcbiAgICB9XG4gICAgY29uc3Qge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259ID0gdGl0bGVBcmdzKHRoaXMsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKTtcbiAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGUudGV4dCwgMCwgMCwgZm9udCwge1xuICAgICAgY29sb3I6IHRpdGxlLmNvbG9yLFxuICAgICAgbWF4V2lkdGgsXG4gICAgICByb3RhdGlvbixcbiAgICAgIHRleHRBbGlnbjogdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpLFxuICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgIHRyYW5zbGF0aW9uOiBbdGl0bGVYLCB0aXRsZVldLFxuICAgIH0pO1xuICB9XG4gIGRyYXcoY2hhcnRBcmVhKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gIH1cbiAgX2xheWVycygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcbiAgICBjb25zdCBneiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZ3JpZCAmJiBvcHRzLmdyaWQueiwgLTEpO1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgdGhpcy5kcmF3ICE9PSBTY2FsZS5wcm90b3R5cGUuZHJhdykge1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHo6IHR6LFxuICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgICAgdGhpcy5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgIH1cbiAgICByZXR1cm4gW3tcbiAgICAgIHo6IGd6LFxuICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICB6OiBneiArIDEsXG4gICAgICBkcmF3OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHo6IHR6LFxuICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICAgIH1cbiAgICB9XTtcbiAgfVxuICBnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKSB7XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCBheGlzSUQgPSB0aGlzLmF4aXMgKyAnQXhpc0lEJztcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICBpZiAobWV0YVtheGlzSURdID09PSB0aGlzLmlkICYmICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGluZGV4KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgIHJldHVybiB0b0ZvbnQob3B0cy5mb250KTtcbiAgfVxuICBfbWF4RGlnaXRzKCkge1xuICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O1xuICAgIHJldHVybiAodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkgLyBmb250U2l6ZTtcbiAgfVxufVxuXG5jbGFzcyBUeXBlZFJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IodHlwZSwgc2NvcGUsIG92ZXJyaWRlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgIHRoaXMuaXRlbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIGlzRm9yVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZi5jYWxsKHRoaXMudHlwZS5wcm90b3R5cGUsIHR5cGUucHJvdG90eXBlKTtcbiAgfVxuICByZWdpc3RlcihpdGVtKSB7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gICAgbGV0IHBhcmVudFNjb3BlO1xuICAgIGlmIChpc0lDaGFydENvbXBvbmVudChwcm90bykpIHtcbiAgICAgIHBhcmVudFNjb3BlID0gdGhpcy5yZWdpc3Rlcihwcm90byk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlICsgJy4nICsgaWQ7XG4gICAgaWYgKCFpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiAnICsgaXRlbSk7XG4gICAgfVxuICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH1cbiAgICBpdGVtc1tpZF0gPSBpdGVtO1xuICAgIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKTtcbiAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgZGVmYXVsdHMub3ZlcnJpZGUoaXRlbS5pZCwgaXRlbS5vdmVycmlkZXMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cbiAgZ2V0KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNbaWRdO1xuICB9XG4gIHVucmVnaXN0ZXIoaXRlbSkge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgZGVsZXRlIGl0ZW1zW2lkXTtcbiAgICB9XG4gICAgaWYgKHNjb3BlICYmIGlkIGluIGRlZmF1bHRzW3Njb3BlXSkge1xuICAgICAgZGVsZXRlIGRlZmF1bHRzW3Njb3BlXVtpZF07XG4gICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICBkZWxldGUgb3ZlcnJpZGVzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKSB7XG4gIGNvbnN0IGl0ZW1EZWZhdWx0cyA9IG1lcmdlKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICBwYXJlbnRTY29wZSA/IGRlZmF1bHRzLmdldChwYXJlbnRTY29wZSkgOiB7fSxcbiAgICBkZWZhdWx0cy5nZXQoc2NvcGUpLFxuICAgIGl0ZW0uZGVmYXVsdHNcbiAgXSk7XG4gIGRlZmF1bHRzLnNldChzY29wZSwgaXRlbURlZmF1bHRzKTtcbiAgaWYgKGl0ZW0uZGVmYXVsdFJvdXRlcykge1xuICAgIHJvdXRlRGVmYXVsdHMoc2NvcGUsIGl0ZW0uZGVmYXVsdFJvdXRlcyk7XG4gIH1cbiAgaWYgKGl0ZW0uZGVzY3JpcHRvcnMpIHtcbiAgICBkZWZhdWx0cy5kZXNjcmliZShzY29wZSwgaXRlbS5kZXNjcmlwdG9ycyk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJvdXRlRGVmYXVsdHMoc2NvcGUsIHJvdXRlcykge1xuICBPYmplY3Qua2V5cyhyb3V0ZXMpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5UGFydHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHNvdXJjZU5hbWUgPSBwcm9wZXJ0eVBhcnRzLnBvcCgpO1xuICAgIGNvbnN0IHNvdXJjZVNjb3BlID0gW3Njb3BlXS5jb25jYXQocHJvcGVydHlQYXJ0cykuam9pbignLicpO1xuICAgIGNvbnN0IHBhcnRzID0gcm91dGVzW3Byb3BlcnR5XS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHRhcmdldE5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICBjb25zdCB0YXJnZXRTY29wZSA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICBkZWZhdWx0cy5yb3V0ZShzb3VyY2VTY29wZSwgc291cmNlTmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSB7XG4gIHJldHVybiAnaWQnIGluIHByb3RvICYmICdkZWZhdWx0cycgaW4gcHJvdG87XG59XG5cbmNsYXNzIFJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KERhdGFzZXRDb250cm9sbGVyLCAnZGF0YXNldHMnLCB0cnVlKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFR5cGVkUmVnaXN0cnkoRWxlbWVudCwgJ2VsZW1lbnRzJyk7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFR5cGVkUmVnaXN0cnkoT2JqZWN0LCAncGx1Z2lucycpO1xuICAgIHRoaXMuc2NhbGVzID0gbmV3IFR5cGVkUmVnaXN0cnkoU2NhbGUsICdzY2FsZXMnKTtcbiAgICB0aGlzLl90eXBlZFJlZ2lzdHJpZXMgPSBbdGhpcy5jb250cm9sbGVycywgdGhpcy5zY2FsZXMsIHRoaXMuZWxlbWVudHNdO1xuICB9XG4gIGFkZCguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzKTtcbiAgfVxuICByZW1vdmUoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzKTtcbiAgfVxuICBhZGRDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgfVxuICBhZGRFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgfVxuICBhZGRQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gIH1cbiAgYWRkU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgfVxuICBnZXRDb250cm9sbGVyKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5jb250cm9sbGVycywgJ2NvbnRyb2xsZXInKTtcbiAgfVxuICBnZXRFbGVtZW50KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5lbGVtZW50cywgJ2VsZW1lbnQnKTtcbiAgfVxuICBnZXRQbHVnaW4oaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnBsdWdpbnMsICdwbHVnaW4nKTtcbiAgfVxuICBnZXRTY2FsZShpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuc2NhbGVzLCAnc2NhbGUnKTtcbiAgfVxuICByZW1vdmVDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICB9XG4gIHJlbW92ZUVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gIH1cbiAgcmVtb3ZlUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gIH1cbiAgcmVtb3ZlU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICB9XG4gIF9lYWNoKG1ldGhvZCwgYXJncywgdHlwZWRSZWdpc3RyeSkge1xuICAgIFsuLi5hcmdzXS5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICBjb25zdCByZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShhcmcpO1xuICAgICAgaWYgKHR5cGVkUmVnaXN0cnkgfHwgcmVnLmlzRm9yVHlwZShhcmcpIHx8IChyZWcgPT09IHRoaXMucGx1Z2lucyAmJiBhcmcuaWQpKSB7XG4gICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCByZWcsIGFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYWNoKGFyZywgaXRlbSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbVJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGl0ZW0pO1xuICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCBpdGVtUmVnLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX2V4ZWMobWV0aG9kLCByZWdpc3RyeSwgY29tcG9uZW50KSB7XG4gICAgY29uc3QgY2FtZWxNZXRob2QgPSBfY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYmVmb3JlJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgcmVnaXN0cnlbbWV0aG9kXShjb21wb25lbnQpO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYWZ0ZXInICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgfVxuICBfZ2V0UmVnaXN0cnlGb3JUeXBlKHR5cGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3R5cGVkUmVnaXN0cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVnID0gdGhpcy5fdHlwZWRSZWdpc3RyaWVzW2ldO1xuICAgICAgaWYgKHJlZy5pc0ZvclR5cGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgfVxuICBfZ2V0KGlkLCB0eXBlZFJlZ2lzdHJ5LCB0eXBlKSB7XG4gICAgY29uc3QgaXRlbSA9IHR5cGVkUmVnaXN0cnkuZ2V0KGlkKTtcbiAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGlkICsgJ1wiIGlzIG5vdCBhIHJlZ2lzdGVyZWQgJyArIHR5cGUgKyAnLicpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxufVxudmFyIHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIFNjYXR0ZXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHtkYXRhOiBwb2ludHMgPSBbXX0gPSBtZXRhO1xuICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICBsZXQge3N0YXJ0LCBjb3VudH0gPSBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCk7XG4gICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgaWYgKF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkpIHtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgY29uc3Qge2RhdGFzZXQ6IGxpbmUsIF9kYXRhc2V0fSA9IG1ldGE7XG4gICAgICBsaW5lLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGFuaW1hdGVkOiAhYW5pbWF0aW9uc0Rpc2FibGVkLFxuICAgICAgICBvcHRpb25zXG4gICAgICB9LCBtb2RlKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gIH1cbiAgYWRkRWxlbWVudHMoKSB7XG4gICAgY29uc3Qge3Nob3dMaW5lfSA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIXRoaXMuZGF0YXNldEVsZW1lbnRUeXBlICYmIHNob3dMaW5lKSB7XG4gICAgICB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSA9IHJlZ2lzdHJ5LmdldEVsZW1lbnQoJ2xpbmUnKTtcbiAgICB9XG4gICAgc3VwZXIuYWRkRWxlbWVudHMoKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGUsIF9zdGFja2VkLCBfZGF0YXNldH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGZpcnN0T3B0cyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3Qge3NwYW5HYXBzLCBzZWdtZW50fSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgIGxldCBwcmV2UGFyc2VkID0gc3RhcnQgPiAwICYmIHRoaXMuZ2V0UGFyc2VkKHN0YXJ0IC0gMSk7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICBjb25zdCBudWxsRGF0YSA9IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZBeGlzXSk7XG4gICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10sIGkpO1xuICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCB8fCBudWxsRGF0YSA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiBwYXJzZWRbdkF4aXNdLCBpKTtcbiAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKSB8fCBudWxsRGF0YTtcbiAgICAgIHByb3BlcnRpZXMuc3RvcCA9IGkgPiAwICYmIChNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pKSA+IG1heEdhcExlbmd0aDtcbiAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICB9XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICB9XG4gICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICBsZXQgbWF4ID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZGF0YVtpXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKSkgLyAyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICB9XG4gICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhkYXRhLmxlbmd0aCAtIDEpKTtcbiAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgfVxufVxuU2NhdHRlckNvbnRyb2xsZXIuaWQgPSAnc2NhdHRlcic7XG5TY2F0dGVyQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBzaG93TGluZTogZmFsc2UsXG4gIGZpbGw6IGZhbHNlXG59O1xuU2NhdHRlckNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBpbnRlcmFjdGlvbjoge1xuICAgIG1vZGU6ICdwb2ludCdcbiAgfSxcbiAgcGx1Z2luczoge1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gJygnICsgaXRlbS5sYWJlbCArICcsICcgKyBpdGVtLmZvcm1hdHRlZFZhbHVlICsgJyknO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzY2FsZXM6IHtcbiAgICB4OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH0sXG4gICAgeToge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9XG4gIH1cbn07XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5Qb2xhckFyZWFDb250cm9sbGVyOiBQb2xhckFyZWFDb250cm9sbGVyLFxuUGllQ29udHJvbGxlcjogUGllQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuZnVuY3Rpb24gYWJzdHJhY3QoKSB7XG4gIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuY2xhc3MgRGF0ZUFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgfVxuICBpbml0KGNoYXJ0T3B0aW9ucykge31cbiAgZm9ybWF0cygpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBwYXJzZSh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgZm9ybWF0KHRpbWVzdGFtcCwgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgYWRkKHRpbWVzdGFtcCwgYW1vdW50LCB1bml0KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgZGlmZihhLCBiLCB1bml0KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgc3RhcnRPZih0aW1lc3RhbXAsIHVuaXQsIHdlZWtkYXkpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBlbmRPZih0aW1lc3RhbXAsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxufVxuRGF0ZUFkYXB0ZXIub3ZlcnJpZGUgPSBmdW5jdGlvbihtZW1iZXJzKSB7XG4gIE9iamVjdC5hc3NpZ24oRGF0ZUFkYXB0ZXIucHJvdG90eXBlLCBtZW1iZXJzKTtcbn07XG52YXIgYWRhcHRlcnMgPSB7XG4gIF9kYXRlOiBEYXRlQWRhcHRlclxufTtcblxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoKG1ldGFzZXQsIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpIHtcbiAgY29uc3Qge2NvbnRyb2xsZXIsIGRhdGEsIF9zb3J0ZWR9ID0gbWV0YXNldDtcbiAgY29uc3QgaVNjYWxlID0gY29udHJvbGxlci5fY2FjaGVkTWV0YS5pU2NhbGU7XG4gIGlmIChpU2NhbGUgJiYgYXhpcyA9PT0gaVNjYWxlLmF4aXMgJiYgYXhpcyAhPT0gJ3InICYmIF9zb3J0ZWQgJiYgZGF0YS5sZW5ndGgpIHtcbiAgICBjb25zdCBsb29rdXBNZXRob2QgPSBpU2NhbGUuX3JldmVyc2VQaXhlbHMgPyBfcmxvb2t1cEJ5S2V5IDogX2xvb2t1cEJ5S2V5O1xuICAgIGlmICghaW50ZXJzZWN0KSB7XG4gICAgICByZXR1cm4gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIuX3NoYXJlZE9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IGVsID0gZGF0YVswXTtcbiAgICAgIGNvbnN0IHJhbmdlID0gdHlwZW9mIGVsLmdldFJhbmdlID09PSAnZnVuY3Rpb24nICYmIGVsLmdldFJhbmdlKGF4aXMpO1xuICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlIC0gcmFuZ2UpO1xuICAgICAgICBjb25zdCBlbmQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgKyByYW5nZSk7XG4gICAgICAgIHJldHVybiB7bG86IHN0YXJ0LmxvLCBoaTogZW5kLmhpfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtsbzogMCwgaGk6IGRhdGEubGVuZ3RoIC0gMX07XG59XG5mdW5jdGlvbiBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBoYW5kbGVyLCBpbnRlcnNlY3QpIHtcbiAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bYXhpc107XG4gIGZvciAobGV0IGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY29uc3Qge2luZGV4LCBkYXRhfSA9IG1ldGFzZXRzW2ldO1xuICAgIGNvbnN0IHtsbywgaGl9ID0gYmluYXJ5U2VhcmNoKG1ldGFzZXRzW2ldLCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KTtcbiAgICBmb3IgKGxldCBqID0gbG87IGogPD0gaGk7ICsraikge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRhdGFbal07XG4gICAgICBpZiAoIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG4gIGNvbnN0IHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG4gIGNvbnN0IHVzZVkgPSBheGlzLmluZGV4T2YoJ3knKSAhPT0gLTE7XG4gIHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuICAgIGNvbnN0IGRlbHRhWCA9IHVzZVggPyBNYXRoLmFicyhwdDEueCAtIHB0Mi54KSA6IDA7XG4gICAgY29uc3QgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIGNvbnN0IGV2YWx1YXRpb25GdW5jID0gZnVuY3Rpb24oZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhX2lzUG9pbnRJbkFyZWEoZWxlbWVudCwgY2hhcnQuY2hhcnRBcmVhLCAwKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICBpdGVtcy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSk7XG4gICAgfVxuICB9O1xuICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYywgdHJ1ZSk7XG4gIHJldHVybiBpdGVtcztcbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgbGV0IGl0ZW1zID0gW107XG4gIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBjb25zdCB7c3RhcnRBbmdsZSwgZW5kQW5nbGV9ID0gZWxlbWVudC5nZXRQcm9wcyhbJ3N0YXJ0QW5nbGUnLCAnZW5kQW5nbGUnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3Qge2FuZ2xlfSA9IGdldEFuZ2xlRnJvbVBvaW50KGVsZW1lbnQsIHt4OiBwb3NpdGlvbi54LCB5OiBwb3NpdGlvbi55fSk7XG4gICAgaWYgKF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgIH1cbiAgfVxuICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gIHJldHVybiBpdGVtcztcbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICBsZXQgaXRlbXMgPSBbXTtcbiAgY29uc3QgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcyk7XG4gIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgZnVuY3Rpb24gZXZhbHVhdGlvbkZ1bmMoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgIGNvbnN0IGluUmFuZ2UgPSBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgaWYgKGludGVyc2VjdCAmJiAhaW5SYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHBvaW50SW5BcmVhID0gISFpbmNsdWRlSW52aXNpYmxlIHx8IGNoYXJ0LmlzUG9pbnRJbkFyZWEoY2VudGVyKTtcbiAgICBpZiAoIXBvaW50SW5BcmVhICYmICFpblJhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRpc3RhbmNlID0gZGlzdGFuY2VNZXRyaWMocG9zaXRpb24sIGNlbnRlcik7XG4gICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgIGl0ZW1zID0gW3tlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fV07XG4gICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPT09IG1pbkRpc3RhbmNlKSB7XG4gICAgICBpdGVtcy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSk7XG4gICAgfVxuICB9XG4gIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGF4aXMgPT09ICdyJyAmJiAhaW50ZXJzZWN0XG4gICAgPyBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKVxuICAgIDogZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbn1cbmZ1bmN0aW9uIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBjb25zdCByYW5nZU1ldGhvZCA9IGF4aXMgPT09ICd4JyA/ICdpblhSYW5nZScgOiAnaW5ZUmFuZ2UnO1xuICBsZXQgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcbiAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpID0+IHtcbiAgICBpZiAoZWxlbWVudFtyYW5nZU1ldGhvZF0ocG9zaXRpb25bYXhpc10sIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICBpdGVtcy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSk7XG4gICAgICBpbnRlcnNlY3RzSXRlbSA9IGludGVyc2VjdHNJdGVtIHx8IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gIH0pO1xuICBpZiAoaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59XG52YXIgSW50ZXJhY3Rpb24gPSB7XG4gIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyxcbiAgbW9kZXM6IHtcbiAgICBpbmRleChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3gnO1xuICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgIGNvbnN0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3RcbiAgICAgICAgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpXG4gICAgICAgIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5mb3JFYWNoKChtZXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbXNbMF0uaW5kZXg7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBtZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5za2lwKSB7XG4gICAgICAgICAgZWxlbWVudHMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4LCBpbmRleH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9LFxuICAgIGRhdGFzZXQoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgbGV0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3RcbiAgICAgICAgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIDpcbiAgICAgICAgZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZGF0YXNldEluZGV4ID0gaXRlbXNbMF0uZGF0YXNldEluZGV4O1xuICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5kYXRhO1xuICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpdGVtcy5wdXNoKHtlbGVtZW50OiBkYXRhW2ldLCBkYXRhc2V0SW5kZXgsIGluZGV4OiBpfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9LFxuICAgIHBvaW50KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgIHJldHVybiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgIH0sXG4gICAgbmVhcmVzdChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICByZXR1cm4gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgIH0sXG4gICAgeChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCAneCcsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIHkoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICByZXR1cm4gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgJ3knLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBTVEFUSUNfUE9TSVRJT05TID0gWydsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nXTtcbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG4gIHJldHVybiBhcnJheS5maWx0ZXIodiA9PiB2LnBvcyA9PT0gcG9zaXRpb24pO1xufVxuZnVuY3Rpb24gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGFycmF5LCBheGlzKSB7XG4gIHJldHVybiBhcnJheS5maWx0ZXIodiA9PiBTVEFUSUNfUE9TSVRJT05TLmluZGV4T2Yodi5wb3MpID09PSAtMSAmJiB2LmJveC5heGlzID09PSBheGlzKTtcbn1cbmZ1bmN0aW9uIHNvcnRCeVdlaWdodChhcnJheSwgcmV2ZXJzZSkge1xuICByZXR1cm4gYXJyYXkuc29ydCgoYSwgYikgPT4ge1xuICAgIGNvbnN0IHYwID0gcmV2ZXJzZSA/IGIgOiBhO1xuICAgIGNvbnN0IHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuICAgIHJldHVybiB2MC53ZWlnaHQgPT09IHYxLndlaWdodCA/XG4gICAgICB2MC5pbmRleCAtIHYxLmluZGV4IDpcbiAgICAgIHYwLndlaWdodCAtIHYxLndlaWdodDtcbiAgfSk7XG59XG5mdW5jdGlvbiB3cmFwQm94ZXMoYm94ZXMpIHtcbiAgY29uc3QgbGF5b3V0Qm94ZXMgPSBbXTtcbiAgbGV0IGksIGlsZW4sIGJveCwgcG9zLCBzdGFjaywgc3RhY2tXZWlnaHQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSAoYm94ZXMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGJveCA9IGJveGVzW2ldO1xuICAgICh7cG9zaXRpb246IHBvcywgb3B0aW9uczoge3N0YWNrLCBzdGFja1dlaWdodCA9IDF9fSA9IGJveCk7XG4gICAgbGF5b3V0Qm94ZXMucHVzaCh7XG4gICAgICBpbmRleDogaSxcbiAgICAgIGJveCxcbiAgICAgIHBvcyxcbiAgICAgIGhvcml6b250YWw6IGJveC5pc0hvcml6b250YWwoKSxcbiAgICAgIHdlaWdodDogYm94LndlaWdodCxcbiAgICAgIHN0YWNrOiBzdGFjayAmJiAocG9zICsgc3RhY2spLFxuICAgICAgc3RhY2tXZWlnaHRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbGF5b3V0Qm94ZXM7XG59XG5mdW5jdGlvbiBidWlsZFN0YWNrcyhsYXlvdXRzKSB7XG4gIGNvbnN0IHN0YWNrcyA9IHt9O1xuICBmb3IgKGNvbnN0IHdyYXAgb2YgbGF5b3V0cykge1xuICAgIGNvbnN0IHtzdGFjaywgcG9zLCBzdGFja1dlaWdodH0gPSB3cmFwO1xuICAgIGlmICghc3RhY2sgfHwgIVNUQVRJQ19QT1NJVElPTlMuaW5jbHVkZXMocG9zKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IF9zdGFjayA9IHN0YWNrc1tzdGFja10gfHwgKHN0YWNrc1tzdGFja10gPSB7Y291bnQ6IDAsIHBsYWNlZDogMCwgd2VpZ2h0OiAwLCBzaXplOiAwfSk7XG4gICAgX3N0YWNrLmNvdW50Kys7XG4gICAgX3N0YWNrLndlaWdodCArPSBzdGFja1dlaWdodDtcbiAgfVxuICByZXR1cm4gc3RhY2tzO1xufVxuZnVuY3Rpb24gc2V0TGF5b3V0RGltcyhsYXlvdXRzLCBwYXJhbXMpIHtcbiAgY29uc3Qgc3RhY2tzID0gYnVpbGRTdGFja3MobGF5b3V0cyk7XG4gIGNvbnN0IHt2Qm94TWF4V2lkdGgsIGhCb3hNYXhIZWlnaHR9ID0gcGFyYW1zO1xuICBsZXQgaSwgaWxlbiwgbGF5b3V0O1xuICBmb3IgKGkgPSAwLCBpbGVuID0gbGF5b3V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBsYXlvdXQgPSBsYXlvdXRzW2ldO1xuICAgIGNvbnN0IHtmdWxsU2l6ZX0gPSBsYXlvdXQuYm94O1xuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja107XG4gICAgY29uc3QgZmFjdG9yID0gc3RhY2sgJiYgbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0O1xuICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgbGF5b3V0LndpZHRoID0gZmFjdG9yID8gZmFjdG9yICogdkJveE1heFdpZHRoIDogZnVsbFNpemUgJiYgcGFyYW1zLmF2YWlsYWJsZVdpZHRoO1xuICAgICAgbGF5b3V0LmhlaWdodCA9IGhCb3hNYXhIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxheW91dC53aWR0aCA9IHZCb3hNYXhXaWR0aDtcbiAgICAgIGxheW91dC5oZWlnaHQgPSBmYWN0b3IgPyBmYWN0b3IgKiBoQm94TWF4SGVpZ2h0IDogZnVsbFNpemUgJiYgcGFyYW1zLmF2YWlsYWJsZUhlaWdodDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YWNrcztcbn1cbmZ1bmN0aW9uIGJ1aWxkTGF5b3V0Qm94ZXMoYm94ZXMpIHtcbiAgY29uc3QgbGF5b3V0Qm94ZXMgPSB3cmFwQm94ZXMoYm94ZXMpO1xuICBjb25zdCBmdWxsU2l6ZSA9IHNvcnRCeVdlaWdodChsYXlvdXRCb3hlcy5maWx0ZXIod3JhcCA9PiB3cmFwLmJveC5mdWxsU2l6ZSksIHRydWUpO1xuICBjb25zdCBsZWZ0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdsZWZ0JyksIHRydWUpO1xuICBjb25zdCByaWdodCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAncmlnaHQnKSk7XG4gIGNvbnN0IHRvcCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAndG9wJyksIHRydWUpO1xuICBjb25zdCBib3R0b20gPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2JvdHRvbScpKTtcbiAgY29uc3QgY2VudGVySG9yaXpvbnRhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3gnKTtcbiAgY29uc3QgY2VudGVyVmVydGljYWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd5Jyk7XG4gIHJldHVybiB7XG4gICAgZnVsbFNpemUsXG4gICAgbGVmdEFuZFRvcDogbGVmdC5jb25jYXQodG9wKSxcbiAgICByaWdodEFuZEJvdHRvbTogcmlnaHQuY29uY2F0KGNlbnRlclZlcnRpY2FsKS5jb25jYXQoYm90dG9tKS5jb25jYXQoY2VudGVySG9yaXpvbnRhbCksXG4gICAgY2hhcnRBcmVhOiBmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnY2hhcnRBcmVhJyksXG4gICAgdmVydGljYWw6IGxlZnQuY29uY2F0KHJpZ2h0KS5jb25jYXQoY2VudGVyVmVydGljYWwpLFxuICAgIGhvcml6b250YWw6IHRvcC5jb25jYXQoYm90dG9tKS5jb25jYXQoY2VudGVySG9yaXpvbnRhbClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgYSwgYikge1xuICByZXR1cm4gTWF0aC5tYXgobWF4UGFkZGluZ1thXSwgY2hhcnRBcmVhW2FdKSArIE1hdGgubWF4KG1heFBhZGRpbmdbYl0sIGNoYXJ0QXJlYVtiXSk7XG59XG5mdW5jdGlvbiB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveFBhZGRpbmcpIHtcbiAgbWF4UGFkZGluZy50b3AgPSBNYXRoLm1heChtYXhQYWRkaW5nLnRvcCwgYm94UGFkZGluZy50b3ApO1xuICBtYXhQYWRkaW5nLmxlZnQgPSBNYXRoLm1heChtYXhQYWRkaW5nLmxlZnQsIGJveFBhZGRpbmcubGVmdCk7XG4gIG1heFBhZGRpbmcuYm90dG9tID0gTWF0aC5tYXgobWF4UGFkZGluZy5ib3R0b20sIGJveFBhZGRpbmcuYm90dG9tKTtcbiAgbWF4UGFkZGluZy5yaWdodCA9IE1hdGgubWF4KG1heFBhZGRpbmcucmlnaHQsIGJveFBhZGRpbmcucmlnaHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpIHtcbiAgY29uc3Qge3BvcywgYm94fSA9IGxheW91dDtcbiAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICBpZiAoIWlzT2JqZWN0KHBvcykpIHtcbiAgICBpZiAobGF5b3V0LnNpemUpIHtcbiAgICAgIGNoYXJ0QXJlYVtwb3NdIC09IGxheW91dC5zaXplO1xuICAgIH1cbiAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdIHx8IHtzaXplOiAwLCBjb3VudDogMX07XG4gICAgc3RhY2suc2l6ZSA9IE1hdGgubWF4KHN0YWNrLnNpemUsIGxheW91dC5ob3Jpem9udGFsID8gYm94LmhlaWdodCA6IGJveC53aWR0aCk7XG4gICAgbGF5b3V0LnNpemUgPSBzdGFjay5zaXplIC8gc3RhY2suY291bnQ7XG4gICAgY2hhcnRBcmVhW3Bvc10gKz0gbGF5b3V0LnNpemU7XG4gIH1cbiAgaWYgKGJveC5nZXRQYWRkaW5nKSB7XG4gICAgdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3guZ2V0UGFkZGluZygpKTtcbiAgfVxuICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlcldpZHRoIC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAnbGVmdCcsICdyaWdodCcpKTtcbiAgY29uc3QgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAndG9wJywgJ2JvdHRvbScpKTtcbiAgY29uc3Qgd2lkdGhDaGFuZ2VkID0gbmV3V2lkdGggIT09IGNoYXJ0QXJlYS53O1xuICBjb25zdCBoZWlnaHRDaGFuZ2VkID0gbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaDtcbiAgY2hhcnRBcmVhLncgPSBuZXdXaWR0aDtcbiAgY2hhcnRBcmVhLmggPSBuZXdIZWlnaHQ7XG4gIHJldHVybiBsYXlvdXQuaG9yaXpvbnRhbFxuICAgID8ge3NhbWU6IHdpZHRoQ2hhbmdlZCwgb3RoZXI6IGhlaWdodENoYW5nZWR9XG4gICAgOiB7c2FtZTogaGVpZ2h0Q2hhbmdlZCwgb3RoZXI6IHdpZHRoQ2hhbmdlZH07XG59XG5mdW5jdGlvbiBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSkge1xuICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcyhwb3MpIHtcbiAgICBjb25zdCBjaGFuZ2UgPSBNYXRoLm1heChtYXhQYWRkaW5nW3Bvc10gLSBjaGFydEFyZWFbcG9zXSwgMCk7XG4gICAgY2hhcnRBcmVhW3Bvc10gKz0gY2hhbmdlO1xuICAgIHJldHVybiBjaGFuZ2U7XG4gIH1cbiAgY2hhcnRBcmVhLnkgKz0gdXBkYXRlUG9zKCd0b3AnKTtcbiAgY2hhcnRBcmVhLnggKz0gdXBkYXRlUG9zKCdsZWZ0Jyk7XG4gIHVwZGF0ZVBvcygncmlnaHQnKTtcbiAgdXBkYXRlUG9zKCdib3R0b20nKTtcbn1cbmZ1bmN0aW9uIGdldE1hcmdpbnMoaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSB7XG4gIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgZnVuY3Rpb24gbWFyZ2luRm9yUG9zaXRpb25zKHBvc2l0aW9ucykge1xuICAgIGNvbnN0IG1hcmdpbiA9IHtsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDB9O1xuICAgIHBvc2l0aW9ucy5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgIG1hcmdpbltwb3NdID0gTWF0aC5tYXgoY2hhcnRBcmVhW3Bvc10sIG1heFBhZGRpbmdbcG9zXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcmdpbjtcbiAgfVxuICByZXR1cm4gaG9yaXpvbnRhbFxuICAgID8gbWFyZ2luRm9yUG9zaXRpb25zKFsnbGVmdCcsICdyaWdodCddKVxuICAgIDogbWFyZ2luRm9yUG9zaXRpb25zKFsndG9wJywgJ2JvdHRvbSddKTtcbn1cbmZ1bmN0aW9uIGZpdEJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gIGNvbnN0IHJlZml0Qm94ZXMgPSBbXTtcbiAgbGV0IGksIGlsZW4sIGxheW91dCwgYm94LCByZWZpdCwgY2hhbmdlZDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGJveGVzLmxlbmd0aCwgcmVmaXQgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgbGF5b3V0ID0gYm94ZXNbaV07XG4gICAgYm94ID0gbGF5b3V0LmJveDtcbiAgICBib3gudXBkYXRlKFxuICAgICAgbGF5b3V0LndpZHRoIHx8IGNoYXJ0QXJlYS53LFxuICAgICAgbGF5b3V0LmhlaWdodCB8fCBjaGFydEFyZWEuaCxcbiAgICAgIGdldE1hcmdpbnMobGF5b3V0Lmhvcml6b250YWwsIGNoYXJ0QXJlYSlcbiAgICApO1xuICAgIGNvbnN0IHtzYW1lLCBvdGhlcn0gPSB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcyk7XG4gICAgcmVmaXQgfD0gc2FtZSAmJiByZWZpdEJveGVzLmxlbmd0aDtcbiAgICBjaGFuZ2VkID0gY2hhbmdlZCB8fCBvdGhlcjtcbiAgICBpZiAoIWJveC5mdWxsU2l6ZSkge1xuICAgICAgcmVmaXRCb3hlcy5wdXNoKGxheW91dCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWZpdCAmJiBmaXRCb3hlcyhyZWZpdEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB8fCBjaGFuZ2VkO1xufVxuZnVuY3Rpb24gc2V0Qm94RGltcyhib3gsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuICBib3gudG9wID0gdG9wO1xuICBib3gubGVmdCA9IGxlZnQ7XG4gIGJveC5yaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgYm94LmJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgYm94LndpZHRoID0gd2lkdGg7XG4gIGJveC5oZWlnaHQgPSBoZWlnaHQ7XG59XG5mdW5jdGlvbiBwbGFjZUJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gIGNvbnN0IHVzZXJQYWRkaW5nID0gcGFyYW1zLnBhZGRpbmc7XG4gIGxldCB7eCwgeX0gPSBjaGFydEFyZWE7XG4gIGZvciAoY29uc3QgbGF5b3V0IG9mIGJveGVzKSB7XG4gICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdIHx8IHtjb3VudDogMSwgcGxhY2VkOiAwLCB3ZWlnaHQ6IDF9O1xuICAgIGNvbnN0IHdlaWdodCA9IChsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQpIHx8IDE7XG4gICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICBjb25zdCB3aWR0aCA9IGNoYXJ0QXJlYS53ICogd2VpZ2h0O1xuICAgICAgY29uc3QgaGVpZ2h0ID0gc3RhY2suc2l6ZSB8fCBib3guaGVpZ2h0O1xuICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgIHkgPSBzdGFjay5zdGFydDtcbiAgICAgIH1cbiAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIHVzZXJQYWRkaW5nLmxlZnQsIHksIHBhcmFtcy5vdXRlcldpZHRoIC0gdXNlclBhZGRpbmcucmlnaHQgLSB1c2VyUGFkZGluZy5sZWZ0LCBoZWlnaHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIGNoYXJ0QXJlYS5sZWZ0ICsgc3RhY2sucGxhY2VkLCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnN0YXJ0ID0geTtcbiAgICAgIHN0YWNrLnBsYWNlZCArPSB3aWR0aDtcbiAgICAgIHkgPSBib3guYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBjaGFydEFyZWEuaCAqIHdlaWdodDtcbiAgICAgIGNvbnN0IHdpZHRoID0gc3RhY2suc2l6ZSB8fCBib3gud2lkdGg7XG4gICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgeCA9IHN0YWNrLnN0YXJ0O1xuICAgICAgfVxuICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgdXNlclBhZGRpbmcudG9wLCB3aWR0aCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gdXNlclBhZGRpbmcuYm90dG9tIC0gdXNlclBhZGRpbmcudG9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCB4LCBjaGFydEFyZWEudG9wICsgc3RhY2sucGxhY2VkLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnN0YXJ0ID0geDtcbiAgICAgIHN0YWNrLnBsYWNlZCArPSBoZWlnaHQ7XG4gICAgICB4ID0gYm94LnJpZ2h0O1xuICAgIH1cbiAgfVxuICBjaGFydEFyZWEueCA9IHg7XG4gIGNoYXJ0QXJlYS55ID0geTtcbn1cbmRlZmF1bHRzLnNldCgnbGF5b3V0Jywge1xuICBhdXRvUGFkZGluZzogdHJ1ZSxcbiAgcGFkZGluZzoge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9XG59KTtcbnZhciBsYXlvdXRzID0ge1xuICBhZGRCb3goY2hhcnQsIGl0ZW0pIHtcbiAgICBpZiAoIWNoYXJ0LmJveGVzKSB7XG4gICAgICBjaGFydC5ib3hlcyA9IFtdO1xuICAgIH1cbiAgICBpdGVtLmZ1bGxTaXplID0gaXRlbS5mdWxsU2l6ZSB8fCBmYWxzZTtcbiAgICBpdGVtLnBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbiB8fCAndG9wJztcbiAgICBpdGVtLndlaWdodCA9IGl0ZW0ud2VpZ2h0IHx8IDA7XG4gICAgaXRlbS5fbGF5ZXJzID0gaXRlbS5fbGF5ZXJzIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHo6IDAsXG4gICAgICAgIGRyYXcoY2hhcnRBcmVhKSB7XG4gICAgICAgICAgaXRlbS5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgIH07XG4gICAgY2hhcnQuYm94ZXMucHVzaChpdGVtKTtcbiAgfSxcbiAgcmVtb3ZlQm94KGNoYXJ0LCBsYXlvdXRJdGVtKSB7XG4gICAgY29uc3QgaW5kZXggPSBjaGFydC5ib3hlcyA/IGNoYXJ0LmJveGVzLmluZGV4T2YobGF5b3V0SXRlbSkgOiAtMTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjaGFydC5ib3hlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfSxcbiAgY29uZmlndXJlKGNoYXJ0LCBpdGVtLCBvcHRpb25zKSB7XG4gICAgaXRlbS5mdWxsU2l6ZSA9IG9wdGlvbnMuZnVsbFNpemU7XG4gICAgaXRlbS5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb247XG4gICAgaXRlbS53ZWlnaHQgPSBvcHRpb25zLndlaWdodDtcbiAgfSxcbiAgdXBkYXRlKGNoYXJ0LCB3aWR0aCwgaGVpZ2h0LCBtaW5QYWRkaW5nKSB7XG4gICAgaWYgKCFjaGFydCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKGNoYXJ0Lm9wdGlvbnMubGF5b3V0LnBhZGRpbmcpO1xuICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gTWF0aC5tYXgod2lkdGggLSBwYWRkaW5nLndpZHRoLCAwKTtcbiAgICBjb25zdCBhdmFpbGFibGVIZWlnaHQgPSBNYXRoLm1heChoZWlnaHQgLSBwYWRkaW5nLmhlaWdodCwgMCk7XG4gICAgY29uc3QgYm94ZXMgPSBidWlsZExheW91dEJveGVzKGNoYXJ0LmJveGVzKTtcbiAgICBjb25zdCB2ZXJ0aWNhbEJveGVzID0gYm94ZXMudmVydGljYWw7XG4gICAgY29uc3QgaG9yaXpvbnRhbEJveGVzID0gYm94ZXMuaG9yaXpvbnRhbDtcbiAgICBlYWNoKGNoYXJ0LmJveGVzLCBib3ggPT4ge1xuICAgICAgaWYgKHR5cGVvZiBib3guYmVmb3JlTGF5b3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGJveC5iZWZvcmVMYXlvdXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB2aXNpYmxlVmVydGljYWxCb3hDb3VudCA9IHZlcnRpY2FsQm94ZXMucmVkdWNlKCh0b3RhbCwgd3JhcCkgPT5cbiAgICAgIHdyYXAuYm94Lm9wdGlvbnMgJiYgd3JhcC5ib3gub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZSA/IHRvdGFsIDogdG90YWwgKyAxLCAwKSB8fCAxO1xuICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgb3V0ZXJXaWR0aDogd2lkdGgsXG4gICAgICBvdXRlckhlaWdodDogaGVpZ2h0LFxuICAgICAgcGFkZGluZyxcbiAgICAgIGF2YWlsYWJsZVdpZHRoLFxuICAgICAgYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgdkJveE1heFdpZHRoOiBhdmFpbGFibGVXaWR0aCAvIDIgLyB2aXNpYmxlVmVydGljYWxCb3hDb3VudCxcbiAgICAgIGhCb3hNYXhIZWlnaHQ6IGF2YWlsYWJsZUhlaWdodCAvIDJcbiAgICB9KTtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gT2JqZWN0LmFzc2lnbih7fSwgcGFkZGluZyk7XG4gICAgdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCB0b1BhZGRpbmcobWluUGFkZGluZykpO1xuICAgIGNvbnN0IGNoYXJ0QXJlYSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgbWF4UGFkZGluZyxcbiAgICAgIHc6IGF2YWlsYWJsZVdpZHRoLFxuICAgICAgaDogYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgeDogcGFkZGluZy5sZWZ0LFxuICAgICAgeTogcGFkZGluZy50b3BcbiAgICB9LCBwYWRkaW5nKTtcbiAgICBjb25zdCBzdGFja3MgPSBzZXRMYXlvdXREaW1zKHZlcnRpY2FsQm94ZXMuY29uY2F0KGhvcml6b250YWxCb3hlcyksIHBhcmFtcyk7XG4gICAgZml0Qm94ZXMoYm94ZXMuZnVsbFNpemUsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIGlmIChmaXRCb3hlcyhob3Jpem9udGFsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpKSB7XG4gICAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICB9XG4gICAgaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpO1xuICAgIHBsYWNlQm94ZXMoYm94ZXMubGVmdEFuZFRvcCwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgY2hhcnRBcmVhLnggKz0gY2hhcnRBcmVhLnc7XG4gICAgY2hhcnRBcmVhLnkgKz0gY2hhcnRBcmVhLmg7XG4gICAgcGxhY2VCb3hlcyhib3hlcy5yaWdodEFuZEJvdHRvbSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgY2hhcnQuY2hhcnRBcmVhID0ge1xuICAgICAgbGVmdDogY2hhcnRBcmVhLmxlZnQsXG4gICAgICB0b3A6IGNoYXJ0QXJlYS50b3AsXG4gICAgICByaWdodDogY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEudyxcbiAgICAgIGJvdHRvbTogY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5oLFxuICAgICAgaGVpZ2h0OiBjaGFydEFyZWEuaCxcbiAgICAgIHdpZHRoOiBjaGFydEFyZWEudyxcbiAgICB9O1xuICAgIGVhY2goYm94ZXMuY2hhcnRBcmVhLCAobGF5b3V0KSA9PiB7XG4gICAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgT2JqZWN0LmFzc2lnbihib3gsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICBib3gudXBkYXRlKGNoYXJ0QXJlYS53LCBjaGFydEFyZWEuaCwge2xlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5jbGFzcyBCYXNlUGxhdGZvcm0ge1xuICBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7fVxuICByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuICByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiAgZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBnZXRNYXhpbXVtU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggfHwgZWxlbWVudC53aWR0aCk7XG4gICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0O1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodDogTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyBNYXRoLmZsb29yKHdpZHRoIC8gYXNwZWN0UmF0aW8pIDogaGVpZ2h0KVxuICAgIH07XG4gIH1cbiAgaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gIH1cbn1cblxuY2xhc3MgQmFzaWNQbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gIGFjcXVpcmVDb250ZXh0KGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSAmJiBpdGVtLmdldENvbnRleHQgJiYgaXRlbS5nZXRDb250ZXh0KCcyZCcpIHx8IG51bGw7XG4gIH1cbiAgdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZy5vcHRpb25zLmFuaW1hdGlvbiA9IGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IEVYUEFORE9fS0VZID0gJyRjaGFydGpzJztcbmNvbnN0IEVWRU5UX1RZUEVTID0ge1xuICB0b3VjaHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgdG91Y2htb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgdG91Y2hlbmQ6ICdtb3VzZXVwJyxcbiAgcG9pbnRlcmVudGVyOiAnbW91c2VlbnRlcicsXG4gIHBvaW50ZXJkb3duOiAnbW91c2Vkb3duJyxcbiAgcG9pbnRlcm1vdmU6ICdtb3VzZW1vdmUnLFxuICBwb2ludGVydXA6ICdtb3VzZXVwJyxcbiAgcG9pbnRlcmxlYXZlOiAnbW91c2VvdXQnLFxuICBwb2ludGVyb3V0OiAnbW91c2VvdXQnXG59O1xuY29uc3QgaXNOdWxsT3JFbXB0eSA9IHZhbHVlID0+IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAnJztcbmZ1bmN0aW9uIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICBjb25zdCBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgY29uc3QgcmVuZGVySGVpZ2h0ID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG4gIGNvbnN0IHJlbmRlcldpZHRoID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgY2FudmFzW0VYUEFORE9fS0VZXSA9IHtcbiAgICBpbml0aWFsOiB7XG4gICAgICBoZWlnaHQ6IHJlbmRlckhlaWdodCxcbiAgICAgIHdpZHRoOiByZW5kZXJXaWR0aCxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGRpc3BsYXk6IHN0eWxlLmRpc3BsYXksXG4gICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0LFxuICAgICAgICB3aWR0aDogc3R5bGUud2lkdGhcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHN0eWxlLmRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5IHx8ICdibG9jayc7XG4gIHN0eWxlLmJveFNpemluZyA9IHN0eWxlLmJveFNpemluZyB8fCAnYm9yZGVyLWJveCc7XG4gIGlmIChpc051bGxPckVtcHR5KHJlbmRlcldpZHRoKSkge1xuICAgIGNvbnN0IGRpc3BsYXlXaWR0aCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICd3aWR0aCcpO1xuICAgIGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FudmFzLndpZHRoID0gZGlzcGxheVdpZHRoO1xuICAgIH1cbiAgfVxuICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJIZWlnaHQpKSB7XG4gICAgaWYgKGNhbnZhcy5zdHlsZS5oZWlnaHQgPT09ICcnKSB7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLndpZHRoIC8gKGFzcGVjdFJhdGlvIHx8IDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkaXNwbGF5SGVpZ2h0ID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ2hlaWdodCcpO1xuICAgICAgaWYgKGRpc3BsYXlIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZGlzcGxheUhlaWdodDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbnZhcztcbn1cbmNvbnN0IGV2ZW50TGlzdGVuZXJPcHRpb25zID0gc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA/IHtwYXNzaXZlOiB0cnVlfSA6IGZhbHNlO1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY2hhcnQuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpIHtcbiAgY29uc3QgdHlwZSA9IEVWRU5UX1RZUEVTW2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGU7XG4gIGNvbnN0IHt4LCB5fSA9IGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIGNoYXJ0LFxuICAgIG5hdGl2ZTogZXZlbnQsXG4gICAgeDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG4gICAgeTogeSAhPT0gdW5kZWZpbmVkID8geSA6IG51bGwsXG4gIH07XG59XG5mdW5jdGlvbiBub2RlTGlzdENvbnRhaW5zKG5vZGVMaXN0LCBjYW52YXMpIHtcbiAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVMaXN0KSB7XG4gICAgaWYgKG5vZGUgPT09IGNhbnZhcyB8fCBub2RlLmNvbnRhaW5zKGNhbnZhcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQXR0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgIH1cbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURldGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9KTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5jb25zdCBkcnBMaXN0ZW5pbmdDaGFydHMgPSBuZXcgTWFwKCk7XG5sZXQgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IDA7XG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gIGlmIChkcHIgPT09IG9sZERldmljZVBpeGVsUmF0aW8pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IGRwcjtcbiAgZHJwTGlzdGVuaW5nQ2hhcnRzLmZvckVhY2goKHJlc2l6ZSwgY2hhcnQpID0+IHtcbiAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IGRwcikge1xuICAgICAgcmVzaXplKCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpIHtcbiAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gIH1cbiAgZHJwTGlzdGVuaW5nQ2hhcnRzLnNldChjaGFydCwgcmVzaXplKTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpIHtcbiAgZHJwTGlzdGVuaW5nQ2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNpemVPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBjb250YWluZXIgPSBjYW52YXMgJiYgX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmVzaXplID0gdGhyb3R0bGVkKCh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgY29uc3QgdyA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgICBsaXN0ZW5lcih3aWR0aCwgaGVpZ2h0KTtcbiAgICBpZiAodyA8IGNvbnRhaW5lci5jbGllbnRXaWR0aCkge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG4gIH0sIHdpbmRvdyk7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1swXTtcbiAgICBjb25zdCB3aWR0aCA9IGVudHJ5LmNvbnRlbnRSZWN0LndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodDtcbiAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKTtcbiAgbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VPYnNlcnZlcihjaGFydCwgdHlwZSwgb2JzZXJ2ZXIpIHtcbiAgaWYgKG9ic2VydmVyKSB7XG4gICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9XG4gIGlmICh0eXBlID09PSAncmVzaXplJykge1xuICAgIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQcm94eUFuZExpc3RlbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBwcm94eSA9IHRocm90dGxlZCgoZXZlbnQpID0+IHtcbiAgICBpZiAoY2hhcnQuY3R4ICE9PSBudWxsKSB7XG4gICAgICBsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG4gICAgfVxuICB9LCBjaGFydCwgKGFyZ3MpID0+IHtcbiAgICBjb25zdCBldmVudCA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIFtldmVudCwgZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WV07XG4gIH0pO1xuICBhZGRMaXN0ZW5lcihjYW52YXMsIHR5cGUsIHByb3h5KTtcbiAgcmV0dXJuIHByb3h5O1xufVxuY2xhc3MgRG9tUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuICBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCAmJiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcyA9PT0gY2FudmFzKSB7XG4gICAgICBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pO1xuICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICBpZiAoIWNhbnZhc1tFWFBBTkRPX0tFWV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcbiAgICBbJ2hlaWdodCcsICd3aWR0aCddLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcbiAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICBjYW52YXMucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc3R5bGUgPSBpbml0aWFsLnN0eWxlIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNhbnZhcy5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgICB9KTtcbiAgICBjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgZGVsZXRlIGNhbnZhc1tFWFBBTkRPX0tFWV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpO1xuICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICBhdHRhY2g6IGNyZWF0ZUF0dGFjaE9ic2VydmVyLFxuICAgICAgZGV0YWNoOiBjcmVhdGVEZXRhY2hPYnNlcnZlcixcbiAgICAgIHJlc2l6ZTogY3JlYXRlUmVzaXplT2JzZXJ2ZXJcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCBjcmVhdGVQcm94eUFuZExpc3RlbjtcbiAgICBwcm94aWVzW3R5cGVdID0gaGFuZGxlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpIHtcbiAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgIGNvbnN0IHByb3h5ID0gcHJveGllc1t0eXBlXTtcbiAgICBpZiAoIXByb3h5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgYXR0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICBkZXRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgIHJlc2l6ZTogcmVsZWFzZU9ic2VydmVyXG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgcmVtb3ZlTGlzdGVuZXI7XG4gICAgaGFuZGxlcihjaGFydCwgdHlwZSwgcHJveHkpO1xuICAgIHByb3hpZXNbdHlwZV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gIH1cbiAgZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgIHJldHVybiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgfVxuICBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgcmV0dXJuICEhKGNvbnRhaW5lciAmJiBjb250YWluZXIuaXNDb25uZWN0ZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZXRlY3RQbGF0Zm9ybShjYW52YXMpIHtcbiAgaWYgKCFfaXNEb21TdXBwb3J0ZWQoKSB8fCAodHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKSkge1xuICAgIHJldHVybiBCYXNpY1BsYXRmb3JtO1xuICB9XG4gIHJldHVybiBEb21QbGF0Zm9ybTtcbn1cblxuY2xhc3MgUGx1Z2luU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2luaXQgPSBbXTtcbiAgfVxuICBub3RpZnkoY2hhcnQsIGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgIGlmIChob29rID09PSAnYmVmb3JlSW5pdCcpIHtcbiAgICAgIHRoaXMuX2luaXQgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgdHJ1ZSk7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICdpbnN0YWxsJyk7XG4gICAgfVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZmlsdGVyID8gdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpLmZpbHRlcihmaWx0ZXIpIDogdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpO1xuICAgIGlmIChob29rID09PSAnYWZ0ZXJEZXN0cm95Jykge1xuICAgICAgdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ3VuaW5zdGFsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKSB7XG4gICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgZm9yIChjb25zdCBkZXNjcmlwdG9yIG9mIGRlc2NyaXB0b3JzKSB7XG4gICAgICBjb25zdCBwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcbiAgICAgIGNvbnN0IG1ldGhvZCA9IHBsdWdpbltob29rXTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFtjaGFydCwgYXJncywgZGVzY3JpcHRvci5vcHRpb25zXTtcbiAgICAgIGlmIChjYWxsYmFjayhtZXRob2QsIHBhcmFtcywgcGx1Z2luKSA9PT0gZmFsc2UgJiYgYXJncy5jYW5jZWxhYmxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaW52YWxpZGF0ZSgpIHtcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYodGhpcy5fY2FjaGUpKSB7XG4gICAgICB0aGlzLl9vbGRDYWNoZSA9IHRoaXMuX2NhY2hlO1xuICAgICAgdGhpcy5fY2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIF9kZXNjcmlwdG9ycyhjaGFydCkge1xuICAgIGlmICh0aGlzLl9jYWNoZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgIHRoaXMuX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCk7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICB9XG4gIF9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgYWxsKSB7XG4gICAgY29uc3QgY29uZmlnID0gY2hhcnQgJiYgY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB2YWx1ZU9yRGVmYXVsdChjb25maWcub3B0aW9ucyAmJiBjb25maWcub3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gICAgY29uc3QgcGx1Z2lucyA9IGFsbFBsdWdpbnMoY29uZmlnKTtcbiAgICByZXR1cm4gb3B0aW9ucyA9PT0gZmFsc2UgJiYgIWFsbCA/IFtdIDogY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHBsdWdpbnMsIG9wdGlvbnMsIGFsbCk7XG4gIH1cbiAgX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCkge1xuICAgIGNvbnN0IHByZXZpb3VzRGVzY3JpcHRvcnMgPSB0aGlzLl9vbGRDYWNoZSB8fCBbXTtcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlO1xuICAgIGNvbnN0IGRpZmYgPSAoYSwgYikgPT4gYS5maWx0ZXIoeCA9PiAhYi5zb21lKHkgPT4geC5wbHVnaW4uaWQgPT09IHkucGx1Z2luLmlkKSk7XG4gICAgdGhpcy5fbm90aWZ5KGRpZmYocHJldmlvdXNEZXNjcmlwdG9ycywgZGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0b3AnKTtcbiAgICB0aGlzLl9ub3RpZnkoZGlmZihkZXNjcmlwdG9ycywgcHJldmlvdXNEZXNjcmlwdG9ycyksIGNoYXJ0LCAnc3RhcnQnKTtcbiAgfVxufVxuZnVuY3Rpb24gYWxsUGx1Z2lucyhjb25maWcpIHtcbiAgY29uc3QgbG9jYWxJZHMgPSB7fTtcbiAgY29uc3QgcGx1Z2lucyA9IFtdO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVnaXN0cnkucGx1Z2lucy5pdGVtcyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHBsdWdpbnMucHVzaChyZWdpc3RyeS5nZXRQbHVnaW4oa2V5c1tpXSkpO1xuICB9XG4gIGNvbnN0IGxvY2FsID0gY29uZmlnLnBsdWdpbnMgfHwgW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwbHVnaW4gPSBsb2NhbFtpXTtcbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgIGxvY2FsSWRzW3BsdWdpbi5pZF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge3BsdWdpbnMsIGxvY2FsSWRzfTtcbn1cbmZ1bmN0aW9uIGdldE9wdHMob3B0aW9ucywgYWxsKSB7XG4gIGlmICghYWxsICYmIG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwge3BsdWdpbnMsIGxvY2FsSWRzfSwgb3B0aW9ucywgYWxsKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBjb250ZXh0ID0gY2hhcnQuZ2V0Q29udGV4dCgpO1xuICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBwbHVnaW5zKSB7XG4gICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgY29uc3Qgb3B0cyA9IGdldE9wdHMob3B0aW9uc1tpZF0sIGFsbCk7XG4gICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh7XG4gICAgICBwbHVnaW4sXG4gICAgICBvcHRpb25zOiBwbHVnaW5PcHRzKGNoYXJ0LmNvbmZpZywge3BsdWdpbiwgbG9jYWw6IGxvY2FsSWRzW2lkXX0sIG9wdHMsIGNvbnRleHQpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBsdWdpbk9wdHMoY29uZmlnLCB7cGx1Z2luLCBsb2NhbH0sIG9wdHMsIGNvbnRleHQpIHtcbiAgY29uc3Qga2V5cyA9IGNvbmZpZy5wbHVnaW5TY29wZUtleXMocGx1Z2luKTtcbiAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3BlcyhvcHRzLCBrZXlzKTtcbiAgaWYgKGxvY2FsICYmIHBsdWdpbi5kZWZhdWx0cykge1xuICAgIHNjb3Blcy5wdXNoKHBsdWdpbi5kZWZhdWx0cyk7XG4gIH1cbiAgcmV0dXJuIGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIFsnJ10sIHtcbiAgICBzY3JpcHRhYmxlOiBmYWxzZSxcbiAgICBpbmRleGFibGU6IGZhbHNlLFxuICAgIGFsbEtleXM6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4QXhpcyh0eXBlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9O1xuICBjb25zdCBkYXRhc2V0T3B0aW9ucyA9IChvcHRpb25zLmRhdGFzZXRzIHx8IHt9KVt0eXBlXSB8fCB7fTtcbiAgcmV0dXJuIGRhdGFzZXRPcHRpb25zLmluZGV4QXhpcyB8fCBvcHRpb25zLmluZGV4QXhpcyB8fCBkYXRhc2V0RGVmYXVsdHMuaW5kZXhBeGlzIHx8ICd4Jztcbn1cbmZ1bmN0aW9uIGdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQoaWQsIGluZGV4QXhpcykge1xuICBsZXQgYXhpcyA9IGlkO1xuICBpZiAoaWQgPT09ICdfaW5kZXhfJykge1xuICAgIGF4aXMgPSBpbmRleEF4aXM7XG4gIH0gZWxzZSBpZiAoaWQgPT09ICdfdmFsdWVfJykge1xuICAgIGF4aXMgPSBpbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbiAgfVxuICByZXR1cm4gYXhpcztcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMoYXhpcywgaW5kZXhBeGlzKSB7XG4gIHJldHVybiBheGlzID09PSBpbmRleEF4aXMgPyAnX2luZGV4XycgOiAnX3ZhbHVlXyc7XG59XG5mdW5jdGlvbiBheGlzRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgcmV0dXJuICd4JztcbiAgfVxuICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHJldHVybiAneSc7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucykge1xuICBpZiAoaWQgPT09ICd4JyB8fCBpZCA9PT0gJ3knKSB7XG4gICAgcmV0dXJuIGlkO1xuICB9XG4gIHJldHVybiBzY2FsZU9wdGlvbnMuYXhpcyB8fCBheGlzRnJvbVBvc2l0aW9uKHNjYWxlT3B0aW9ucy5wb3NpdGlvbikgfHwgaWQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucykge1xuICBjb25zdCBjaGFydERlZmF1bHRzID0gb3ZlcnJpZGVzW2NvbmZpZy50eXBlXSB8fCB7c2NhbGVzOiB7fX07XG4gIGNvbnN0IGNvbmZpZ1NjYWxlcyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICBjb25zdCBjaGFydEluZGV4QXhpcyA9IGdldEluZGV4QXhpcyhjb25maWcudHlwZSwgb3B0aW9ucyk7XG4gIGNvbnN0IGZpcnN0SURzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgc2NhbGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgT2JqZWN0LmtleXMoY29uZmlnU2NhbGVzKS5mb3JFYWNoKGlkID0+IHtcbiAgICBjb25zdCBzY2FsZUNvbmYgPSBjb25maWdTY2FsZXNbaWRdO1xuICAgIGlmICghaXNPYmplY3Qoc2NhbGVDb25mKSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgc2NhbGUgY29uZmlndXJhdGlvbiBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgfVxuICAgIGlmIChzY2FsZUNvbmYuX3Byb3h5KSB7XG4gICAgICByZXR1cm4gY29uc29sZS53YXJuKGBJZ25vcmluZyByZXNvbHZlciBwYXNzZWQgYXMgb3B0aW9ucyBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgfVxuICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZUNvbmYpO1xuICAgIGNvbnN0IGRlZmF1bHRJZCA9IGdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMoYXhpcywgY2hhcnRJbmRleEF4aXMpO1xuICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBjaGFydERlZmF1bHRzLnNjYWxlcyB8fCB7fTtcbiAgICBmaXJzdElEc1theGlzXSA9IGZpcnN0SURzW2F4aXNdIHx8IGlkO1xuICAgIHNjYWxlc1tpZF0gPSBtZXJnZUlmKE9iamVjdC5jcmVhdGUobnVsbCksIFt7YXhpc30sIHNjYWxlQ29uZiwgZGVmYXVsdFNjYWxlT3B0aW9uc1theGlzXSwgZGVmYXVsdFNjYWxlT3B0aW9uc1tkZWZhdWx0SWRdXSk7XG4gIH0pO1xuICBjb25maWcuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKGRhdGFzZXQgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgY29uZmlnLnR5cGU7XG4gICAgY29uc3QgaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IG92ZXJyaWRlc1t0eXBlXSB8fCB7fTtcbiAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gZGF0YXNldERlZmF1bHRzLnNjYWxlcyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2NhbGVPcHRpb25zKS5mb3JFYWNoKGRlZmF1bHRJRCA9PiB7XG4gICAgICBjb25zdCBheGlzID0gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChkZWZhdWx0SUQsIGluZGV4QXhpcyk7XG4gICAgICBjb25zdCBpZCA9IGRhdGFzZXRbYXhpcyArICdBeGlzSUQnXSB8fCBmaXJzdElEc1theGlzXSB8fCBheGlzO1xuICAgICAgc2NhbGVzW2lkXSA9IHNjYWxlc1tpZF0gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIG1lcmdlSWYoc2NhbGVzW2lkXSwgW3theGlzfSwgY29uZmlnU2NhbGVzW2lkXSwgZGVmYXVsdFNjYWxlT3B0aW9uc1tkZWZhdWx0SURdXSk7XG4gICAgfSk7XG4gIH0pO1xuICBPYmplY3Qua2V5cyhzY2FsZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCBzY2FsZSA9IHNjYWxlc1trZXldO1xuICAgIG1lcmdlSWYoc2NhbGUsIFtkZWZhdWx0cy5zY2FsZXNbc2NhbGUudHlwZV0sIGRlZmF1bHRzLnNjYWxlXSk7XG4gIH0pO1xuICByZXR1cm4gc2NhbGVzO1xufVxuZnVuY3Rpb24gaW5pdE9wdGlvbnMoY29uZmlnKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjb25maWcub3B0aW9ucyB8fCAoY29uZmlnLm9wdGlvbnMgPSB7fSk7XG4gIG9wdGlvbnMucGx1Z2lucyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMucGx1Z2lucywge30pO1xuICBvcHRpb25zLnNjYWxlcyA9IG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGluaXREYXRhKGRhdGEpIHtcbiAgZGF0YSA9IGRhdGEgfHwge307XG4gIGRhdGEuZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzIHx8IFtdO1xuICBkYXRhLmxhYmVscyA9IGRhdGEubGFiZWxzIHx8IFtdO1xuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGluaXRDb25maWcoY29uZmlnKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgY29uZmlnLmRhdGEgPSBpbml0RGF0YShjb25maWcuZGF0YSk7XG4gIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gIHJldHVybiBjb25maWc7XG59XG5jb25zdCBrZXlDYWNoZSA9IG5ldyBNYXAoKTtcbmNvbnN0IGtleXNDYWNoZWQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBjYWNoZWRLZXlzKGNhY2hlS2V5LCBnZW5lcmF0ZSkge1xuICBsZXQga2V5cyA9IGtleUNhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSBnZW5lcmF0ZSgpO1xuICAgIGtleUNhY2hlLnNldChjYWNoZUtleSwga2V5cyk7XG4gICAga2V5c0NhY2hlZC5hZGQoa2V5cyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5jb25zdCBhZGRJZkZvdW5kID0gKHNldCwgb2JqLCBrZXkpID0+IHtcbiAgY29uc3Qgb3B0cyA9IHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpO1xuICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2V0LmFkZChvcHRzKTtcbiAgfVxufTtcbmNsYXNzIENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IGluaXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9zY29wZUNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUgPSBuZXcgTWFwKCk7XG4gIH1cbiAgZ2V0IHBsYXRmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcucGxhdGZvcm07XG4gIH1cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy50eXBlO1xuICB9XG4gIHNldCB0eXBlKHR5cGUpIHtcbiAgICB0aGlzLl9jb25maWcudHlwZSA9IHR5cGU7XG4gIH1cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kYXRhO1xuICB9XG4gIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLl9jb25maWcuZGF0YSA9IGluaXREYXRhKGRhdGEpO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcub3B0aW9ucztcbiAgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5fY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIGdldCBwbHVnaW5zKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcucGx1Z2lucztcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5fY29uZmlnO1xuICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gIH1cbiAgY2xlYXJDYWNoZSgpIHtcbiAgICB0aGlzLl9zY29wZUNhY2hlLmNsZWFyKCk7XG4gICAgdGhpcy5fcmVzb2x2ZXJDYWNoZS5jbGVhcigpO1xuICB9XG4gIGRhdGFzZXRTY29wZUtleXMoZGF0YXNldFR5cGUpIHtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhkYXRhc2V0VHlwZSxcbiAgICAgICgpID0+IFtbXG4gICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICcnXG4gICAgICBdXSk7XG4gIH1cbiAgZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgdHJhbnNpdGlvbikge1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9uLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgKCkgPT4gW1xuICAgICAgICBbXG4gICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICAgIGB0cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YCxcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICAgJydcbiAgICAgICAgXVxuICAgICAgXSk7XG4gIH1cbiAgZGF0YXNldEVsZW1lbnRTY29wZUtleXMoZGF0YXNldFR5cGUsIGVsZW1lbnRUeXBlKSB7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7ZGF0YXNldFR5cGV9LSR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICgpID0+IFtbXG4gICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS5lbGVtZW50cy4ke2VsZW1lbnRUeXBlfWAsXG4gICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgIGBlbGVtZW50cy4ke2VsZW1lbnRUeXBlfWAsXG4gICAgICAgICcnXG4gICAgICBdXSk7XG4gIH1cbiAgcGx1Z2luU2NvcGVLZXlzKHBsdWdpbikge1xuICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLnR5cGU7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7dHlwZX0tcGx1Z2luLSR7aWR9YCxcbiAgICAgICgpID0+IFtbXG4gICAgICAgIGBwbHVnaW5zLiR7aWR9YCxcbiAgICAgICAgLi4ucGx1Z2luLmFkZGl0aW9uYWxPcHRpb25TY29wZXMgfHwgW10sXG4gICAgICBdXSk7XG4gIH1cbiAgX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpIHtcbiAgICBjb25zdCBfc2NvcGVDYWNoZSA9IHRoaXMuX3Njb3BlQ2FjaGU7XG4gICAgbGV0IGNhY2hlID0gX3Njb3BlQ2FjaGUuZ2V0KG1haW5TY29wZSk7XG4gICAgaWYgKCFjYWNoZSB8fCByZXNldENhY2hlKSB7XG4gICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIF9zY29wZUNhY2hlLnNldChtYWluU2NvcGUsIGNhY2hlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG4gIGdldE9wdGlvblNjb3BlcyhtYWluU2NvcGUsIGtleUxpc3RzLCByZXNldENhY2hlKSB7XG4gICAgY29uc3Qge29wdGlvbnMsIHR5cGV9ID0gdGhpcztcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXlMaXN0cyk7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3Qgc2NvcGVzID0gbmV3IFNldCgpO1xuICAgIGtleUxpc3RzLmZvckVhY2goa2V5cyA9PiB7XG4gICAgICBpZiAobWFpblNjb3BlKSB7XG4gICAgICAgIHNjb3Blcy5hZGQobWFpblNjb3BlKTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgbWFpblNjb3BlLCBrZXkpKTtcbiAgICAgIH1cbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIG9wdGlvbnMsIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3Blcywgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LCBrZXkpKTtcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIGRlZmF1bHRzLCBrZXkpKTtcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIGRlc2NyaXB0b3JzLCBrZXkpKTtcbiAgICB9KTtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmZyb20oc2NvcGVzKTtcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICBhcnJheS5wdXNoKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIH1cbiAgICBpZiAoa2V5c0NhY2hlZC5oYXMoa2V5TGlzdHMpKSB7XG4gICAgICBjYWNoZS5zZXQoa2V5TGlzdHMsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIGNoYXJ0T3B0aW9uU2NvcGVzKCkge1xuICAgIGNvbnN0IHtvcHRpb25zLCB0eXBlfSA9IHRoaXM7XG4gICAgcmV0dXJuIFtcbiAgICAgIG9wdGlvbnMsXG4gICAgICBvdmVycmlkZXNbdHlwZV0gfHwge30sXG4gICAgICBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fSxcbiAgICAgIHt0eXBlfSxcbiAgICAgIGRlZmF1bHRzLFxuICAgICAgZGVzY3JpcHRvcnNcbiAgICBdO1xuICB9XG4gIHJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMgPSBbJyddKSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyRzaGFyZWQ6IHRydWV9O1xuICAgIGNvbnN0IHtyZXNvbHZlciwgc3ViUHJlZml4ZXN9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgbGV0IG9wdGlvbnMgPSByZXNvbHZlcjtcbiAgICBpZiAobmVlZENvbnRleHQocmVzb2x2ZXIsIG5hbWVzKSkge1xuICAgICAgcmVzdWx0LiRzaGFyZWQgPSBmYWxzZTtcbiAgICAgIGNvbnRleHQgPSBpc0Z1bmN0aW9uKGNvbnRleHQpID8gY29udGV4dCgpIDogY29udGV4dDtcbiAgICAgIGNvbnN0IHN1YlJlc29sdmVyID0gdGhpcy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHN1YlByZWZpeGVzKTtcbiAgICAgIG9wdGlvbnMgPSBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgc3ViUmVzb2x2ZXIpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFsnJ10sIGRlc2NyaXB0b3JEZWZhdWx0cykge1xuICAgIGNvbnN0IHtyZXNvbHZlcn0gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICByZXR1cm4gaXNPYmplY3QoY29udGV4dClcbiAgICAgID8gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHVuZGVmaW5lZCwgZGVzY3JpcHRvckRlZmF1bHRzKVxuICAgICAgOiByZXNvbHZlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZXIocmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcykge1xuICBsZXQgY2FjaGUgPSByZXNvbHZlckNhY2hlLmdldChzY29wZXMpO1xuICBpZiAoIWNhY2hlKSB7XG4gICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgcmVzb2x2ZXJDYWNoZS5zZXQoc2NvcGVzLCBjYWNoZSk7XG4gIH1cbiAgY29uc3QgY2FjaGVLZXkgPSBwcmVmaXhlcy5qb2luKCk7XG4gIGxldCBjYWNoZWQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoIWNhY2hlZCkge1xuICAgIGNvbnN0IHJlc29sdmVyID0gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMpO1xuICAgIGNhY2hlZCA9IHtcbiAgICAgIHJlc29sdmVyLFxuICAgICAgc3ViUHJlZml4ZXM6IHByZWZpeGVzLmZpbHRlcihwID0+ICFwLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2hvdmVyJykpXG4gICAgfTtcbiAgICBjYWNoZS5zZXQoY2FjaGVLZXksIGNhY2hlZCk7XG4gIH1cbiAgcmV0dXJuIGNhY2hlZDtcbn1cbmNvbnN0IGhhc0Z1bmN0aW9uID0gdmFsdWUgPT4gaXNPYmplY3QodmFsdWUpXG4gICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKS5yZWR1Y2UoKGFjYywga2V5KSA9PiBhY2MgfHwgaXNGdW5jdGlvbih2YWx1ZVtrZXldKSwgZmFsc2UpO1xuZnVuY3Rpb24gbmVlZENvbnRleHQocHJveHksIG5hbWVzKSB7XG4gIGNvbnN0IHtpc1NjcmlwdGFibGUsIGlzSW5kZXhhYmxlfSA9IF9kZXNjcmlwdG9ycyhwcm94eSk7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcykge1xuICAgIGNvbnN0IHNjcmlwdGFibGUgPSBpc1NjcmlwdGFibGUocHJvcCk7XG4gICAgY29uc3QgaW5kZXhhYmxlID0gaXNJbmRleGFibGUocHJvcCk7XG4gICAgY29uc3QgdmFsdWUgPSAoaW5kZXhhYmxlIHx8IHNjcmlwdGFibGUpICYmIHByb3h5W3Byb3BdO1xuICAgIGlmICgoc2NyaXB0YWJsZSAmJiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaGFzRnVuY3Rpb24odmFsdWUpKSlcbiAgICAgIHx8IChpbmRleGFibGUgJiYgaXNBcnJheSh2YWx1ZSkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiMy45LjFcIjtcblxuY29uc3QgS05PV05fUE9TSVRJT05TID0gWyd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAnY2hhcnRBcmVhJ107XG5mdW5jdGlvbiBwb3NpdGlvbklzSG9yaXpvbnRhbChwb3NpdGlvbiwgYXhpcykge1xuICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCAoS05PV05fUE9TSVRJT05TLmluZGV4T2YocG9zaXRpb24pID09PSAtMSAmJiBheGlzID09PSAneCcpO1xufVxuZnVuY3Rpb24gY29tcGFyZTJMZXZlbChsMSwgbDIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYVtsMV0gPT09IGJbbDFdXG4gICAgICA/IGFbbDJdIC0gYltsMl1cbiAgICAgIDogYVtsMV0gLSBiW2wxXTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uc0NvbXBsZXRlKGNvbnRleHQpIHtcbiAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyUmVuZGVyJyk7XG4gIGNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vbkNvbXBsZXRlLCBbY29udGV4dF0sIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoY29udGV4dCkge1xuICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsIFtjb250ZXh0XSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gZ2V0Q2FudmFzKGl0ZW0pIHtcbiAgaWYgKF9pc0RvbVN1cHBvcnRlZCgpICYmIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgIGl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtKTtcbiAgfSBlbHNlIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoKSB7XG4gICAgaXRlbSA9IGl0ZW1bMF07XG4gIH1cbiAgaWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcbiAgICBpdGVtID0gaXRlbS5jYW52YXM7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5jb25zdCBpbnN0YW5jZXMgPSB7fTtcbmNvbnN0IGdldENoYXJ0ID0gKGtleSkgPT4ge1xuICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoa2V5KTtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoaW5zdGFuY2VzKS5maWx0ZXIoKGMpID0+IGMuY2FudmFzID09PSBjYW52YXMpLnBvcCgpO1xufTtcbmZ1bmN0aW9uIG1vdmVOdW1lcmljS2V5cyhvYmosIHN0YXJ0LCBtb3ZlKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3QgaW50S2V5ID0gK2tleTtcbiAgICBpZiAoaW50S2V5ID49IHN0YXJ0KSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgaWYgKG1vdmUgPiAwIHx8IGludEtleSA+IHN0YXJ0KSB7XG4gICAgICAgIG9ialtpbnRLZXkgKyBtb3ZlXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIGxhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spIHtcbiAgaWYgKCFpbkNoYXJ0QXJlYSB8fCBlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoaXNDbGljaykge1xuICAgIHJldHVybiBsYXN0RXZlbnQ7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5jbGFzcyBDaGFydCB7XG4gIGNvbnN0cnVjdG9yKGl0ZW0sIHVzZXJDb25maWcpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZyA9IG5ldyBDb25maWcodXNlckNvbmZpZyk7XG4gICAgY29uc3QgaW5pdGlhbENhbnZhcyA9IGdldENhbnZhcyhpdGVtKTtcbiAgICBjb25zdCBleGlzdGluZ0NoYXJ0ID0gZ2V0Q2hhcnQoaW5pdGlhbENhbnZhcyk7XG4gICAgaWYgKGV4aXN0aW5nQ2hhcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NhbnZhcyBpcyBhbHJlYWR5IGluIHVzZS4gQ2hhcnQgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5pZCArICdcXCcnICtcblx0XHRcdFx0JyBtdXN0IGJlIGRlc3Ryb3llZCBiZWZvcmUgdGhlIGNhbnZhcyB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmNhbnZhcy5pZCArICdcXCcgY2FuIGJlIHJldXNlZC4nXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgdGhpcy5wbGF0Zm9ybSA9IG5ldyAoY29uZmlnLnBsYXRmb3JtIHx8IF9kZXRlY3RQbGF0Zm9ybShpbml0aWFsQ2FudmFzKSkoKTtcbiAgICB0aGlzLnBsYXRmb3JtLnVwZGF0ZUNvbmZpZyhjb25maWcpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBsYXRmb3JtLmFjcXVpcmVDb250ZXh0KGluaXRpYWxDYW52YXMsIG9wdGlvbnMuYXNwZWN0UmF0aW8pO1xuICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQgJiYgY29udGV4dC5jYW52YXM7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzICYmIGNhbnZhcy5oZWlnaHQ7XG4gICAgY29uc3Qgd2lkdGggPSBjYW52YXMgJiYgY2FudmFzLndpZHRoO1xuICAgIHRoaXMuaWQgPSB1aWQoKTtcbiAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICB0aGlzLl9tZXRhc2V0cyA9IFtdO1xuICAgIHRoaXMuX3N0YWNrcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJveGVzID0gW107XG4gICAgdGhpcy5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoYXJ0QXJlYSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICB0aGlzLl9sYXN0RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IFtdO1xuICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgdGhpcy5fcGx1Z2lucyA9IG5ldyBQbHVnaW5TZXJ2aWNlKCk7XG4gICAgdGhpcy4kcHJveGllcyA9IHt9O1xuICAgIHRoaXMuX2hpZGRlbkluZGljZXMgPSB7fTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZG9SZXNpemUgPSBkZWJvdW5jZShtb2RlID0+IHRoaXMudXBkYXRlKG1vZGUpLCBvcHRpb25zLnJlc2l6ZURlbGF5IHx8IDApO1xuICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcbiAgICBpZiAoIWNvbnRleHQgfHwgIWNhbnZhcykge1xuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ2NvbXBsZXRlJywgb25BbmltYXRpb25zQ29tcGxldGUpO1xuICAgIGFuaW1hdG9yLmxpc3Rlbih0aGlzLCAncHJvZ3Jlc3MnLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcbiAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG4gIGdldCBhc3BlY3RSYXRpbygpIHtcbiAgICBjb25zdCB7b3B0aW9uczoge2FzcGVjdFJhdGlvLCBtYWludGFpbkFzcGVjdFJhdGlvfSwgd2lkdGgsIGhlaWdodCwgX2FzcGVjdFJhdGlvfSA9IHRoaXM7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKGFzcGVjdFJhdGlvKSkge1xuICAgICAgcmV0dXJuIGFzcGVjdFJhdGlvO1xuICAgIH1cbiAgICBpZiAobWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiBfYXNwZWN0UmF0aW8pIHtcbiAgICAgIHJldHVybiBfYXNwZWN0UmF0aW87XG4gICAgfVxuICAgIHJldHVybiBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG4gIH1cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmRhdGE7XG4gIH1cbiAgc2V0IGRhdGEoZGF0YSkge1xuICAgIHRoaXMuY29uZmlnLmRhdGEgPSBkYXRhO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBfaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUluaXQnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldGluYVNjYWxlKHRoaXMsIHRoaXMub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICB9XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbGVhcigpIHtcbiAgICBjbGVhckNhbnZhcyh0aGlzLmNhbnZhcywgdGhpcy5jdHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN0b3AoKSB7XG4gICAgYW5pbWF0b3Iuc3RvcCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIGlmICghYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0ge3dpZHRoLCBoZWlnaHR9O1xuICAgIH1cbiAgfVxuICBfcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gb3B0aW9ucy5tYWludGFpbkFzcGVjdFJhdGlvICYmIHRoaXMuYXNwZWN0UmF0aW87XG4gICAgY29uc3QgbmV3U2l6ZSA9IHRoaXMucGxhdGZvcm0uZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgY29uc3QgbmV3UmF0aW8gPSBvcHRpb25zLmRldmljZVBpeGVsUmF0aW8gfHwgdGhpcy5wbGF0Zm9ybS5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgY29uc3QgbW9kZSA9IHRoaXMud2lkdGggPyAncmVzaXplJyA6ICdhdHRhY2gnO1xuICAgIHRoaXMud2lkdGggPSBuZXdTaXplLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gbmV3U2l6ZS5oZWlnaHQ7XG4gICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIGlmICghcmV0aW5hU2NhbGUodGhpcywgbmV3UmF0aW8sIHRydWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygncmVzaXplJywge3NpemU6IG5ld1NpemV9KTtcbiAgICBjYWxsYmFjayhvcHRpb25zLm9uUmVzaXplLCBbdGhpcywgbmV3U2l6ZV0sIHRoaXMpO1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICBpZiAodGhpcy5fZG9SZXNpemUobW9kZSkpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZW5zdXJlU2NhbGVzSGF2ZUlEcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNjYWxlc09wdGlvbnMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgICBlYWNoKHNjYWxlc09wdGlvbnMsIChheGlzT3B0aW9ucywgYXhpc0lEKSA9PiB7XG4gICAgICBheGlzT3B0aW9ucy5pZCA9IGF4aXNJRDtcbiAgICB9KTtcbiAgfVxuICBidWlsZE9yVXBkYXRlU2NhbGVzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2NhbGVPcHRzID0gb3B0aW9ucy5zY2FsZXM7XG4gICAgY29uc3Qgc2NhbGVzID0gdGhpcy5zY2FsZXM7XG4gICAgY29uc3QgdXBkYXRlZCA9IE9iamVjdC5rZXlzKHNjYWxlcykucmVkdWNlKChvYmosIGlkKSA9PiB7XG4gICAgICBvYmpbaWRdID0gZmFsc2U7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sIHt9KTtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBpZiAoc2NhbGVPcHRzKSB7XG4gICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChcbiAgICAgICAgT2JqZWN0LmtleXMoc2NhbGVPcHRzKS5tYXAoKGlkKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gc2NhbGVPcHRzW2lkXTtcbiAgICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgICAgICBjb25zdCBpc1JhZGlhbCA9IGF4aXMgPT09ICdyJztcbiAgICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBheGlzID09PSAneCc7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHNjYWxlT3B0aW9ucyxcbiAgICAgICAgICAgIGRwb3NpdGlvbjogaXNSYWRpYWwgPyAnY2hhcnRBcmVhJyA6IGlzSG9yaXpvbnRhbCA/ICdib3R0b20nIDogJ2xlZnQnLFxuICAgICAgICAgICAgZHR5cGU6IGlzUmFkaWFsID8gJ3JhZGlhbExpbmVhcicgOiBpc0hvcml6b250YWwgPyAnY2F0ZWdvcnknIDogJ2xpbmVhcidcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgZWFjaChpdGVtcywgKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IGl0ZW0ub3B0aW9ucztcbiAgICAgIGNvbnN0IGlkID0gc2NhbGVPcHRpb25zLmlkO1xuICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICBjb25zdCBzY2FsZVR5cGUgPSB2YWx1ZU9yRGVmYXVsdChzY2FsZU9wdGlvbnMudHlwZSwgaXRlbS5kdHlwZSk7XG4gICAgICBpZiAoc2NhbGVPcHRpb25zLnBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb25Jc0hvcml6b250YWwoc2NhbGVPcHRpb25zLnBvc2l0aW9uLCBheGlzKSAhPT0gcG9zaXRpb25Jc0hvcml6b250YWwoaXRlbS5kcG9zaXRpb24pKSB7XG4gICAgICAgIHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgIGlmIChpZCBpbiBzY2FsZXMgJiYgc2NhbGVzW2lkXS50eXBlID09PSBzY2FsZVR5cGUpIHtcbiAgICAgICAgc2NhbGUgPSBzY2FsZXNbaWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NhbGVDbGFzcyA9IHJlZ2lzdHJ5LmdldFNjYWxlKHNjYWxlVHlwZSk7XG4gICAgICAgIHNjYWxlID0gbmV3IHNjYWxlQ2xhc3Moe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHR5cGU6IHNjYWxlVHlwZSxcbiAgICAgICAgICBjdHg6IHRoaXMuY3R4LFxuICAgICAgICAgIGNoYXJ0OiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICBzY2FsZXNbc2NhbGUuaWRdID0gc2NhbGU7XG4gICAgICB9XG4gICAgICBzY2FsZS5pbml0KHNjYWxlT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgZWFjaCh1cGRhdGVkLCAoaGFzVXBkYXRlZCwgaWQpID0+IHtcbiAgICAgIGlmICghaGFzVXBkYXRlZCkge1xuICAgICAgICBkZWxldGUgc2NhbGVzW2lkXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBlYWNoKHNjYWxlcywgKHNjYWxlKSA9PiB7XG4gICAgICBsYXlvdXRzLmNvbmZpZ3VyZSh0aGlzLCBzY2FsZSwgc2NhbGUub3B0aW9ucyk7XG4gICAgICBsYXlvdXRzLmFkZEJveCh0aGlzLCBzY2FsZSk7XG4gICAgfSk7XG4gIH1cbiAgX3VwZGF0ZU1ldGFzZXRzKCkge1xuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgY29uc3QgbnVtRGF0YSA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgY29uc3QgbnVtTWV0YSA9IG1ldGFzZXRzLmxlbmd0aDtcbiAgICBtZXRhc2V0cy5zb3J0KChhLCBiKSA9PiBhLmluZGV4IC0gYi5pbmRleCk7XG4gICAgaWYgKG51bU1ldGEgPiBudW1EYXRhKSB7XG4gICAgICBmb3IgKGxldCBpID0gbnVtRGF0YTsgaSA8IG51bU1ldGE7ICsraSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICB9XG4gICAgICBtZXRhc2V0cy5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgIH1cbiAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IG1ldGFzZXRzLnNsaWNlKDApLnNvcnQoY29tcGFyZTJMZXZlbCgnb3JkZXInLCAnaW5kZXgnKSk7XG4gIH1cbiAgX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCkge1xuICAgIGNvbnN0IHtfbWV0YXNldHM6IG1ldGFzZXRzLCBkYXRhOiB7ZGF0YXNldHN9fSA9IHRoaXM7XG4gICAgaWYgKG1ldGFzZXRzLmxlbmd0aCA+IGRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgZGVsZXRlIHRoaXMuX3N0YWNrcztcbiAgICB9XG4gICAgbWV0YXNldHMuZm9yRWFjaCgobWV0YSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChkYXRhc2V0cy5maWx0ZXIoeCA9PiB4ID09PSBtZXRhLl9kYXRhc2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKSB7XG4gICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSBbXTtcbiAgICBjb25zdCBkYXRhc2V0cyA9IHRoaXMuZGF0YS5kYXRhc2V0cztcbiAgICBsZXQgaSwgaWxlbjtcbiAgICB0aGlzLl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGRhdGFzZXQgPSBkYXRhc2V0c1tpXTtcbiAgICAgIGxldCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIGNvbnN0IHR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgdGhpcy5jb25maWcudHlwZTtcbiAgICAgIGlmIChtZXRhLnR5cGUgJiYgbWV0YS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICB9XG4gICAgICBtZXRhLnR5cGUgPSB0eXBlO1xuICAgICAgbWV0YS5pbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIG1ldGEub3JkZXIgPSBkYXRhc2V0Lm9yZGVyIHx8IDA7XG4gICAgICBtZXRhLmluZGV4ID0gaTtcbiAgICAgIG1ldGEubGFiZWwgPSAnJyArIGRhdGFzZXQubGFiZWw7XG4gICAgICBtZXRhLnZpc2libGUgPSB0aGlzLmlzRGF0YXNldFZpc2libGUoaSk7XG4gICAgICBpZiAobWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgIG1ldGEuY29udHJvbGxlci51cGRhdGVJbmRleChpKTtcbiAgICAgICAgbWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IENvbnRyb2xsZXJDbGFzcyA9IHJlZ2lzdHJ5LmdldENvbnRyb2xsZXIodHlwZSk7XG4gICAgICAgIGNvbnN0IHtkYXRhc2V0RWxlbWVudFR5cGUsIGRhdGFFbGVtZW50VHlwZX0gPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihDb250cm9sbGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFFbGVtZW50VHlwZSksXG4gICAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBkYXRhc2V0RWxlbWVudFR5cGUgJiYgcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhc2V0RWxlbWVudFR5cGUpXG4gICAgICAgIH0pO1xuICAgICAgICBtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMsIGkpO1xuICAgICAgICBuZXdDb250cm9sbGVycy5wdXNoKG1ldGEuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZU1ldGFzZXRzKCk7XG4gICAgcmV0dXJuIG5ld0NvbnRyb2xsZXJzO1xuICB9XG4gIF9yZXNldEVsZW1lbnRzKCkge1xuICAgIGVhY2godGhpcy5kYXRhLmRhdGFzZXRzLCAoZGF0YXNldCwgZGF0YXNldEluZGV4KSA9PiB7XG4gICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5yZXNldCgpO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudHMoKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2V0Jyk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICBjb25maWcudXBkYXRlKCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoY29uZmlnLmNoYXJ0T3B0aW9uU2NvcGVzKCksIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBhbmltc0Rpc2FibGVkID0gdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gIW9wdGlvbnMuYW5pbWF0aW9uO1xuICAgIHRoaXMuX3VwZGF0ZVNjYWxlcygpO1xuICAgIHRoaXMuX2NoZWNrRXZlbnRCaW5kaW5ncygpO1xuICAgIHRoaXMuX3VwZGF0ZUhpZGRlbkluZGljZXMoKTtcbiAgICB0aGlzLl9wbHVnaW5zLmludmFsaWRhdGUoKTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVVcGRhdGUnLCB7bW9kZSwgY2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IHRoaXMuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFbGVtZW50c1VwZGF0ZScpO1xuICAgIGxldCBtaW5QYWRkaW5nID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IHtjb250cm9sbGVyfSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBjb25zdCByZXNldCA9ICFhbmltc0Rpc2FibGVkICYmIG5ld0NvbnRyb2xsZXJzLmluZGV4T2YoY29udHJvbGxlcikgPT09IC0xO1xuICAgICAgY29udHJvbGxlci5idWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXQpO1xuICAgICAgbWluUGFkZGluZyA9IE1hdGgubWF4KCtjb250cm9sbGVyLmdldE1heE92ZXJmbG93KCksIG1pblBhZGRpbmcpO1xuICAgIH1cbiAgICBtaW5QYWRkaW5nID0gdGhpcy5fbWluUGFkZGluZyA9IG9wdGlvbnMubGF5b3V0LmF1dG9QYWRkaW5nID8gbWluUGFkZGluZyA6IDA7XG4gICAgdGhpcy5fdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpO1xuICAgIGlmICghYW5pbXNEaXNhYmxlZCkge1xuICAgICAgZWFjaChuZXdDb250cm9sbGVycywgKGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZURhdGFzZXRzKG1vZGUpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJVcGRhdGUnLCB7bW9kZX0pO1xuICAgIHRoaXMuX2xheWVycy5zb3J0KGNvbXBhcmUyTGV2ZWwoJ3onLCAnX2lkeCcpKTtcbiAgICBjb25zdCB7X2FjdGl2ZSwgX2xhc3RFdmVudH0gPSB0aGlzO1xuICAgIGlmIChfbGFzdEV2ZW50KSB7XG4gICAgICB0aGlzLl9ldmVudEhhbmRsZXIoX2xhc3RFdmVudCwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChfYWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoX2FjdGl2ZSwgX2FjdGl2ZSwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgX3VwZGF0ZVNjYWxlcygpIHtcbiAgICBlYWNoKHRoaXMuc2NhbGVzLCAoc2NhbGUpID0+IHtcbiAgICAgIGxheW91dHMucmVtb3ZlQm94KHRoaXMsIHNjYWxlKTtcbiAgICB9KTtcbiAgICB0aGlzLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcbiAgICB0aGlzLmJ1aWxkT3JVcGRhdGVTY2FsZXMoKTtcbiAgfVxuICBfY2hlY2tFdmVudEJpbmRpbmdzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgZXhpc3RpbmdFdmVudHMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuX2xpc3RlbmVycykpO1xuICAgIGNvbnN0IG5ld0V2ZW50cyA9IG5ldyBTZXQob3B0aW9ucy5ldmVudHMpO1xuICAgIGlmICghc2V0c0VxdWFsKGV4aXN0aW5nRXZlbnRzLCBuZXdFdmVudHMpIHx8ICEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyAhPT0gb3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgfVxuICB9XG4gIF91cGRhdGVIaWRkZW5JbmRpY2VzKCkge1xuICAgIGNvbnN0IHtfaGlkZGVuSW5kaWNlc30gPSB0aGlzO1xuICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB8fCBbXTtcbiAgICBmb3IgKGNvbnN0IHttZXRob2QsIHN0YXJ0LCBjb3VudH0gb2YgY2hhbmdlcykge1xuICAgICAgY29uc3QgbW92ZSA9IG1ldGhvZCA9PT0gJ19yZW1vdmVFbGVtZW50cycgPyAtY291bnQgOiBjb3VudDtcbiAgICAgIG1vdmVOdW1lcmljS2V5cyhfaGlkZGVuSW5kaWNlcywgc3RhcnQsIG1vdmUpO1xuICAgIH1cbiAgfVxuICBfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkge1xuICAgIGNvbnN0IF9kYXRhQ2hhbmdlcyA9IHRoaXMuX2RhdGFDaGFuZ2VzO1xuICAgIGlmICghX2RhdGFDaGFuZ2VzIHx8ICFfZGF0YUNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgY29uc3QgZGF0YXNldENvdW50ID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICBjb25zdCBtYWtlU2V0ID0gKGlkeCkgPT4gbmV3IFNldChcbiAgICAgIF9kYXRhQ2hhbmdlc1xuICAgICAgICAuZmlsdGVyKGMgPT4gY1swXSA9PT0gaWR4KVxuICAgICAgICAubWFwKChjLCBpKSA9PiBpICsgJywnICsgYy5zcGxpY2UoMSkuam9pbignLCcpKVxuICAgICk7XG4gICAgY29uc3QgY2hhbmdlU2V0ID0gbWFrZVNldCgwKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRhdGFzZXRDb3VudDsgaSsrKSB7XG4gICAgICBpZiAoIXNldHNFcXVhbChjaGFuZ2VTZXQsIG1ha2VTZXQoaSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oY2hhbmdlU2V0KVxuICAgICAgLm1hcChjID0+IGMuc3BsaXQoJywnKSlcbiAgICAgIC5tYXAoYSA9PiAoe21ldGhvZDogYVsxXSwgc3RhcnQ6ICthWzJdLCBjb3VudDogK2FbM119KSk7XG4gIH1cbiAgX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlTGF5b3V0Jywge2NhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGF5b3V0cy51cGRhdGUodGhpcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIG1pblBhZGRpbmcpO1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLmNoYXJ0QXJlYTtcbiAgICBjb25zdCBub0FyZWEgPSBhcmVhLndpZHRoIDw9IDAgfHwgYXJlYS5oZWlnaHQgPD0gMDtcbiAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICBlYWNoKHRoaXMuYm94ZXMsIChib3gpID0+IHtcbiAgICAgIGlmIChub0FyZWEgJiYgYm94LnBvc2l0aW9uID09PSAnY2hhcnRBcmVhJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoYm94LmNvbmZpZ3VyZSkge1xuICAgICAgICBib3guY29uZmlndXJlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYXllcnMucHVzaCguLi5ib3guX2xheWVycygpKTtcbiAgICB9LCB0aGlzKTtcbiAgICB0aGlzLl9sYXllcnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGl0ZW0uX2lkeCA9IGluZGV4O1xuICAgIH0pO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJMYXlvdXQnKTtcbiAgfVxuICBfdXBkYXRlRGF0YXNldHMobW9kZSkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzVXBkYXRlJywge21vZGUsIGNhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuY29uZmlndXJlKCk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldChpLCBpc0Z1bmN0aW9uKG1vZGUpID8gbW9kZSh7ZGF0YXNldEluZGV4OiBpfSkgOiBtb2RlKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRzVXBkYXRlJywge21vZGV9KTtcbiAgfVxuICBfdXBkYXRlRGF0YXNldChpbmRleCwgbW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgICBjb25zdCBhcmdzID0ge21ldGEsIGluZGV4LCBtb2RlLCBjYW5jZWxhYmxlOiB0cnVlfTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0VXBkYXRlJywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1ldGEuY29udHJvbGxlci5fdXBkYXRlKG1vZGUpO1xuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgYXJncyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVJlbmRlcicsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhbmltYXRvci5oYXModGhpcykpIHtcbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkICYmICFhbmltYXRvci5ydW5uaW5nKHRoaXMpKSB7XG4gICAgICAgIGFuaW1hdG9yLnN0YXJ0KHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRyYXcoKTtcbiAgICAgIG9uQW5pbWF0aW9uc0NvbXBsZXRlKHtjaGFydDogdGhpc30pO1xuICAgIH1cbiAgfVxuICBkcmF3KCkge1xuICAgIGxldCBpO1xuICAgIGlmICh0aGlzLl9yZXNpemVCZWZvcmVEcmF3KSB7XG4gICAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0aGlzLl9yZXNpemVCZWZvcmVEcmF3O1xuICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuY2xlYXIoKTtcbiAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRHJhdycsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxheWVycyA9IHRoaXMuX2xheWVycztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAmJiBsYXllcnNbaV0ueiA8PSAwOyArK2kpIHtcbiAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICB9XG4gICAgdGhpcy5fZHJhd0RhdGFzZXRzKCk7XG4gICAgZm9yICg7IGkgPCBsYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRyYXcnKTtcbiAgfVxuICBfZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX3NvcnRlZE1ldGFzZXRzO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc2V0c1tpXTtcbiAgICAgIGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZXRhLnZpc2libGUpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKHRydWUpO1xuICB9XG4gIF9kcmF3RGF0YXNldHMoKSB7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNEcmF3Jywge2NhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBmb3IgKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRoaXMuX2RyYXdEYXRhc2V0KG1ldGFzZXRzW2ldKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRzRHJhdycpO1xuICB9XG4gIF9kcmF3RGF0YXNldChtZXRhKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgY2xpcCA9IG1ldGEuX2NsaXA7XG4gICAgY29uc3QgdXNlQ2xpcCA9ICFjbGlwLmRpc2FibGVkO1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLmNoYXJ0QXJlYTtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgbWV0YSxcbiAgICAgIGluZGV4OiBtZXRhLmluZGV4LFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH07XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldERyYXcnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVzZUNsaXApIHtcbiAgICAgIGNsaXBBcmVhKGN0eCwge1xuICAgICAgICBsZWZ0OiBjbGlwLmxlZnQgPT09IGZhbHNlID8gMCA6IGFyZWEubGVmdCAtIGNsaXAubGVmdCxcbiAgICAgICAgcmlnaHQ6IGNsaXAucmlnaHQgPT09IGZhbHNlID8gdGhpcy53aWR0aCA6IGFyZWEucmlnaHQgKyBjbGlwLnJpZ2h0LFxuICAgICAgICB0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuICAgICAgICBib3R0b206IGNsaXAuYm90dG9tID09PSBmYWxzZSA/IHRoaXMuaGVpZ2h0IDogYXJlYS5ib3R0b20gKyBjbGlwLmJvdHRvbVxuICAgICAgfSk7XG4gICAgfVxuICAgIG1ldGEuY29udHJvbGxlci5kcmF3KCk7XG4gICAgaWYgKHVzZUNsaXApIHtcbiAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG4gICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXREcmF3JywgYXJncyk7XG4gIH1cbiAgaXNQb2ludEluQXJlYShwb2ludCkge1xuICAgIHJldHVybiBfaXNQb2ludEluQXJlYShwb2ludCwgdGhpcy5jaGFydEFyZWEsIHRoaXMuX21pblBhZGRpbmcpO1xuICB9XG4gIGdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgbW9kZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbWV0aG9kKHRoaXMsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbiAgZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgbGV0IG1ldGEgPSBtZXRhc2V0cy5maWx0ZXIoeCA9PiB4ICYmIHguX2RhdGFzZXQgPT09IGRhdGFzZXQpLnBvcCgpO1xuICAgIGlmICghbWV0YSkge1xuICAgICAgbWV0YSA9IHtcbiAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIGRhdGFzZXQ6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgeEF4aXNJRDogbnVsbCxcbiAgICAgICAgeUF4aXNJRDogbnVsbCxcbiAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICBpbmRleDogZGF0YXNldEluZGV4LFxuICAgICAgICBfZGF0YXNldDogZGF0YXNldCxcbiAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgIF9zb3J0ZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgICAgbWV0YXNldHMucHVzaChtZXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGE7XG4gIH1cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge2NoYXJ0OiB0aGlzLCB0eXBlOiAnY2hhcnQnfSkpO1xuICB9XG4gIGdldFZpc2libGVEYXRhc2V0Q291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgfVxuICBpc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gIH1cbiAgc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICB9XG4gIHRvZ2dsZURhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF0gPSAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gIH1cbiAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICByZXR1cm4gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICB9XG4gIF91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCB2aXNpYmxlKSB7XG4gICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICBjb25zdCBhbmltcyA9IG1ldGEuY29udHJvbGxlci5fcmVzb2x2ZUFuaW1hdGlvbnModW5kZWZpbmVkLCBtb2RlKTtcbiAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKTtcbiAgICAgIGFuaW1zLnVwZGF0ZShtZXRhLCB7dmlzaWJsZX0pO1xuICAgICAgdGhpcy51cGRhdGUoKGN0eCkgPT4gY3R4LmRhdGFzZXRJbmRleCA9PT0gZGF0YXNldEluZGV4ID8gbW9kZSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG4gIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCBmYWxzZSk7XG4gIH1cbiAgc2hvdyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICB9XG4gIF9kZXN0cm95RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gIH1cbiAgX3N0b3AoKSB7XG4gICAgbGV0IGksIGlsZW47XG4gICAgdGhpcy5zdG9wKCk7XG4gICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEZXN0cm95Jyk7XG4gICAgY29uc3Qge2NhbnZhcywgY3R4fSA9IHRoaXM7XG4gICAgdGhpcy5fc3RvcCgpO1xuICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpO1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChjdHgpO1xuICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2Rlc3Ryb3knKTtcbiAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEZXN0cm95Jyk7XG4gIH1cbiAgdG9CYXNlNjRJbWFnZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgfVxuICBiaW5kRXZlbnRzKCkge1xuICAgIHRoaXMuYmluZFVzZXJFdmVudHMoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICBjb25zdCBwbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm07XG4gICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpID0+IHtcbiAgICAgIGUub2Zmc2V0WCA9IHg7XG4gICAgICBlLm9mZnNldFkgPSB5O1xuICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKGUpO1xuICAgIH07XG4gICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSkgPT4gX2FkZCh0eXBlLCBsaXN0ZW5lcikpO1xuICB9XG4gIGJpbmRSZXNwb25zaXZlRXZlbnRzKCkge1xuICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzO1xuICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgIH07XG4gICAgY29uc3QgX3JlbW92ZSA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgaWYgKGxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICBwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBkZXRhY2hlZDtcbiAgICBjb25zdCBhdHRhY2hlZCA9ICgpID0+IHtcbiAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICB9O1xuICAgIGRldGFjaGVkID0gKCkgPT4ge1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgIH07XG4gICAgaWYgKHBsYXRmb3JtLmlzQXR0YWNoZWQodGhpcy5jYW52YXMpKSB7XG4gICAgICBhdHRhY2hlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZXRhY2hlZCgpO1xuICAgIH1cbiAgfVxuICB1bmJpbmRFdmVudHMoKSB7XG4gICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9KTtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICBlYWNoKHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9KTtcbiAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZUhvdmVyU3R5bGUoaXRlbXMsIG1vZGUsIGVuYWJsZWQpIHtcbiAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICBsZXQgbWV0YSwgaXRlbSwgaSwgaWxlbjtcbiAgICBpZiAobW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtc1swXS5kYXRhc2V0SW5kZXgpO1xuICAgICAgbWV0YS5jb250cm9sbGVyWydfJyArIHByZWZpeCArICdEYXRhc2V0SG92ZXJTdHlsZSddKCk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBpdGVtICYmIHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbS5kYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICBjb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oaXRlbS5lbGVtZW50LCBpdGVtLmRhdGFzZXRJbmRleCwgaXRlbS5pbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gIH1cbiAgc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMpIHtcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoe2RhdGFzZXRJbmRleCwgaW5kZXh9KSA9PiB7XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YXNldCBmb3VuZCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgaW5kZXgsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgfVxuICB9XG4gIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMubm90aWZ5KHRoaXMsIGhvb2ssIGFyZ3MsIGZpbHRlcik7XG4gIH1cbiAgX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KSB7XG4gICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgIGNvbnN0IGRpZmYgPSAoYSwgYikgPT4gYS5maWx0ZXIoeCA9PiAhYi5zb21lKHkgPT4geC5kYXRhc2V0SW5kZXggPT09IHkuZGF0YXNldEluZGV4ICYmIHguaW5kZXggPT09IHkuaW5kZXgpKTtcbiAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICBjb25zdCBhY3RpdmF0ZWQgPSByZXBsYXkgPyBhY3RpdmUgOiBkaWZmKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGRlYWN0aXZhdGVkLmxlbmd0aCkge1xuICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGRlYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoYWN0aXZhdGVkLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIHRydWUpO1xuICAgIH1cbiAgfVxuICBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBldmVudDogZSxcbiAgICAgIHJlcGxheSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICBpbkNoYXJ0QXJlYTogdGhpcy5pc1BvaW50SW5BcmVhKGUpXG4gICAgfTtcbiAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pID0+IChwbHVnaW4ub3B0aW9ucy5ldmVudHMgfHwgdGhpcy5vcHRpb25zLmV2ZW50cykuaW5jbHVkZXMoZS5uYXRpdmUudHlwZSk7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRXZlbnQnLCBhcmdzLCBldmVudEZpbHRlcikgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLl9oYW5kbGVFdmVudChlLCByZXBsYXksIGFyZ3MuaW5DaGFydEFyZWEpO1xuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICBpZiAoY2hhbmdlZCB8fCBhcmdzLmNoYW5nZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIF9oYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgY29uc3Qge19hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSByZXBsYXk7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgIGNvbnN0IGxhc3RFdmVudCA9IGRldGVybWluZUxhc3RFdmVudChlLCB0aGlzLl9sYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKTtcbiAgICBpZiAoaW5DaGFydEFyZWEpIHtcbiAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICBjYWxsYmFjayhvcHRpb25zLm9uSG92ZXIsIFtlLCBhY3RpdmUsIHRoaXNdLCB0aGlzKTtcbiAgICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25DbGljaywgW2UsIGFjdGl2ZSwgdGhpc10sIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGNoYW5nZWQgfHwgcmVwbGF5KSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSk7XG4gICAgfVxuICAgIHRoaXMuX2xhc3RFdmVudCA9IGxhc3RFdmVudDtcbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgIH1cbiAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxufVxuY29uc3QgaW52YWxpZGF0ZVBsdWdpbnMgPSAoKSA9PiBlYWNoKENoYXJ0Lmluc3RhbmNlcywgKGNoYXJ0KSA9PiBjaGFydC5fcGx1Z2lucy5pbnZhbGlkYXRlKCkpO1xuY29uc3QgZW51bWVyYWJsZSA9IHRydWU7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDaGFydCwge1xuICBkZWZhdWx0czoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGRlZmF1bHRzXG4gIH0sXG4gIGluc3RhbmNlczoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGluc3RhbmNlc1xuICB9LFxuICBvdmVycmlkZXM6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiBvdmVycmlkZXNcbiAgfSxcbiAgcmVnaXN0cnk6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiByZWdpc3RyeVxuICB9LFxuICB2ZXJzaW9uOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogdmVyc2lvblxuICB9LFxuICBnZXRDaGFydDoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGdldENoYXJ0XG4gIH0sXG4gIHJlZ2lzdGVyOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogKC4uLml0ZW1zKSA9PiB7XG4gICAgICByZWdpc3RyeS5hZGQoLi4uaXRlbXMpO1xuICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXI6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiAoLi4uaXRlbXMpID0+IHtcbiAgICAgIHJlZ2lzdHJ5LnJlbW92ZSguLi5pdGVtcyk7XG4gICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICBjb25zdCB7c3RhcnRBbmdsZSwgcGl4ZWxNYXJnaW4sIHgsIHksIG91dGVyUmFkaXVzLCBpbm5lclJhZGl1c30gPSBlbGVtZW50O1xuICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbik7XG4gIGlmIChpbm5lclJhZGl1cyA+IHBpeGVsTWFyZ2luKSB7XG4gICAgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIGlubmVyUmFkaXVzO1xuICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gIH1cbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgWydvdXRlclN0YXJ0JywgJ291dGVyRW5kJywgJ2lubmVyU3RhcnQnLCAnaW5uZXJFbmQnXSk7XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyQxKGFyYywgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBhbmdsZURlbHRhKSB7XG4gIGNvbnN0IG8gPSB0b1JhZGl1c0Nvcm5lcnMoYXJjLm9wdGlvbnMuYm9yZGVyUmFkaXVzKTtcbiAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gIGNvbnN0IGlubmVyTGltaXQgPSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBhbmdsZURlbHRhICogaW5uZXJSYWRpdXMgLyAyKTtcbiAgY29uc3QgY29tcHV0ZU91dGVyTGltaXQgPSAodmFsKSA9PiB7XG4gICAgY29uc3Qgb3V0ZXJBcmNMaW1pdCA9IChvdXRlclJhZGl1cyAtIE1hdGgubWluKGhhbGZUaGlja25lc3MsIHZhbCkpICogYW5nbGVEZWx0YSAvIDI7XG4gICAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbCwgMCwgTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgb3V0ZXJBcmNMaW1pdCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIG91dGVyU3RhcnQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJTdGFydCksXG4gICAgb3V0ZXJFbmQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJFbmQpLFxuICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgaW5uZXJFbmQ6IF9saW1pdFZhbHVlKG8uaW5uZXJFbmQsIDAsIGlubmVyTGltaXQpLFxuICB9O1xufVxuZnVuY3Rpb24gclRoZXRhVG9YWShyLCB0aGV0YSwgeCwgeSkge1xuICByZXR1cm4ge1xuICAgIHg6IHggKyByICogTWF0aC5jb3ModGhldGEpLFxuICAgIHk6IHkgKyByICogTWF0aC5zaW4odGhldGEpLFxuICB9O1xufVxuZnVuY3Rpb24gcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kLCBjaXJjdWxhcikge1xuICBjb25zdCB7eCwgeSwgc3RhcnRBbmdsZTogc3RhcnQsIHBpeGVsTWFyZ2luLCBpbm5lclJhZGl1czogaW5uZXJSfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgoZWxlbWVudC5vdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQgLSBwaXhlbE1hcmdpbiwgMCk7XG4gIGNvbnN0IGlubmVyUmFkaXVzID0gaW5uZXJSID4gMCA/IGlubmVyUiArIHNwYWNpbmcgKyBvZmZzZXQgKyBwaXhlbE1hcmdpbiA6IDA7XG4gIGxldCBzcGFjaW5nT2Zmc2V0ID0gMDtcbiAgY29uc3QgYWxwaGEgPSBlbmQgLSBzdGFydDtcbiAgaWYgKHNwYWNpbmcpIHtcbiAgICBjb25zdCBub1NwYWNpbmdJbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgLSBzcGFjaW5nIDogMDtcbiAgICBjb25zdCBub1NwYWNpbmdPdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzID4gMCA/IG91dGVyUmFkaXVzIC0gc3BhY2luZyA6IDA7XG4gICAgY29uc3QgYXZOb2dTcGFjaW5nUmFkaXVzID0gKG5vU3BhY2luZ0lubmVyUmFkaXVzICsgbm9TcGFjaW5nT3V0ZXJSYWRpdXMpIC8gMjtcbiAgICBjb25zdCBhZGp1c3RlZEFuZ2xlID0gYXZOb2dTcGFjaW5nUmFkaXVzICE9PSAwID8gKGFscGhhICogYXZOb2dTcGFjaW5nUmFkaXVzKSAvIChhdk5vZ1NwYWNpbmdSYWRpdXMgKyBzcGFjaW5nKSA6IGFscGhhO1xuICAgIHNwYWNpbmdPZmZzZXQgPSAoYWxwaGEgLSBhZGp1c3RlZEFuZ2xlKSAvIDI7XG4gIH1cbiAgY29uc3QgYmV0YSA9IE1hdGgubWF4KDAuMDAxLCBhbHBoYSAqIG91dGVyUmFkaXVzIC0gb2Zmc2V0IC8gUEkpIC8gb3V0ZXJSYWRpdXM7XG4gIGNvbnN0IGFuZ2xlT2Zmc2V0ID0gKGFscGhhIC0gYmV0YSkgLyAyO1xuICBjb25zdCBzdGFydEFuZ2xlID0gc3RhcnQgKyBhbmdsZU9mZnNldCArIHNwYWNpbmdPZmZzZXQ7XG4gIGNvbnN0IGVuZEFuZ2xlID0gZW5kIC0gYW5nbGVPZmZzZXQgLSBzcGFjaW5nT2Zmc2V0O1xuICBjb25zdCB7b3V0ZXJTdGFydCwgb3V0ZXJFbmQsIGlubmVyU3RhcnQsIGlubmVyRW5kfSA9IHBhcnNlQm9yZGVyUmFkaXVzJDEoZWxlbWVudCwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMgPSBvdXRlclJhZGl1cyAtIG91dGVyU3RhcnQ7XG4gIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBvdXRlclJhZGl1cyAtIG91dGVyRW5kO1xuICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBvdXRlclN0YXJ0IC8gb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBvdXRlckVuZEFkanVzdGVkQW5nbGUgPSBlbmRBbmdsZSAtIG91dGVyRW5kIC8gb3V0ZXJFbmRBZGp1c3RlZFJhZGl1cztcbiAgY29uc3QgaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lclN0YXJ0O1xuICBjb25zdCBpbm5lckVuZEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lckVuZDtcbiAgY29uc3QgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgPSBzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cztcbiAgY29uc3QgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBpbm5lckVuZCAvIGlubmVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgaWYgKGNpcmN1bGFyKSB7XG4gICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSk7XG4gICAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJFbmRBZGp1c3RlZFJhZGl1cywgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyRW5kLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIGVuZEFuZ2xlICsgSEFMRl9QSSk7XG4gICAgfVxuICAgIGNvbnN0IHA0ID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBlbmRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmxpbmVUbyhwNC54LCBwNC55KTtcbiAgICBpZiAoaW5uZXJFbmQgPiAwKSB7XG4gICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBpbm5lckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJFbmQsIGVuZEFuZ2xlICsgSEFMRl9QSSwgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlICsgTWF0aC5QSSk7XG4gICAgfVxuICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlIC0gKGlubmVyRW5kIC8gaW5uZXJSYWRpdXMpLCBzdGFydEFuZ2xlICsgKGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cyksIHRydWUpO1xuICAgIGlmIChpbm5lclN0YXJ0ID4gMCkge1xuICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzLCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lclN0YXJ0LCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSArIE1hdGguUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgICB9XG4gICAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmxpbmVUbyhwOC54LCBwOC55KTtcbiAgICBpZiAob3V0ZXJTdGFydCA+IDApIHtcbiAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJTdGFydCwgc3RhcnRBbmdsZSAtIEhBTEZfUEksIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICBjb25zdCBvdXRlclN0YXJ0WCA9IE1hdGguY29zKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeDtcbiAgICBjb25zdCBvdXRlclN0YXJ0WSA9IE1hdGguc2luKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICBjdHgubGluZVRvKG91dGVyU3RhcnRYLCBvdXRlclN0YXJ0WSk7XG4gICAgY29uc3Qgb3V0ZXJFbmRYID0gTWF0aC5jb3Mob3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeDtcbiAgICBjb25zdCBvdXRlckVuZFkgPSBNYXRoLnNpbihvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgIGN0eC5saW5lVG8ob3V0ZXJFbmRYLCBvdXRlckVuZFkpO1xuICB9XG4gIGN0eC5jbG9zZVBhdGgoKTtcbn1cbmZ1bmN0aW9uIGRyYXdBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKSB7XG4gIGNvbnN0IHtmdWxsQ2lyY2xlcywgc3RhcnRBbmdsZSwgY2lyY3VtZmVyZW5jZX0gPSBlbGVtZW50O1xuICBsZXQgZW5kQW5nbGUgPSBlbGVtZW50LmVuZEFuZ2xlO1xuICBpZiAoZnVsbENpcmNsZXMpIHtcbiAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBzdGFydEFuZ2xlICsgVEFVLCBjaXJjdWxhcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgICBjdHguZmlsbCgpO1xuICAgIH1cbiAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlICUgVEFVO1xuICAgICAgaWYgKGNpcmN1bWZlcmVuY2UgJSBUQVUgPT09IDApIHtcbiAgICAgICAgZW5kQW5nbGUgKz0gVEFVO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICBjdHguZmlsbCgpO1xuICByZXR1cm4gZW5kQW5nbGU7XG59XG5mdW5jdGlvbiBkcmF3RnVsbENpcmNsZUJvcmRlcnMoY3R4LCBlbGVtZW50LCBpbm5lcikge1xuICBjb25zdCB7eCwgeSwgc3RhcnRBbmdsZSwgcGl4ZWxNYXJnaW4sIGZ1bGxDaXJjbGVzfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgoZWxlbWVudC5vdXRlclJhZGl1cyAtIHBpeGVsTWFyZ2luLCAwKTtcbiAgY29uc3QgaW5uZXJSYWRpdXMgPSBlbGVtZW50LmlubmVyUmFkaXVzICsgcGl4ZWxNYXJnaW47XG4gIGxldCBpO1xuICBpZiAoaW5uZXIpIHtcbiAgICBjbGlwQXJjKGN0eCwgZWxlbWVudCwgc3RhcnRBbmdsZSArIFRBVSk7XG4gIH1cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBzdGFydEFuZ2xlICsgVEFVLCBzdGFydEFuZ2xlLCB0cnVlKTtcbiAgZm9yIChpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBzdGFydEFuZ2xlLCBzdGFydEFuZ2xlICsgVEFVKTtcbiAgZm9yIChpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRyYXdCb3JkZXIoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcikge1xuICBjb25zdCB7b3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCB7Ym9yZGVyV2lkdGgsIGJvcmRlckpvaW5TdHlsZX0gPSBvcHRpb25zO1xuICBjb25zdCBpbm5lciA9IG9wdGlvbnMuYm9yZGVyQWxpZ24gPT09ICdpbm5lcic7XG4gIGlmICghYm9yZGVyV2lkdGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlubmVyKSB7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoICogMjtcbiAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ3JvdW5kJztcbiAgfSBlbHNlIHtcbiAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGg7XG4gICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdiZXZlbCc7XG4gIH1cbiAgaWYgKGVsZW1lbnQuZnVsbENpcmNsZXMpIHtcbiAgICBkcmF3RnVsbENpcmNsZUJvcmRlcnMoY3R4LCBlbGVtZW50LCBpbm5lcik7XG4gIH1cbiAgaWYgKGlubmVyKSB7XG4gICAgY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKTtcbiAgfVxuICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICBjdHguc3Ryb2tlKCk7XG59XG5jbGFzcyBBcmNFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0YXJ0QW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5waXhlbE1hcmdpbiA9IDA7XG4gICAgdGhpcy5mdWxsQ2lyY2xlcyA9IDA7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBpblJhbmdlKGNoYXJ0WCwgY2hhcnRZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgcG9pbnQgPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHthbmdsZSwgZGlzdGFuY2V9ID0gZ2V0QW5nbGVGcm9tUG9pbnQocG9pbnQsIHt4OiBjaGFydFgsIHk6IGNoYXJ0WX0pO1xuICAgIGNvbnN0IHtzdGFydEFuZ2xlLCBlbmRBbmdsZSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBjaXJjdW1mZXJlbmNlfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgJ2NpcmN1bWZlcmVuY2UnXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgckFkanVzdCA9IHRoaXMub3B0aW9ucy5zcGFjaW5nIC8gMjtcbiAgICBjb25zdCBfY2lyY3VtZmVyZW5jZSA9IHZhbHVlT3JEZWZhdWx0KGNpcmN1bWZlcmVuY2UsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgYmV0d2VlbkFuZ2xlcyA9IF9jaXJjdW1mZXJlbmNlID49IFRBVSB8fCBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgY29uc3Qgd2l0aGluUmFkaXVzID0gX2lzQmV0d2VlbihkaXN0YW5jZSwgaW5uZXJSYWRpdXMgKyByQWRqdXN0LCBvdXRlclJhZGl1cyArIHJBZGp1c3QpO1xuICAgIHJldHVybiAoYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXMpO1xuICB9XG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1c30gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICd4JyxcbiAgICAgICd5JyxcbiAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICdlbmRBbmdsZScsXG4gICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICdjaXJjdW1mZXJlbmNlJyxcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCB7b2Zmc2V0LCBzcGFjaW5nfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBoYWxmQW5nbGUgPSAoc3RhcnRBbmdsZSArIGVuZEFuZ2xlKSAvIDI7XG4gICAgY29uc3QgaGFsZlJhZGl1cyA9IChpbm5lclJhZGl1cyArIG91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCkgLyAyO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXMsXG4gICAgICB5OiB5ICsgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXNcbiAgICB9O1xuICB9XG4gIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgY2lyY3VtZmVyZW5jZX0gPSB0aGlzO1xuICAgIGNvbnN0IG9mZnNldCA9IChvcHRpb25zLm9mZnNldCB8fCAwKSAvIDI7XG4gICAgY29uc3Qgc3BhY2luZyA9IChvcHRpb25zLnNwYWNpbmcgfHwgMCkgLyAyO1xuICAgIGNvbnN0IGNpcmN1bGFyID0gb3B0aW9ucy5jaXJjdWxhcjtcbiAgICB0aGlzLnBpeGVsTWFyZ2luID0gKG9wdGlvbnMuYm9yZGVyQWxpZ24gPT09ICdpbm5lcicpID8gMC4zMyA6IDA7XG4gICAgdGhpcy5mdWxsQ2lyY2xlcyA9IGNpcmN1bWZlcmVuY2UgPiBUQVUgPyBNYXRoLmZsb29yKGNpcmN1bWZlcmVuY2UgLyBUQVUpIDogMDtcbiAgICBpZiAoY2lyY3VtZmVyZW5jZSA9PT0gMCB8fCB0aGlzLmlubmVyUmFkaXVzIDwgMCB8fCB0aGlzLm91dGVyUmFkaXVzIDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGxldCByYWRpdXNPZmZzZXQgPSAwO1xuICAgIGlmIChvZmZzZXQpIHtcbiAgICAgIHJhZGl1c09mZnNldCA9IG9mZnNldCAvIDI7XG4gICAgICBjb25zdCBoYWxmQW5nbGUgPSAodGhpcy5zdGFydEFuZ2xlICsgdGhpcy5lbmRBbmdsZSkgLyAyO1xuICAgICAgY3R4LnRyYW5zbGF0ZShNYXRoLmNvcyhoYWxmQW5nbGUpICogcmFkaXVzT2Zmc2V0LCBNYXRoLnNpbihoYWxmQW5nbGUpICogcmFkaXVzT2Zmc2V0KTtcbiAgICAgIGlmICh0aGlzLmNpcmN1bWZlcmVuY2UgPj0gUEkpIHtcbiAgICAgICAgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICBjb25zdCBlbmRBbmdsZSA9IGRyYXdBcmMoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICBkcmF3Qm9yZGVyKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbkFyY0VsZW1lbnQuaWQgPSAnYXJjJztcbkFyY0VsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlckFsaWduOiAnY2VudGVyJyxcbiAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgYm9yZGVySm9pblN0eWxlOiB1bmRlZmluZWQsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgYm9yZGVyV2lkdGg6IDIsXG4gIG9mZnNldDogMCxcbiAgc3BhY2luZzogMCxcbiAgYW5nbGU6IHVuZGVmaW5lZCxcbiAgY2lyY3VsYXI6IHRydWUsXG59O1xuQXJjRWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InXG59O1xuXG5mdW5jdGlvbiBzZXRTdHlsZShjdHgsIG9wdGlvbnMsIHN0eWxlID0gb3B0aW9ucykge1xuICBjdHgubGluZUNhcCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNhcFN0eWxlLCBvcHRpb25zLmJvcmRlckNhcFN0eWxlKTtcbiAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2gsIG9wdGlvbnMuYm9yZGVyRGFzaCkpO1xuICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LCBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQpO1xuICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJKb2luU3R5bGUsIG9wdGlvbnMuYm9yZGVySm9pblN0eWxlKTtcbiAgY3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyQ29sb3IsIG9wdGlvbnMuYm9yZGVyQ29sb3IpO1xufVxuZnVuY3Rpb24gbGluZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCkge1xuICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG5mdW5jdGlvbiBnZXRMaW5lTWV0aG9kKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgIHJldHVybiBfc3RlcHBlZExpbmVUbztcbiAgfVxuICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHJldHVybiBfYmV6aWVyQ3VydmVUbztcbiAgfVxuICByZXR1cm4gbGluZVRvO1xufVxuZnVuY3Rpb24gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMgPSB7fSkge1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHtzdGFydDogcGFyYW1zU3RhcnQgPSAwLCBlbmQ6IHBhcmFtc0VuZCA9IGNvdW50IC0gMX0gPSBwYXJhbXM7XG4gIGNvbnN0IHtzdGFydDogc2VnbWVudFN0YXJ0LCBlbmQ6IHNlZ21lbnRFbmR9ID0gc2VnbWVudDtcbiAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heChwYXJhbXNTdGFydCwgc2VnbWVudFN0YXJ0KTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4ocGFyYW1zRW5kLCBzZWdtZW50RW5kKTtcbiAgY29uc3Qgb3V0c2lkZSA9IHBhcmFtc1N0YXJ0IDwgc2VnbWVudFN0YXJ0ICYmIHBhcmFtc0VuZCA8IHNlZ21lbnRTdGFydCB8fCBwYXJhbXNTdGFydCA+IHNlZ21lbnRFbmQgJiYgcGFyYW1zRW5kID4gc2VnbWVudEVuZDtcbiAgcmV0dXJuIHtcbiAgICBjb3VudCxcbiAgICBzdGFydCxcbiAgICBsb29wOiBzZWdtZW50Lmxvb3AsXG4gICAgaWxlbjogZW5kIDwgc3RhcnQgJiYgIW91dHNpZGUgPyBjb3VudCArIGVuZCAtIHN0YXJ0IDogZW5kIC0gc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gIGNvbnN0IHtwb2ludHMsIG9wdGlvbnN9ID0gbGluZTtcbiAgY29uc3Qge2NvdW50LCBzdGFydCwgbG9vcCwgaWxlbn0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIGNvbnN0IGxpbmVNZXRob2QgPSBnZXRMaW5lTWV0aG9kKG9wdGlvbnMpO1xuICBsZXQge21vdmUgPSB0cnVlLCByZXZlcnNlfSA9IHBhcmFtcyB8fCB7fTtcbiAgbGV0IGksIHBvaW50LCBwcmV2O1xuICBmb3IgKGkgPSAwOyBpIDw9IGlsZW47ICsraSkge1xuICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGkgOiBpKSkgJSBjb3VudF07XG4gICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAobW92ZSkge1xuICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgIG1vdmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgIH1cbiAgICBwcmV2ID0gcG9pbnQ7XG4gIH1cbiAgaWYgKGxvb3ApIHtcbiAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gOiAwKSkgJSBjb3VudF07XG4gICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICB9XG4gIHJldHVybiAhIWxvb3A7XG59XG5mdW5jdGlvbiBmYXN0UGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHtjb3VudCwgc3RhcnQsIGlsZW59ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICBjb25zdCB7bW92ZSA9IHRydWUsIHJldmVyc2V9ID0gcGFyYW1zIHx8IHt9O1xuICBsZXQgYXZnWCA9IDA7XG4gIGxldCBjb3VudFggPSAwO1xuICBsZXQgaSwgcG9pbnQsIHByZXZYLCBtaW5ZLCBtYXhZLCBsYXN0WTtcbiAgY29uc3QgcG9pbnRJbmRleCA9IChpbmRleCkgPT4gKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaW5kZXggOiBpbmRleCkpICUgY291bnQ7XG4gIGNvbnN0IGRyYXdYID0gKCkgPT4ge1xuICAgIGlmIChtaW5ZICE9PSBtYXhZKSB7XG4gICAgICBjdHgubGluZVRvKGF2Z1gsIG1heFkpO1xuICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtaW5ZKTtcbiAgICAgIGN0eC5saW5lVG8oYXZnWCwgbGFzdFkpO1xuICAgIH1cbiAgfTtcbiAgaWYgKG1vdmUpIHtcbiAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KDApXTtcbiAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPD0gaWxlbjsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleChpKV07XG4gICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB4ID0gcG9pbnQueDtcbiAgICBjb25zdCB5ID0gcG9pbnQueTtcbiAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICBpZiAodHJ1bmNYID09PSBwcmV2WCkge1xuICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgIG1pblkgPSB5O1xuICAgICAgfSBlbHNlIGlmICh5ID4gbWF4WSkge1xuICAgICAgICBtYXhZID0geTtcbiAgICAgIH1cbiAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHgpIC8gKytjb3VudFg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYXdYKCk7XG4gICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICBjb3VudFggPSAwO1xuICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgIH1cbiAgICBsYXN0WSA9IHk7XG4gIH1cbiAgZHJhd1goKTtcbn1cbmZ1bmN0aW9uIF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpIHtcbiAgY29uc3Qgb3B0cyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHMuYm9yZGVyRGFzaCAmJiBvcHRzLmJvcmRlckRhc2gubGVuZ3RoO1xuICBjb25zdCB1c2VGYXN0UGF0aCA9ICFsaW5lLl9kZWNpbWF0ZWQgJiYgIWxpbmUuX2xvb3AgJiYgIW9wdHMudGVuc2lvbiAmJiBvcHRzLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgIT09ICdtb25vdG9uZScgJiYgIW9wdHMuc3RlcHBlZCAmJiAhYm9yZGVyRGFzaDtcbiAgcmV0dXJuIHVzZUZhc3RQYXRoID8gZmFzdFBhdGhTZWdtZW50IDogcGF0aFNlZ21lbnQ7XG59XG5mdW5jdGlvbiBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICByZXR1cm4gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uO1xuICB9XG4gIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgcmV0dXJuIF9iZXppZXJJbnRlcnBvbGF0aW9uO1xuICB9XG4gIHJldHVybiBfcG9pbnRJbkxpbmU7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gIGxldCBwYXRoID0gbGluZS5fcGF0aDtcbiAgaWYgKCFwYXRoKSB7XG4gICAgcGF0aCA9IGxpbmUuX3BhdGggPSBuZXcgUGF0aDJEKCk7XG4gICAgaWYgKGxpbmUucGF0aChwYXRoLCBzdGFydCwgY291bnQpKSB7XG4gICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfVxuICBzZXRTdHlsZShjdHgsIGxpbmUub3B0aW9ucyk7XG4gIGN0eC5zdHJva2UocGF0aCk7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gIGNvbnN0IHtzZWdtZW50cywgb3B0aW9uc30gPSBsaW5lO1xuICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QobGluZSk7XG4gIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc2VnbWVudC5zdHlsZSk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGlmIChzZWdtZW50TWV0aG9kKGN0eCwgbGluZSwgc2VnbWVudCwge3N0YXJ0LCBlbmQ6IHN0YXJ0ICsgY291bnQgLSAxfSkpIHtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5jb25zdCB1c2VQYXRoMkQgPSB0eXBlb2YgUGF0aDJEID09PSAnZnVuY3Rpb24nO1xuZnVuY3Rpb24gZHJhdyhjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICBpZiAodXNlUGF0aDJEICYmICFsaW5lLm9wdGlvbnMuc2VnbWVudCkge1xuICAgIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICB9IGVsc2Uge1xuICAgIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICB9XG59XG5jbGFzcyBMaW5lRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYW5pbWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9jaGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9sb29wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2Z1bGxMb29wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcG9pbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NlZ21lbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RlY2ltYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhc2V0SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVDb250cm9sUG9pbnRzKGNoYXJ0QXJlYSwgaW5kZXhBeGlzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpICYmICFvcHRpb25zLnN0ZXBwZWQgJiYgIXRoaXMuX3BvaW50c1VwZGF0ZWQpIHtcbiAgICAgIGNvbnN0IGxvb3AgPSBvcHRpb25zLnNwYW5HYXBzID8gdGhpcy5fbG9vcCA6IHRoaXMuX2Z1bGxMb29wO1xuICAgICAgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHModGhpcy5fcG9pbnRzLCBvcHRpb25zLCBjaGFydEFyZWEsIGxvb3AsIGluZGV4QXhpcyk7XG4gICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgc2V0IHBvaW50cyhwb2ludHMpIHtcbiAgICB0aGlzLl9wb2ludHMgPSBwb2ludHM7XG4gICAgZGVsZXRlIHRoaXMuX3NlZ21lbnRzO1xuICAgIGRlbGV0ZSB0aGlzLl9wYXRoO1xuICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgfVxuICBnZXQgcG9pbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9wb2ludHM7XG4gIH1cbiAgZ2V0IHNlZ21lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWdtZW50cyB8fCAodGhpcy5fc2VnbWVudHMgPSBfY29tcHV0ZVNlZ21lbnRzKHRoaXMsIHRoaXMub3B0aW9ucy5zZWdtZW50KSk7XG4gIH1cbiAgZmlyc3QoKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggJiYgcG9pbnRzW3NlZ21lbnRzWzBdLnN0YXJ0XTtcbiAgfVxuICBsYXN0KCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICBjb25zdCBjb3VudCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gY291bnQgJiYgcG9pbnRzW3NlZ21lbnRzW2NvdW50IC0gMV0uZW5kXTtcbiAgfVxuICBpbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGhpcywge3Byb3BlcnR5LCBzdGFydDogdmFsdWUsIGVuZDogdmFsdWV9KTtcbiAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBfaW50ZXJwb2xhdGUgPSBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCB7c3RhcnQsIGVuZH0gPSBzZWdtZW50c1tpXTtcbiAgICAgIGNvbnN0IHAxID0gcG9pbnRzW3N0YXJ0XTtcbiAgICAgIGNvbnN0IHAyID0gcG9pbnRzW2VuZF07XG4gICAgICBpZiAocDEgPT09IHAyKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHAxKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB0ID0gTWF0aC5hYnMoKHZhbHVlIC0gcDFbcHJvcGVydHldKSAvIChwMltwcm9wZXJ0eV0gLSBwMVtwcm9wZXJ0eV0pKTtcbiAgICAgIGNvbnN0IGludGVycG9sYXRlZCA9IF9pbnRlcnBvbGF0ZShwMSwgcDIsIHQsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgICBpbnRlcnBvbGF0ZWRbcHJvcGVydHldID0gcG9pbnRbcHJvcGVydHldO1xuICAgICAgcmVzdWx0LnB1c2goaW50ZXJwb2xhdGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDEgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gIH1cbiAgcGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgcmV0dXJuIHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCBwYXJhbXMpO1xuICB9XG4gIHBhdGgoY3R4LCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgIGxldCBsb29wID0gdGhpcy5fbG9vcDtcbiAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gICAgY291bnQgPSBjb3VudCB8fCAodGhpcy5wb2ludHMubGVuZ3RoIC0gc3RhcnQpO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgICAgbG9vcCAmPSBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwge3N0YXJ0LCBlbmQ6IHN0YXJ0ICsgY291bnQgLSAxfSk7XG4gICAgfVxuICAgIHJldHVybiAhIWxvb3A7XG4gIH1cbiAgZHJhdyhjdHgsIGNoYXJ0QXJlYSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cyB8fCBbXTtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCAmJiBvcHRpb25zLmJvcmRlcldpZHRoKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgZHJhdyhjdHgsIHRoaXMsIHN0YXJ0LCBjb3VudCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hbmltYXRlZCkge1xuICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cbkxpbmVFbGVtZW50LmlkID0gJ2xpbmUnO1xuTGluZUVsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gIGJvcmRlckRhc2g6IFtdLFxuICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICBib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG4gIGJvcmRlcldpZHRoOiAzLFxuICBjYXBCZXppZXJQb2ludHM6IHRydWUsXG4gIGN1YmljSW50ZXJwb2xhdGlvbk1vZGU6ICdkZWZhdWx0JyxcbiAgZmlsbDogZmFsc2UsXG4gIHNwYW5HYXBzOiBmYWxzZSxcbiAgc3RlcHBlZDogZmFsc2UsXG4gIHRlbnNpb246IDAsXG59O1xuTGluZUVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbn07XG5MaW5lRWxlbWVudC5kZXNjcmlwdG9ycyA9IHtcbiAgX3NjcmlwdGFibGU6IHRydWUsXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ2ZpbGwnLFxufTtcblxuZnVuY3Rpb24gaW5SYW5nZSQxKGVsLCBwb3MsIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGVsLm9wdGlvbnM7XG4gIGNvbnN0IHtbYXhpc106IHZhbHVlfSA9IGVsLmdldFByb3BzKFtheGlzXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIHJldHVybiAoTWF0aC5hYnMocG9zIC0gdmFsdWUpIDwgb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cyk7XG59XG5jbGFzcyBQb2ludEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYXJzZWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5za2lwID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RvcCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuICgoTWF0aC5wb3cobW91c2VYIC0geCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB5LCAyKSkgPCBNYXRoLnBvdyhvcHRpb25zLmhpdFJhZGl1cyArIG9wdGlvbnMucmFkaXVzLCAyKSk7XG4gIH1cbiAgaW5YUmFuZ2UobW91c2VYLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UkMSh0aGlzLCBtb3VzZVgsICd4JywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UkMSh0aGlzLCBtb3VzZVksICd5JywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIHt4LCB5fTtcbiAgfVxuICBzaXplKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgbGV0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzIHx8IDA7XG4gICAgcmFkaXVzID0gTWF0aC5tYXgocmFkaXVzLCByYWRpdXMgJiYgb3B0aW9ucy5ob3ZlclJhZGl1cyB8fCAwKTtcbiAgICBjb25zdCBib3JkZXJXaWR0aCA9IHJhZGl1cyAmJiBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgcmV0dXJuIChyYWRpdXMgKyBib3JkZXJXaWR0aCkgKiAyO1xuICB9XG4gIGRyYXcoY3R4LCBhcmVhKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAodGhpcy5za2lwIHx8IG9wdGlvbnMucmFkaXVzIDwgMC4xIHx8ICFfaXNQb2ludEluQXJlYSh0aGlzLCBhcmVhLCB0aGlzLnNpemUob3B0aW9ucykgLyAyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB0aGlzLngsIHRoaXMueSk7XG4gIH1cbiAgZ2V0UmFuZ2UoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICByZXR1cm4gb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cztcbiAgfVxufVxuUG9pbnRFbGVtZW50LmlkID0gJ3BvaW50JztcblBvaW50RWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyV2lkdGg6IDEsXG4gIGhpdFJhZGl1czogMSxcbiAgaG92ZXJCb3JkZXJXaWR0aDogMSxcbiAgaG92ZXJSYWRpdXM6IDQsXG4gIHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuICByYWRpdXM6IDMsXG4gIHJvdGF0aW9uOiAwXG59O1xuUG9pbnRFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG59O1xuXG5mdW5jdGlvbiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IHt4LCB5LCBiYXNlLCB3aWR0aCwgaGVpZ2h0fSA9IGJhci5nZXRQcm9wcyhbJ3gnLCAneScsICdiYXNlJywgJ3dpZHRoJywgJ2hlaWdodCddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgbGV0IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgaGFsZjtcbiAgaWYgKGJhci5ob3Jpem9udGFsKSB7XG4gICAgaGFsZiA9IGhlaWdodCAvIDI7XG4gICAgbGVmdCA9IE1hdGgubWluKHgsIGJhc2UpO1xuICAgIHJpZ2h0ID0gTWF0aC5tYXgoeCwgYmFzZSk7XG4gICAgdG9wID0geSAtIGhhbGY7XG4gICAgYm90dG9tID0geSArIGhhbGY7XG4gIH0gZWxzZSB7XG4gICAgaGFsZiA9IHdpZHRoIC8gMjtcbiAgICBsZWZ0ID0geCAtIGhhbGY7XG4gICAgcmlnaHQgPSB4ICsgaGFsZjtcbiAgICB0b3AgPSBNYXRoLm1pbih5LCBiYXNlKTtcbiAgICBib3R0b20gPSBNYXRoLm1heCh5LCBiYXNlKTtcbiAgfVxuICByZXR1cm4ge2xlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbX07XG59XG5mdW5jdGlvbiBza2lwT3JMaW1pdChza2lwLCB2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIHNraXAgPyAwIDogX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyV2lkdGgoYmFyLCBtYXhXLCBtYXhIKSB7XG4gIGNvbnN0IHZhbHVlID0gYmFyLm9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgY29uc3QgbyA9IHRvVFJCTCh2YWx1ZSk7XG4gIHJldHVybiB7XG4gICAgdDogc2tpcE9yTGltaXQoc2tpcC50b3AsIG8udG9wLCAwLCBtYXhIKSxcbiAgICByOiBza2lwT3JMaW1pdChza2lwLnJpZ2h0LCBvLnJpZ2h0LCAwLCBtYXhXKSxcbiAgICBiOiBza2lwT3JMaW1pdChza2lwLmJvdHRvbSwgby5ib3R0b20sIDAsIG1heEgpLFxuICAgIGw6IHNraXBPckxpbWl0KHNraXAubGVmdCwgby5sZWZ0LCAwLCBtYXhXKVxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJSYWRpdXMoYmFyLCBtYXhXLCBtYXhIKSB7XG4gIGNvbnN0IHtlbmFibGVCb3JkZXJSYWRpdXN9ID0gYmFyLmdldFByb3BzKFsnZW5hYmxlQm9yZGVyUmFkaXVzJ10pO1xuICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlclJhZGl1cztcbiAgY29uc3QgbyA9IHRvVFJCTENvcm5lcnModmFsdWUpO1xuICBjb25zdCBtYXhSID0gTWF0aC5taW4obWF4VywgbWF4SCk7XG4gIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgY29uc3QgZW5hYmxlQm9yZGVyID0gZW5hYmxlQm9yZGVyUmFkaXVzIHx8IGlzT2JqZWN0KHZhbHVlKTtcbiAgcmV0dXJuIHtcbiAgICB0b3BMZWZ0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAubGVmdCwgby50b3BMZWZ0LCAwLCBtYXhSKSxcbiAgICB0b3BSaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLnJpZ2h0LCBvLnRvcFJpZ2h0LCAwLCBtYXhSKSxcbiAgICBib3R0b21MZWZ0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAubGVmdCwgby5ib3R0b21MZWZ0LCAwLCBtYXhSKSxcbiAgICBib3R0b21SaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLnJpZ2h0LCBvLmJvdHRvbVJpZ2h0LCAwLCBtYXhSKVxuICB9O1xufVxuZnVuY3Rpb24gYm91bmRpbmdSZWN0cyhiYXIpIHtcbiAgY29uc3QgYm91bmRzID0gZ2V0QmFyQm91bmRzKGJhcik7XG4gIGNvbnN0IHdpZHRoID0gYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQ7XG4gIGNvbnN0IGhlaWdodCA9IGJvdW5kcy5ib3R0b20gLSBib3VuZHMudG9wO1xuICBjb25zdCBib3JkZXIgPSBwYXJzZUJvcmRlcldpZHRoKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgY29uc3QgcmFkaXVzID0gcGFyc2VCb3JkZXJSYWRpdXMoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICByZXR1cm4ge1xuICAgIG91dGVyOiB7XG4gICAgICB4OiBib3VuZHMubGVmdCxcbiAgICAgIHk6IGJvdW5kcy50b3AsXG4gICAgICB3OiB3aWR0aCxcbiAgICAgIGg6IGhlaWdodCxcbiAgICAgIHJhZGl1c1xuICAgIH0sXG4gICAgaW5uZXI6IHtcbiAgICAgIHg6IGJvdW5kcy5sZWZ0ICsgYm9yZGVyLmwsXG4gICAgICB5OiBib3VuZHMudG9wICsgYm9yZGVyLnQsXG4gICAgICB3OiB3aWR0aCAtIGJvcmRlci5sIC0gYm9yZGVyLnIsXG4gICAgICBoOiBoZWlnaHQgLSBib3JkZXIudCAtIGJvcmRlci5iLFxuICAgICAgcmFkaXVzOiB7XG4gICAgICAgIHRvcExlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BMZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5sKSksXG4gICAgICAgIHRvcFJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wUmlnaHQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLnIpKSxcbiAgICAgICAgYm90dG9tTGVmdDogTWF0aC5tYXgoMCwgcmFkaXVzLmJvdHRvbUxlZnQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLmwpKSxcbiAgICAgICAgYm90dG9tUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21SaWdodCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIucikpLFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluUmFuZ2UoYmFyLCB4LCB5LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IHNraXBYID0geCA9PT0gbnVsbDtcbiAgY29uc3Qgc2tpcFkgPSB5ID09PSBudWxsO1xuICBjb25zdCBza2lwQm90aCA9IHNraXBYICYmIHNraXBZO1xuICBjb25zdCBib3VuZHMgPSBiYXIgJiYgIXNraXBCb3RoICYmIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pO1xuICByZXR1cm4gYm91bmRzXG5cdFx0JiYgKHNraXBYIHx8IF9pc0JldHdlZW4oeCwgYm91bmRzLmxlZnQsIGJvdW5kcy5yaWdodCkpXG5cdFx0JiYgKHNraXBZIHx8IF9pc0JldHdlZW4oeSwgYm91bmRzLnRvcCwgYm91bmRzLmJvdHRvbSkpO1xufVxuZnVuY3Rpb24gaGFzUmFkaXVzKHJhZGl1cykge1xuICByZXR1cm4gcmFkaXVzLnRvcExlZnQgfHwgcmFkaXVzLnRvcFJpZ2h0IHx8IHJhZGl1cy5ib3R0b21MZWZ0IHx8IHJhZGl1cy5ib3R0b21SaWdodDtcbn1cbmZ1bmN0aW9uIGFkZE5vcm1hbFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICBjdHgucmVjdChyZWN0LngsIHJlY3QueSwgcmVjdC53LCByZWN0LmgpO1xufVxuZnVuY3Rpb24gaW5mbGF0ZVJlY3QocmVjdCwgYW1vdW50LCByZWZSZWN0ID0ge30pIHtcbiAgY29uc3QgeCA9IHJlY3QueCAhPT0gcmVmUmVjdC54ID8gLWFtb3VudCA6IDA7XG4gIGNvbnN0IHkgPSByZWN0LnkgIT09IHJlZlJlY3QueSA/IC1hbW91bnQgOiAwO1xuICBjb25zdCB3ID0gKHJlY3QueCArIHJlY3QudyAhPT0gcmVmUmVjdC54ICsgcmVmUmVjdC53ID8gYW1vdW50IDogMCkgLSB4O1xuICBjb25zdCBoID0gKHJlY3QueSArIHJlY3QuaCAhPT0gcmVmUmVjdC55ICsgcmVmUmVjdC5oID8gYW1vdW50IDogMCkgLSB5O1xuICByZXR1cm4ge1xuICAgIHg6IHJlY3QueCArIHgsXG4gICAgeTogcmVjdC55ICsgeSxcbiAgICB3OiByZWN0LncgKyB3LFxuICAgIGg6IHJlY3QuaCArIGgsXG4gICAgcmFkaXVzOiByZWN0LnJhZGl1c1xuICB9O1xufVxuY2xhc3MgQmFyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhvcml6b250YWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iYXNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pbmZsYXRlQW1vdW50ID0gdW5kZWZpbmVkO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCB7aW5mbGF0ZUFtb3VudCwgb3B0aW9uczoge2JvcmRlckNvbG9yLCBiYWNrZ3JvdW5kQ29sb3J9fSA9IHRoaXM7XG4gICAgY29uc3Qge2lubmVyLCBvdXRlcn0gPSBib3VuZGluZ1JlY3RzKHRoaXMpO1xuICAgIGNvbnN0IGFkZFJlY3RQYXRoID0gaGFzUmFkaXVzKG91dGVyLnJhZGl1cykgPyBhZGRSb3VuZGVkUmVjdFBhdGggOiBhZGROb3JtYWxSZWN0UGF0aDtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGlmIChvdXRlci53ICE9PSBpbm5lci53IHx8IG91dGVyLmggIT09IGlubmVyLmgpIHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3Qob3V0ZXIsIGluZmxhdGVBbW91bnQsIGlubmVyKSk7XG4gICAgICBjdHguY2xpcCgpO1xuICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgLWluZmxhdGVBbW91bnQsIG91dGVyKSk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gYm9yZGVyQ29sb3I7XG4gICAgICBjdHguZmlsbCgnZXZlbm9kZCcpO1xuICAgIH1cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgaW5mbGF0ZUFtb3VudCkpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgaW5YUmFuZ2UobW91c2VYLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbW91c2VYLCBudWxsLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBudWxsLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeSwgYmFzZSwgaG9yaXpvbnRhbH0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5JywgJ2Jhc2UnLCAnaG9yaXpvbnRhbCddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogaG9yaXpvbnRhbCA/ICh4ICsgYmFzZSkgLyAyIDogeCxcbiAgICAgIHk6IGhvcml6b250YWwgPyB5IDogKHkgKyBiYXNlKSAvIDJcbiAgICB9O1xuICB9XG4gIGdldFJhbmdlKGF4aXMpIHtcbiAgICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gdGhpcy53aWR0aCAvIDIgOiB0aGlzLmhlaWdodCAvIDI7XG4gIH1cbn1cbkJhckVsZW1lbnQuaWQgPSAnYmFyJztcbkJhckVsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlclNraXBwZWQ6ICdzdGFydCcsXG4gIGJvcmRlcldpZHRoOiAwLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIGluZmxhdGVBbW91bnQ6ICdhdXRvJyxcbiAgcG9pbnRTdHlsZTogdW5kZWZpbmVkXG59O1xuQmFyRWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xufTtcblxudmFyIGVsZW1lbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQXJjRWxlbWVudDogQXJjRWxlbWVudCxcbkxpbmVFbGVtZW50OiBMaW5lRWxlbWVudCxcblBvaW50RWxlbWVudDogUG9pbnRFbGVtZW50LFxuQmFyRWxlbWVudDogQmFyRWxlbWVudFxufSk7XG5cbmZ1bmN0aW9uIGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2FtcGxlcyA9IG9wdGlvbnMuc2FtcGxlcyB8fCBhdmFpbGFibGVXaWR0aDtcbiAgaWYgKHNhbXBsZXMgPj0gY291bnQpIHtcbiAgICByZXR1cm4gZGF0YS5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIH1cbiAgY29uc3QgZGVjaW1hdGVkID0gW107XG4gIGNvbnN0IGJ1Y2tldFdpZHRoID0gKGNvdW50IC0gMikgLyAoc2FtcGxlcyAtIDIpO1xuICBsZXQgc2FtcGxlZEluZGV4ID0gMDtcbiAgY29uc3QgZW5kSW5kZXggPSBzdGFydCArIGNvdW50IC0gMTtcbiAgbGV0IGEgPSBzdGFydDtcbiAgbGV0IGksIG1heEFyZWFQb2ludCwgbWF4QXJlYSwgYXJlYSwgbmV4dEE7XG4gIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBkYXRhW2FdO1xuICBmb3IgKGkgPSAwOyBpIDwgc2FtcGxlcyAtIDI7IGkrKykge1xuICAgIGxldCBhdmdYID0gMDtcbiAgICBsZXQgYXZnWSA9IDA7XG4gICAgbGV0IGo7XG4gICAgY29uc3QgYXZnUmFuZ2VTdGFydCA9IE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICBjb25zdCBhdmdSYW5nZUVuZCA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAyKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgIGNvbnN0IGF2Z1JhbmdlTGVuZ3RoID0gYXZnUmFuZ2VFbmQgLSBhdmdSYW5nZVN0YXJ0O1xuICAgIGZvciAoaiA9IGF2Z1JhbmdlU3RhcnQ7IGogPCBhdmdSYW5nZUVuZDsgaisrKSB7XG4gICAgICBhdmdYICs9IGRhdGFbal0ueDtcbiAgICAgIGF2Z1kgKz0gZGF0YVtqXS55O1xuICAgIH1cbiAgICBhdmdYIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgIGF2Z1kgLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgY29uc3QgcmFuZ2VPZmZzID0gTWF0aC5mbG9vcihpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgIGNvbnN0IHJhbmdlVG8gPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICBjb25zdCB7eDogcG9pbnRBeCwgeTogcG9pbnRBeX0gPSBkYXRhW2FdO1xuICAgIG1heEFyZWEgPSBhcmVhID0gLTE7XG4gICAgZm9yIChqID0gcmFuZ2VPZmZzOyBqIDwgcmFuZ2VUbzsgaisrKSB7XG4gICAgICBhcmVhID0gMC41ICogTWF0aC5hYnMoXG4gICAgICAgIChwb2ludEF4IC0gYXZnWCkgKiAoZGF0YVtqXS55IC0gcG9pbnRBeSkgLVxuICAgICAgICAocG9pbnRBeCAtIGRhdGFbal0ueCkgKiAoYXZnWSAtIHBvaW50QXkpXG4gICAgICApO1xuICAgICAgaWYgKGFyZWEgPiBtYXhBcmVhKSB7XG4gICAgICAgIG1heEFyZWEgPSBhcmVhO1xuICAgICAgICBtYXhBcmVhUG9pbnQgPSBkYXRhW2pdO1xuICAgICAgICBuZXh0QSA9IGo7XG4gICAgICB9XG4gICAgfVxuICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBtYXhBcmVhUG9pbnQ7XG4gICAgYSA9IG5leHRBO1xuICB9XG4gIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBkYXRhW2VuZEluZGV4XTtcbiAgcmV0dXJuIGRlY2ltYXRlZDtcbn1cbmZ1bmN0aW9uIG1pbk1heERlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCkge1xuICBsZXQgYXZnWCA9IDA7XG4gIGxldCBjb3VudFggPSAwO1xuICBsZXQgaSwgcG9pbnQsIHgsIHksIHByZXZYLCBtaW5JbmRleCwgbWF4SW5kZXgsIHN0YXJ0SW5kZXgsIG1pblksIG1heFk7XG4gIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICBjb25zdCB4TWluID0gZGF0YVtzdGFydF0ueDtcbiAgY29uc3QgeE1heCA9IGRhdGFbZW5kSW5kZXhdLng7XG4gIGNvbnN0IGR4ID0geE1heCAtIHhNaW47XG4gIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgcG9pbnQgPSBkYXRhW2ldO1xuICAgIHggPSAocG9pbnQueCAtIHhNaW4pIC8gZHggKiBhdmFpbGFibGVXaWR0aDtcbiAgICB5ID0gcG9pbnQueTtcbiAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICBpZiAodHJ1bmNYID09PSBwcmV2WCkge1xuICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgIG1pblkgPSB5O1xuICAgICAgICBtaW5JbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgIG1heFkgPSB5O1xuICAgICAgICBtYXhJbmRleCA9IGk7XG4gICAgICB9XG4gICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyBwb2ludC54KSAvICsrY291bnRYO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsYXN0SW5kZXggPSBpIC0gMTtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZihtaW5JbmRleCkgJiYgIWlzTnVsbE9yVW5kZWYobWF4SW5kZXgpKSB7XG4gICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MSA9IE1hdGgubWluKG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MiA9IE1hdGgubWF4KG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgIGlmIChpbnRlcm1lZGlhdGVJbmRleDEgIT09IHN0YXJ0SW5kZXggJiYgaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICBkZWNpbWF0ZWQucHVzaCh7XG4gICAgICAgICAgICAuLi5kYXRhW2ludGVybWVkaWF0ZUluZGV4MV0sXG4gICAgICAgICAgICB4OiBhdmdYLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcm1lZGlhdGVJbmRleDIgIT09IHN0YXJ0SW5kZXggJiYgaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICBkZWNpbWF0ZWQucHVzaCh7XG4gICAgICAgICAgICAuLi5kYXRhW2ludGVybWVkaWF0ZUluZGV4Ml0sXG4gICAgICAgICAgICB4OiBhdmdYXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID4gMCAmJiBsYXN0SW5kZXggIT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgZGVjaW1hdGVkLnB1c2goZGF0YVtsYXN0SW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIGRlY2ltYXRlZC5wdXNoKHBvaW50KTtcbiAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgY291bnRYID0gMDtcbiAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICAgIG1pbkluZGV4ID0gbWF4SW5kZXggPSBzdGFydEluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlY2ltYXRlZDtcbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KSB7XG4gIGlmIChkYXRhc2V0Ll9kZWNpbWF0ZWQpIHtcbiAgICBjb25zdCBkYXRhID0gZGF0YXNldC5fZGF0YTtcbiAgICBkZWxldGUgZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgIGRlbGV0ZSBkYXRhc2V0Ll9kYXRhO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHt2YWx1ZTogZGF0YX0pO1xuICB9XG59XG5mdW5jdGlvbiBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpIHtcbiAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KSA9PiB7XG4gICAgY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIHBvaW50cykge1xuICBjb25zdCBwb2ludENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGNvdW50O1xuICBjb25zdCB7aVNjYWxlfSA9IG1ldGE7XG4gIGNvbnN0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSBpU2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICBpZiAobWluRGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoX2xvb2t1cEJ5S2V5KHBvaW50cywgaVNjYWxlLmF4aXMsIG1pbikubG8sIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgfVxuICBpZiAobWF4RGVmaW5lZCkge1xuICAgIGNvdW50ID0gX2xpbWl0VmFsdWUoX2xvb2t1cEJ5S2V5KHBvaW50cywgaVNjYWxlLmF4aXMsIG1heCkuaGkgKyAxLCBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgfSBlbHNlIHtcbiAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBjb3VudH07XG59XG52YXIgcGx1Z2luX2RlY2ltYXRpb24gPSB7XG4gIGlkOiAnZGVjaW1hdGlvbicsXG4gIGRlZmF1bHRzOiB7XG4gICAgYWxnb3JpdGhtOiAnbWluLW1heCcsXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gIH0sXG4gIGJlZm9yZUVsZW1lbnRzVXBkYXRlOiAoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBjaGFydC53aWR0aDtcbiAgICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkgPT4ge1xuICAgICAgY29uc3Qge19kYXRhLCBpbmRleEF4aXN9ID0gZGF0YXNldDtcbiAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgY29uc3QgZGF0YSA9IF9kYXRhIHx8IGRhdGFzZXQuZGF0YTtcbiAgICAgIGlmIChyZXNvbHZlKFtpbmRleEF4aXMsIGNoYXJ0Lm9wdGlvbnMuaW5kZXhBeGlzXSkgPT09ICd5Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIW1ldGEuY29udHJvbGxlci5zdXBwb3J0c0RlY2ltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeEF4aXMgPSBjaGFydC5zY2FsZXNbbWV0YS54QXhpc0lEXTtcbiAgICAgIGlmICh4QXhpcy50eXBlICE9PSAnbGluZWFyJyAmJiB4QXhpcy50eXBlICE9PSAndGltZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNoYXJ0Lm9wdGlvbnMucGFyc2luZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQge3N0YXJ0LCBjb3VudH0gPSBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBkYXRhKTtcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IG9wdGlvbnMudGhyZXNob2xkIHx8IDQgKiBhdmFpbGFibGVXaWR0aDtcbiAgICAgIGlmIChjb3VudCA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZihfZGF0YSkpIHtcbiAgICAgICAgZGF0YXNldC5fZGF0YSA9IGRhdGE7XG4gICAgICAgIGRlbGV0ZSBkYXRhc2V0LmRhdGE7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlY2ltYXRlZDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxldCBkZWNpbWF0ZWQ7XG4gICAgICBzd2l0Y2ggKG9wdGlvbnMuYWxnb3JpdGhtKSB7XG4gICAgICBjYXNlICdsdHRiJzpcbiAgICAgICAgZGVjaW1hdGVkID0gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWluLW1heCc6XG4gICAgICAgIGRlY2ltYXRlZCA9IG1pbk1heERlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWNpbWF0aW9uIGFsZ29yaXRobSAnJHtvcHRpb25zLmFsZ29yaXRobX0nYCk7XG4gICAgICB9XG4gICAgICBkYXRhc2V0Ll9kZWNpbWF0ZWQgPSBkZWNpbWF0ZWQ7XG4gICAgfSk7XG4gIH0sXG4gIGRlc3Ryb3koY2hhcnQpIHtcbiAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCB0cG9pbnRzID0gdGFyZ2V0LnBvaW50cztcbiAgY29uc3QgcGFydHMgPSBbXTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgbGV0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnQ7XG4gICAgZW5kID0gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyk7XG4gICAgY29uc3QgYm91bmRzID0gX2dldEJvdW5kcyhwcm9wZXJ0eSwgcG9pbnRzW3N0YXJ0XSwgcG9pbnRzW2VuZF0sIHNlZ21lbnQubG9vcCk7XG4gICAgaWYgKCF0YXJnZXQuc2VnbWVudHMpIHtcbiAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICBzb3VyY2U6IHNlZ21lbnQsXG4gICAgICAgIHRhcmdldDogYm91bmRzLFxuICAgICAgICBzdGFydDogcG9pbnRzW3N0YXJ0XSxcbiAgICAgICAgZW5kOiBwb2ludHNbZW5kXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0U2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0YXJnZXQsIGJvdW5kcyk7XG4gICAgZm9yIChjb25zdCB0Z3Qgb2YgdGFyZ2V0U2VnbWVudHMpIHtcbiAgICAgIGNvbnN0IHN1YkJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHRwb2ludHNbdGd0LnN0YXJ0XSwgdHBvaW50c1t0Z3QuZW5kXSwgdGd0Lmxvb3ApO1xuICAgICAgY29uc3QgZmlsbFNvdXJjZXMgPSBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgc3ViQm91bmRzKTtcbiAgICAgIGZvciAoY29uc3QgZmlsbFNvdXJjZSBvZiBmaWxsU291cmNlcykge1xuICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICBzb3VyY2U6IGZpbGxTb3VyY2UsXG4gICAgICAgICAgdGFyZ2V0OiB0Z3QsXG4gICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnc3RhcnQnLCBNYXRoLm1heClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdlbmQnLCBNYXRoLm1pbilcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFydHM7XG59XG5mdW5jdGlvbiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBmaXJzdCwgbGFzdCwgbG9vcCkge1xuICBpZiAobG9vcCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc3RhcnQgPSBmaXJzdFtwcm9wZXJ0eV07XG4gIGxldCBlbmQgPSBsYXN0W3Byb3BlcnR5XTtcbiAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgc3RhcnQgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgIGVuZCA9IF9ub3JtYWxpemVBbmdsZShlbmQpO1xuICB9XG4gIHJldHVybiB7cHJvcGVydHksIHN0YXJ0LCBlbmR9O1xufVxuZnVuY3Rpb24gX3BvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSkge1xuICBjb25zdCB7eCA9IG51bGwsIHkgPSBudWxsfSA9IGJvdW5kYXJ5IHx8IHt9O1xuICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBsaW5lLnNlZ21lbnRzLmZvckVhY2goKHtzdGFydCwgZW5kfSkgPT4ge1xuICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBsaW5lUG9pbnRzKTtcbiAgICBjb25zdCBmaXJzdCA9IGxpbmVQb2ludHNbc3RhcnRdO1xuICAgIGNvbnN0IGxhc3QgPSBsaW5lUG9pbnRzW2VuZF07XG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHBvaW50cy5wdXNoKHt4OiBmaXJzdC54LCB5fSk7XG4gICAgICBwb2ludHMucHVzaCh7eDogbGFzdC54LCB5fSk7XG4gICAgfSBlbHNlIGlmICh4ICE9PSBudWxsKSB7XG4gICAgICBwb2ludHMucHVzaCh7eCwgeTogZmlyc3QueX0pO1xuICAgICAgcG9pbnRzLnB1c2goe3gsIHk6IGxhc3QueX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwb2ludHM7XG59XG5mdW5jdGlvbiBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKSB7XG4gIGZvciAoO2VuZCA+IHN0YXJ0OyBlbmQtLSkge1xuICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2VuZF07XG4gICAgaWYgKCFpc05hTihwb2ludC54KSAmJiAhaXNOYU4ocG9pbnQueSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gX2dldEVkZ2UoYSwgYiwgcHJvcCwgZm4pIHtcbiAgaWYgKGEgJiYgYikge1xuICAgIHJldHVybiBmbihhW3Byb3BdLCBiW3Byb3BdKTtcbiAgfVxuICByZXR1cm4gYSA/IGFbcHJvcF0gOiBiID8gYltwcm9wXSA6IDA7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpIHtcbiAgbGV0IHBvaW50cyA9IFtdO1xuICBsZXQgX2xvb3AgPSBmYWxzZTtcbiAgaWYgKGlzQXJyYXkoYm91bmRhcnkpKSB7XG4gICAgX2xvb3AgPSB0cnVlO1xuICAgIHBvaW50cyA9IGJvdW5kYXJ5O1xuICB9IGVsc2Uge1xuICAgIHBvaW50cyA9IF9wb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpO1xuICB9XG4gIHJldHVybiBwb2ludHMubGVuZ3RoID8gbmV3IExpbmVFbGVtZW50KHtcbiAgICBwb2ludHMsXG4gICAgb3B0aW9uczoge3RlbnNpb246IDB9LFxuICAgIF9sb29wLFxuICAgIF9mdWxsTG9vcDogX2xvb3BcbiAgfSkgOiBudWxsO1xufVxuZnVuY3Rpb24gX3Nob3VsZEFwcGx5RmlsbChzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2UuZmlsbCAhPT0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGluZGV4LCBwcm9wYWdhdGUpIHtcbiAgY29uc3Qgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gIGxldCBmaWxsID0gc291cmNlLmZpbGw7XG4gIGNvbnN0IHZpc2l0ZWQgPSBbaW5kZXhdO1xuICBsZXQgdGFyZ2V0O1xuICBpZiAoIXByb3BhZ2F0ZSkge1xuICAgIHJldHVybiBmaWxsO1xuICB9XG4gIHdoaWxlIChmaWxsICE9PSBmYWxzZSAmJiB2aXNpdGVkLmluZGV4T2YoZmlsbCkgPT09IC0xKSB7XG4gICAgaWYgKCFpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgcmV0dXJuIGZpbGw7XG4gICAgfVxuICAgIHRhcmdldCA9IHNvdXJjZXNbZmlsbF07XG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRhcmdldC52aXNpYmxlKSB7XG4gICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgdmlzaXRlZC5wdXNoKGZpbGwpO1xuICAgIGZpbGwgPSB0YXJnZXQuZmlsbDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBfZGVjb2RlRmlsbChsaW5lLCBpbmRleCwgY291bnQpIHtcbiAgY29uc3QgZmlsbCA9IHBhcnNlRmlsbE9wdGlvbihsaW5lKTtcbiAgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgcmV0dXJuIGlzTmFOKGZpbGwudmFsdWUpID8gZmFsc2UgOiBmaWxsO1xuICB9XG4gIGxldCB0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwpO1xuICBpZiAoaXNOdW1iZXJGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuICAgIHJldHVybiBkZWNvZGVUYXJnZXRJbmRleChmaWxsWzBdLCBpbmRleCwgdGFyZ2V0LCBjb3VudCk7XG4gIH1cbiAgcmV0dXJuIFsnb3JpZ2luJywgJ3N0YXJ0JywgJ2VuZCcsICdzdGFjaycsICdzaGFwZSddLmluZGV4T2YoZmlsbCkgPj0gMCAmJiBmaWxsO1xufVxuZnVuY3Rpb24gZGVjb2RlVGFyZ2V0SW5kZXgoZmlyc3RDaCwgaW5kZXgsIHRhcmdldCwgY291bnQpIHtcbiAgaWYgKGZpcnN0Q2ggPT09ICctJyB8fCBmaXJzdENoID09PSAnKycpIHtcbiAgICB0YXJnZXQgPSBpbmRleCArIHRhcmdldDtcbiAgfVxuICBpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKSB7XG4gIGxldCBwaXhlbCA9IG51bGw7XG4gIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgcGl4ZWwgPSBzY2FsZS5ib3R0b207XG4gIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICBwaXhlbCA9IHNjYWxlLnRvcDtcbiAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgIHBpeGVsID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShmaWxsLnZhbHVlKTtcbiAgfSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcbiAgICBwaXhlbCA9IHNjYWxlLmdldEJhc2VQaXhlbCgpO1xuICB9XG4gIHJldHVybiBwaXhlbDtcbn1cbmZ1bmN0aW9uIF9nZXRUYXJnZXRWYWx1ZShmaWxsLCBzY2FsZSwgc3RhcnRWYWx1ZSkge1xuICBsZXQgdmFsdWU7XG4gIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgdmFsdWUgPSBzdGFydFZhbHVlO1xuICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgdmFsdWUgPSBzY2FsZS5vcHRpb25zLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICB2YWx1ZSA9IGZpbGwudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBzY2FsZS5nZXRCYXNlVmFsdWUoKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBwYXJzZUZpbGxPcHRpb24obGluZSkge1xuICBjb25zdCBvcHRpb25zID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBmaWxsT3B0aW9uID0gb3B0aW9ucy5maWxsO1xuICBsZXQgZmlsbCA9IHZhbHVlT3JEZWZhdWx0KGZpbGxPcHRpb24gJiYgZmlsbE9wdGlvbi50YXJnZXQsIGZpbGxPcHRpb24pO1xuICBpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZmlsbCA9ICEhb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gIH1cbiAgaWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGZpbGwgPT09IHRydWUpIHtcbiAgICByZXR1cm4gJ29yaWdpbic7XG4gIH1cbiAgcmV0dXJuIGZpbGw7XG59XG5cbmZ1bmN0aW9uIF9idWlsZFN0YWNrTGluZShzb3VyY2UpIHtcbiAgY29uc3Qge3NjYWxlLCBpbmRleCwgbGluZX0gPSBzb3VyY2U7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGNvbnN0IHNvdXJjZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCBsaW5lc0JlbG93ID0gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpO1xuICBsaW5lc0JlbG93LnB1c2goX2NyZWF0ZUJvdW5kYXJ5TGluZSh7eDogbnVsbCwgeTogc2NhbGUuYm90dG9tfSwgbGluZSkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGZvciAobGV0IGogPSBzZWdtZW50LnN0YXJ0OyBqIDw9IHNlZ21lbnQuZW5kOyBqKyspIHtcbiAgICAgIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnRzW2pdLCBsaW5lc0JlbG93KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBMaW5lRWxlbWVudCh7cG9pbnRzLCBvcHRpb25zOiB7fX0pO1xufVxuZnVuY3Rpb24gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpIHtcbiAgY29uc3QgYmVsb3cgPSBbXTtcbiAgY29uc3QgbWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygnbGluZScpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgIGlmIChtZXRhLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICghbWV0YS5oaWRkZW4pIHtcbiAgICAgIGJlbG93LnVuc2hpZnQobWV0YS5kYXRhc2V0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJlbG93O1xufVxuZnVuY3Rpb24gYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludCwgbGluZXNCZWxvdykge1xuICBjb25zdCBwb3N0cG9uZWQgPSBbXTtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lc0JlbG93Lmxlbmd0aDsgaisrKSB7XG4gICAgY29uc3QgbGluZSA9IGxpbmVzQmVsb3dbal07XG4gICAgY29uc3Qge2ZpcnN0LCBsYXN0LCBwb2ludH0gPSBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsICd4Jyk7XG4gICAgaWYgKCFwb2ludCB8fCAoZmlyc3QgJiYgbGFzdCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIHBvc3Rwb25lZC51bnNoaWZ0KHBvaW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwb2ludHMucHVzaCguLi5wb3N0cG9uZWQpO1xufVxuZnVuY3Rpb24gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCBwcm9wZXJ0eSkge1xuICBjb25zdCBwb2ludCA9IGxpbmUuaW50ZXJwb2xhdGUoc291cmNlUG9pbnQsIHByb3BlcnR5KTtcbiAgaWYgKCFwb2ludCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBwb2ludFZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgbGV0IGZpcnN0ID0gZmFsc2U7XG4gIGxldCBsYXN0ID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgY29uc3QgZmlyc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5zdGFydF1bcHJvcGVydHldO1xuICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5lbmRdW3Byb3BlcnR5XTtcbiAgICBpZiAoX2lzQmV0d2Vlbihwb2ludFZhbHVlLCBmaXJzdFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICBmaXJzdCA9IHBvaW50VmFsdWUgPT09IGZpcnN0VmFsdWU7XG4gICAgICBsYXN0ID0gcG9pbnRWYWx1ZSA9PT0gbGFzdFZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB7Zmlyc3QsIGxhc3QsIHBvaW50fTtcbn1cblxuY2xhc3Mgc2ltcGxlQXJjIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHRoaXMueCA9IG9wdHMueDtcbiAgICB0aGlzLnkgPSBvcHRzLnk7XG4gICAgdGhpcy5yYWRpdXMgPSBvcHRzLnJhZGl1cztcbiAgfVxuICBwYXRoU2VnbWVudChjdHgsIGJvdW5kcywgb3B0cykge1xuICAgIGNvbnN0IHt4LCB5LCByYWRpdXN9ID0gdGhpcztcbiAgICBib3VuZHMgPSBib3VuZHMgfHwge3N0YXJ0OiAwLCBlbmQ6IFRBVX07XG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIGJvdW5kcy5lbmQsIGJvdW5kcy5zdGFydCwgdHJ1ZSk7XG4gICAgcmV0dXJuICFvcHRzLmJvdW5kcztcbiAgfVxuICBpbnRlcnBvbGF0ZShwb2ludCkge1xuICAgIGNvbnN0IHt4LCB5LCByYWRpdXN9ID0gdGhpcztcbiAgICBjb25zdCBhbmdsZSA9IHBvaW50LmFuZ2xlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzLFxuICAgICAgeTogeSArIE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgIGFuZ2xlXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0VGFyZ2V0KHNvdXJjZSkge1xuICBjb25zdCB7Y2hhcnQsIGZpbGwsIGxpbmV9ID0gc291cmNlO1xuICBpZiAoaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICByZXR1cm4gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGZpbGwpO1xuICB9XG4gIGlmIChmaWxsID09PSAnc3RhY2snKSB7XG4gICAgcmV0dXJuIF9idWlsZFN0YWNrTGluZShzb3VyY2UpO1xuICB9XG4gIGlmIChmaWxsID09PSAnc2hhcGUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgYm91bmRhcnkgPSBjb21wdXRlQm91bmRhcnkoc291cmNlKTtcbiAgaWYgKGJvdW5kYXJ5IGluc3RhbmNlb2Ygc2ltcGxlQXJjKSB7XG4gICAgcmV0dXJuIGJvdW5kYXJ5O1xuICB9XG4gIHJldHVybiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKTtcbn1cbmZ1bmN0aW9uIGdldExpbmVCeUluZGV4KGNoYXJ0LCBpbmRleCkge1xuICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICBjb25zdCB2aXNpYmxlID0gbWV0YSAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KTtcbiAgcmV0dXJuIHZpc2libGUgPyBtZXRhLmRhdGFzZXQgOiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuICBjb25zdCBzY2FsZSA9IHNvdXJjZS5zY2FsZSB8fCB7fTtcbiAgaWYgKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSkge1xuICAgIHJldHVybiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpO1xuICB9XG4gIHJldHVybiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgY29uc3Qge3NjYWxlID0ge30sIGZpbGx9ID0gc291cmNlO1xuICBjb25zdCBwaXhlbCA9IF9nZXRUYXJnZXRQaXhlbChmaWxsLCBzY2FsZSk7XG4gIGlmIChpc051bWJlckZpbml0ZShwaXhlbCkpIHtcbiAgICBjb25zdCBob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGhvcml6b250YWwgPyBwaXhlbCA6IG51bGwsXG4gICAgICB5OiBob3Jpem9udGFsID8gbnVsbCA6IHBpeGVsXG4gICAgfTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSkge1xuICBjb25zdCB7c2NhbGUsIGZpbGx9ID0gc291cmNlO1xuICBjb25zdCBvcHRpb25zID0gc2NhbGUub3B0aW9ucztcbiAgY29uc3QgbGVuZ3RoID0gc2NhbGUuZ2V0TGFiZWxzKCkubGVuZ3RoO1xuICBjb25zdCBzdGFydCA9IG9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1heCA6IHNjYWxlLm1pbjtcbiAgY29uc3QgdmFsdWUgPSBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0KTtcbiAgY29uc3QgdGFyZ2V0ID0gW107XG4gIGlmIChvcHRpb25zLmdyaWQuY2lyY3VsYXIpIHtcbiAgICBjb25zdCBjZW50ZXIgPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCwgc3RhcnQpO1xuICAgIHJldHVybiBuZXcgc2ltcGxlQXJjKHtcbiAgICAgIHg6IGNlbnRlci54LFxuICAgICAgeTogY2VudGVyLnksXG4gICAgICByYWRpdXM6IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKVxuICAgIH0pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB0YXJnZXQucHVzaChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdmFsdWUpKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfZHJhd2ZpbGwoY3R4LCBzb3VyY2UsIGFyZWEpIHtcbiAgY29uc3QgdGFyZ2V0ID0gX2dldFRhcmdldChzb3VyY2UpO1xuICBjb25zdCB7bGluZSwgc2NhbGUsIGF4aXN9ID0gc291cmNlO1xuICBjb25zdCBsaW5lT3B0cyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgZmlsbE9wdGlvbiA9IGxpbmVPcHRzLmZpbGw7XG4gIGNvbnN0IGNvbG9yID0gbGluZU9wdHMuYmFja2dyb3VuZENvbG9yO1xuICBjb25zdCB7YWJvdmUgPSBjb2xvciwgYmVsb3cgPSBjb2xvcn0gPSBmaWxsT3B0aW9uIHx8IHt9O1xuICBpZiAodGFyZ2V0ICYmIGxpbmUucG9pbnRzLmxlbmd0aCkge1xuICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgZG9GaWxsKGN0eCwge2xpbmUsIHRhcmdldCwgYWJvdmUsIGJlbG93LCBhcmVhLCBzY2FsZSwgYXhpc30pO1xuICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgfVxufVxuZnVuY3Rpb24gZG9GaWxsKGN0eCwgY2ZnKSB7XG4gIGNvbnN0IHtsaW5lLCB0YXJnZXQsIGFib3ZlLCBiZWxvdywgYXJlYSwgc2NhbGV9ID0gY2ZnO1xuICBjb25zdCBwcm9wZXJ0eSA9IGxpbmUuX2xvb3AgPyAnYW5nbGUnIDogY2ZnLmF4aXM7XG4gIGN0eC5zYXZlKCk7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3gnICYmIGJlbG93ICE9PSBhYm92ZSkge1xuICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS50b3ApO1xuICAgIGZpbGwoY3R4LCB7bGluZSwgdGFyZ2V0LCBjb2xvcjogYWJvdmUsIHNjYWxlLCBwcm9wZXJ0eX0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEuYm90dG9tKTtcbiAgfVxuICBmaWxsKGN0eCwge2xpbmUsIHRhcmdldCwgY29sb3I6IGJlbG93LCBzY2FsZSwgcHJvcGVydHl9KTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgY2xpcFkpIHtcbiAgY29uc3Qge3NlZ21lbnRzLCBwb2ludHN9ID0gdGFyZ2V0O1xuICBsZXQgZmlyc3QgPSB0cnVlO1xuICBsZXQgbGluZUxvb3AgPSBmYWxzZTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBjb25zdCB7c3RhcnQsIGVuZH0gPSBzZWdtZW50O1xuICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBwb2ludHNbc3RhcnRdO1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IHBvaW50c1tfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKV07XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBjdHgubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBjbGlwWSk7XG4gICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICB9XG4gICAgbGluZUxvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHttb3ZlOiBsaW5lTG9vcH0pO1xuICAgIGlmIChsaW5lTG9vcCkge1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVRvKGxhc3RQb2ludC54LCBjbGlwWSk7XG4gICAgfVxuICB9XG4gIGN0eC5saW5lVG8odGFyZ2V0LmZpcnN0KCkueCwgY2xpcFkpO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiBmaWxsKGN0eCwgY2ZnKSB7XG4gIGNvbnN0IHtsaW5lLCB0YXJnZXQsIHByb3BlcnR5LCBjb2xvciwgc2NhbGV9ID0gY2ZnO1xuICBjb25zdCBzZWdtZW50cyA9IF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KTtcbiAgZm9yIChjb25zdCB7c291cmNlOiBzcmMsIHRhcmdldDogdGd0LCBzdGFydCwgZW5kfSBvZiBzZWdtZW50cykge1xuICAgIGNvbnN0IHtzdHlsZToge2JhY2tncm91bmRDb2xvciA9IGNvbG9yfSA9IHt9fSA9IHNyYztcbiAgICBjb25zdCBub3RTaGFwZSA9IHRhcmdldCAhPT0gdHJ1ZTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBub3RTaGFwZSAmJiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBzdGFydCwgZW5kKSk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGNvbnN0IGxpbmVMb29wID0gISFsaW5lLnBhdGhTZWdtZW50KGN0eCwgc3JjKTtcbiAgICBsZXQgbG9vcDtcbiAgICBpZiAobm90U2hhcGUpIHtcbiAgICAgIGlmIChsaW5lTG9vcCkge1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIGVuZCwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0TG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgdGd0LCB7bW92ZTogbGluZUxvb3AsIHJldmVyc2U6IHRydWV9KTtcbiAgICAgIGxvb3AgPSBsaW5lTG9vcCAmJiB0YXJnZXRMb29wO1xuICAgICAgaWYgKCFsb29wKSB7XG4gICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgc3RhcnQsIHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKGxvb3AgPyAnZXZlbm9kZCcgOiAnbm9uemVybycpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgYm91bmRzKSB7XG4gIGNvbnN0IHt0b3AsIGJvdHRvbX0gPSBzY2FsZS5jaGFydC5jaGFydEFyZWE7XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQsIGVuZH0gPSBib3VuZHMgfHwge307XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3gnKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5yZWN0KHN0YXJ0LCB0b3AsIGVuZCAtIHN0YXJ0LCBib3R0b20gLSB0b3ApO1xuICAgIGN0eC5jbGlwKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgcG9pbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IGludGVycG9sYXRlZFBvaW50ID0gdGFyZ2V0LmludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSk7XG4gIGlmIChpbnRlcnBvbGF0ZWRQb2ludCkge1xuICAgIGN0eC5saW5lVG8oaW50ZXJwb2xhdGVkUG9pbnQueCwgaW50ZXJwb2xhdGVkUG9pbnQueSk7XG4gIH1cbn1cblxudmFyIGluZGV4ID0ge1xuICBpZDogJ2ZpbGxlcicsXG4gIGFmdGVyRGF0YXNldHNVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY291bnQgPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoO1xuICAgIGNvbnN0IHNvdXJjZXMgPSBbXTtcbiAgICBsZXQgbWV0YSwgaSwgbGluZSwgc291cmNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgICAgc291cmNlID0gbnVsbDtcbiAgICAgIGlmIChsaW5lICYmIGxpbmUub3B0aW9ucyAmJiBsaW5lIGluc3RhbmNlb2YgTGluZUVsZW1lbnQpIHtcbiAgICAgICAgc291cmNlID0ge1xuICAgICAgICAgIHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgZmlsbDogX2RlY29kZUZpbGwobGluZSwgaSwgY291bnQpLFxuICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgIGF4aXM6IG1ldGEuY29udHJvbGxlci5vcHRpb25zLmluZGV4QXhpcyxcbiAgICAgICAgICBzY2FsZTogbWV0YS52U2NhbGUsXG4gICAgICAgICAgbGluZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG1ldGEuJGZpbGxlciA9IHNvdXJjZTtcbiAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5maWxsID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZS5maWxsID0gX3Jlc29sdmVUYXJnZXQoc291cmNlcywgaSwgb3B0aW9ucy5wcm9wYWdhdGUpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkcmF3ID0gb3B0aW9ucy5kcmF3VGltZSA9PT0gJ2JlZm9yZURyYXcnO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzb3VyY2UubGluZS51cGRhdGVDb250cm9sUG9pbnRzKGFyZWEsIHNvdXJjZS5heGlzKTtcbiAgICAgIGlmIChkcmF3ICYmIHNvdXJjZS5maWxsKSB7XG4gICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgYXJlYSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBiZWZvcmVEYXRhc2V0c0RyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0c0RyYXcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGZvciAobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgIGlmIChfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkpIHtcbiAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGF0YXNldERyYXcoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBhcmdzLm1ldGEuJGZpbGxlcjtcbiAgICBpZiAoIV9zaG91bGRBcHBseUZpbGwoc291cmNlKSB8fCBvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldERyYXcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBwcm9wYWdhdGU6IHRydWUsXG4gICAgZHJhd1RpbWU6ICdiZWZvcmVEYXRhc2V0RHJhdydcbiAgfVxufTtcblxuY29uc3QgZ2V0Qm94U2l6ZSA9IChsYWJlbE9wdHMsIGZvbnRTaXplKSA9PiB7XG4gIGxldCB7Ym94SGVpZ2h0ID0gZm9udFNpemUsIGJveFdpZHRoID0gZm9udFNpemV9ID0gbGFiZWxPcHRzO1xuICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICBib3hIZWlnaHQgPSBNYXRoLm1pbihib3hIZWlnaHQsIGZvbnRTaXplKTtcbiAgICBib3hXaWR0aCA9IGxhYmVsT3B0cy5wb2ludFN0eWxlV2lkdGggfHwgTWF0aC5taW4oYm94V2lkdGgsIGZvbnRTaXplKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJveFdpZHRoLFxuICAgIGJveEhlaWdodCxcbiAgICBpdGVtSGVpZ2h0OiBNYXRoLm1heChmb250U2l6ZSwgYm94SGVpZ2h0KVxuICB9O1xufTtcbmNvbnN0IGl0ZW1zRXF1YWwgPSAoYSwgYikgPT4gYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuZGF0YXNldEluZGV4ID09PSBiLmRhdGFzZXRJbmRleCAmJiBhLmluZGV4ID09PSBiLmluZGV4O1xuY2xhc3MgTGVnZW5kIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYWRkZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgdGhpcy5faG92ZXJlZEl0ZW0gPSBudWxsO1xuICAgIHRoaXMuZG91Z2hudXRNb2RlID0gZmFsc2U7XG4gICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB0aGlzLmN0eCA9IGNvbmZpZy5jdHg7XG4gICAgdGhpcy5sZWdlbmRJdGVtcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbHVtblNpemVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGluZVdpZHRocyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZnVsbFNpemUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnM7XG4gICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5idWlsZExhYmVscygpO1xuICAgIHRoaXMuZml0KCk7XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICB0aGlzLmxlZnQgPSB0aGlzLl9tYXJnaW5zLmxlZnQ7XG4gICAgICB0aGlzLnJpZ2h0ID0gdGhpcy53aWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgIHRoaXMudG9wID0gdGhpcy5fbWFyZ2lucy50b3A7XG4gICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgfVxuICBidWlsZExhYmVscygpIHtcbiAgICBjb25zdCBsYWJlbE9wdHMgPSB0aGlzLm9wdGlvbnMubGFiZWxzIHx8IHt9O1xuICAgIGxldCBsZWdlbmRJdGVtcyA9IGNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW3RoaXMuY2hhcnRdLCB0aGlzKSB8fCBbXTtcbiAgICBpZiAobGFiZWxPcHRzLmZpbHRlcikge1xuICAgICAgbGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgfVxuICAgIGlmIChsYWJlbE9wdHMuc29ydCkge1xuICAgICAgbGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5zb3J0KChhLCBiKSA9PiBsYWJlbE9wdHMuc29ydChhLCBiLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICBsZWdlbmRJdGVtcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHRoaXMubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcbiAgfVxuICBmaXQoKSB7XG4gICAgY29uc3Qge29wdGlvbnMsIGN0eH0gPSB0aGlzO1xuICAgIGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbE9wdHMgPSBvcHRpb25zLmxhYmVscztcbiAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICBjb25zdCB7Ym94V2lkdGgsIGl0ZW1IZWlnaHR9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICBsZXQgd2lkdGgsIGhlaWdodDtcbiAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHdpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgIGhlaWdodCA9IHRoaXMuX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICB3aWR0aCA9IHRoaXMuX2ZpdENvbHModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IE1hdGgubWluKHdpZHRoLCBvcHRpb25zLm1heFdpZHRoIHx8IHRoaXMubWF4V2lkdGgpO1xuICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBvcHRpb25zLm1heEhlaWdodCB8fCB0aGlzLm1heEhlaWdodCk7XG4gIH1cbiAgX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IHtjdHgsIG1heFdpZHRoLCBvcHRpb25zOiB7bGFiZWxzOiB7cGFkZGluZ319fSA9IHRoaXM7XG4gICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgY29uc3QgbGluZVdpZHRocyA9IHRoaXMubGluZVdpZHRocyA9IFswXTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgbGV0IHRvdGFsSGVpZ2h0ID0gdGl0bGVIZWlnaHQ7XG4gICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgbGV0IHJvdyA9IC0xO1xuICAgIGxldCB0b3AgPSAtbGluZUhlaWdodDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgIGlmIChpID09PSAwIHx8IGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArIGl0ZW1XaWR0aCArIDIgKiBwYWRkaW5nID4gbWF4V2lkdGgpIHtcbiAgICAgICAgdG90YWxIZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIChpID4gMCA/IDAgOiAxKV0gPSAwO1xuICAgICAgICB0b3AgKz0gbGluZUhlaWdodDtcbiAgICAgICAgcm93Kys7XG4gICAgICB9XG4gICAgICBoaXRib3hlc1tpXSA9IHtsZWZ0OiAwLCB0b3AsIHJvdywgd2lkdGg6IGl0ZW1XaWR0aCwgaGVpZ2h0OiBpdGVtSGVpZ2h0fTtcbiAgICAgIGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArPSBpdGVtV2lkdGggKyBwYWRkaW5nO1xuICAgIH0pO1xuICAgIHJldHVybiB0b3RhbEhlaWdodDtcbiAgfVxuICBfZml0Q29scyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgY29uc3Qge2N0eCwgbWF4SGVpZ2h0LCBvcHRpb25zOiB7bGFiZWxzOiB7cGFkZGluZ319fSA9IHRoaXM7XG4gICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgY29uc3QgY29sdW1uU2l6ZXMgPSB0aGlzLmNvbHVtblNpemVzID0gW107XG4gICAgY29uc3QgaGVpZ2h0TGltaXQgPSBtYXhIZWlnaHQgLSB0aXRsZUhlaWdodDtcbiAgICBsZXQgdG90YWxXaWR0aCA9IHBhZGRpbmc7XG4gICAgbGV0IGN1cnJlbnRDb2xXaWR0aCA9IDA7XG4gICAgbGV0IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgIGxldCBsZWZ0ID0gMDtcbiAgICBsZXQgY29sID0gMDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgIGlmIChpID4gMCAmJiBjdXJyZW50Q29sSGVpZ2h0ICsgaXRlbUhlaWdodCArIDIgKiBwYWRkaW5nID4gaGVpZ2h0TGltaXQpIHtcbiAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjb2x1bW5TaXplcy5wdXNoKHt3aWR0aDogY3VycmVudENvbFdpZHRoLCBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHR9KTtcbiAgICAgICAgbGVmdCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjb2wrKztcbiAgICAgICAgY3VycmVudENvbFdpZHRoID0gY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgICB9XG4gICAgICBoaXRib3hlc1tpXSA9IHtsZWZ0LCB0b3A6IGN1cnJlbnRDb2xIZWlnaHQsIGNvbCwgd2lkdGg6IGl0ZW1XaWR0aCwgaGVpZ2h0OiBpdGVtSGVpZ2h0fTtcbiAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IE1hdGgubWF4KGN1cnJlbnRDb2xXaWR0aCwgaXRlbVdpZHRoKTtcbiAgICAgIGN1cnJlbnRDb2xIZWlnaHQgKz0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgfSk7XG4gICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG4gICAgY29sdW1uU2l6ZXMucHVzaCh7d2lkdGg6IGN1cnJlbnRDb2xXaWR0aCwgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0fSk7XG4gICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gIH1cbiAgYWRqdXN0SGl0Qm94ZXMoKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGNvbnN0IHtsZWdlbmRIaXRCb3hlczogaGl0Ym94ZXMsIG9wdGlvbnM6IHthbGlnbiwgbGFiZWxzOiB7cGFkZGluZ30sIHJ0bH19ID0gdGhpcztcbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKHJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgbGV0IHJvdyA9IDA7XG4gICAgICBsZXQgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpIHtcbiAgICAgICAgaWYgKHJvdyAhPT0gaGl0Ym94LnJvdykge1xuICAgICAgICAgIHJvdyA9IGhpdGJveC5yb3c7XG4gICAgICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICB9XG4gICAgICAgIGhpdGJveC50b3AgKz0gdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngobGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgIGxlZnQgKz0gaGl0Ym94LndpZHRoICsgcGFkZGluZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvbCA9IDA7XG4gICAgICBsZXQgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpIHtcbiAgICAgICAgaWYgKGhpdGJveC5jb2wgIT09IGNvbCkge1xuICAgICAgICAgIGNvbCA9IGhpdGJveC5jb2w7XG4gICAgICAgICAgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGhpdGJveC50b3AgPSB0b3A7XG4gICAgICAgIGhpdGJveC5sZWZ0ICs9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngoaGl0Ym94LmxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICB0b3AgKz0gaGl0Ym94LmhlaWdodCArIHBhZGRpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlzSG9yaXpvbnRhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nO1xuICB9XG4gIGRyYXcoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgIGNsaXBBcmVhKGN0eCwgdGhpcyk7XG4gICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICB9XG4gIF9kcmF3KCkge1xuICAgIGNvbnN0IHtvcHRpb25zOiBvcHRzLCBjb2x1bW5TaXplcywgbGluZVdpZHRocywgY3R4fSA9IHRoaXM7XG4gICAgY29uc3Qge2FsaWduLCBsYWJlbHM6IGxhYmVsT3B0c30gPSBvcHRzO1xuICAgIGNvbnN0IGRlZmF1bHRDb2xvciA9IGRlZmF1bHRzLmNvbG9yO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0cy5ydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICBjb25zdCB7Y29sb3I6IGZvbnRDb2xvciwgcGFkZGluZ30gPSBsYWJlbE9wdHM7XG4gICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICBjb25zdCBoYWxmRm9udFNpemUgPSBmb250U2l6ZSAvIDI7XG4gICAgbGV0IGN1cnNvcjtcbiAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKCdsZWZ0Jyk7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGN0eC5saW5lV2lkdGggPSAwLjU7XG4gICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgIGNvbnN0IHtib3hXaWR0aCwgYm94SGVpZ2h0LCBpdGVtSGVpZ2h0fSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgY29uc3QgZHJhd0xlZ2VuZEJveCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgIGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCB8fCBpc05hTihib3hIZWlnaHQpIHx8IGJveEhlaWdodCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCAxKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCAnYnV0dCcpO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgMCk7XG4gICAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVKb2luLCAnbWl0ZXInKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2gsIFtdKSk7XG4gICAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgICAgcmFkaXVzOiBib3hIZWlnaHQgKiBNYXRoLlNRUlQyIC8gMixcbiAgICAgICAgICBwb2ludFN0eWxlOiBsZWdlbmRJdGVtLnBvaW50U3R5bGUsXG4gICAgICAgICAgcm90YXRpb246IGxlZ2VuZEl0ZW0ucm90YXRpb24sXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IGxpbmVXaWR0aFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLnhQbHVzKHgsIGJveFdpZHRoIC8gMik7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSB5ICsgaGFsZkZvbnRTaXplO1xuICAgICAgICBkcmF3UG9pbnRMZWdlbmQoY3R4LCBkcmF3T3B0aW9ucywgY2VudGVyWCwgY2VudGVyWSwgbGFiZWxPcHRzLnBvaW50U3R5bGVXaWR0aCAmJiBib3hXaWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB5Qm94VG9wID0geSArIE1hdGgubWF4KChmb250U2l6ZSAtIGJveEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgY29uc3QgeEJveExlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cih4LCBib3hXaWR0aCk7XG4gICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMobGVnZW5kSXRlbS5ib3JkZXJSYWRpdXMpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSh2ID0+IHYgIT09IDApKSB7XG4gICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgeDogeEJveExlZnQsXG4gICAgICAgICAgICB5OiB5Qm94VG9wLFxuICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHgucmVjdCh4Qm94TGVmdCwgeUJveFRvcCwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgaWYgKGxpbmVXaWR0aCAhPT0gMCkge1xuICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIGNvbnN0IGZpbGxUZXh0ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgcmVuZGVyVGV4dChjdHgsIGxlZ2VuZEl0ZW0udGV4dCwgeCwgeSArIChpdGVtSGVpZ2h0IC8gMiksIGxhYmVsRm9udCwge1xuICAgICAgICBzdHJpa2V0aHJvdWdoOiBsZWdlbmRJdGVtLmhpZGRlbixcbiAgICAgICAgdGV4dEFsaWduOiBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduKVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgY3Vyc29yID0ge1xuICAgICAgICB4OiBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIGxpbmVXaWR0aHNbMF0pLFxuICAgICAgICB5OiB0aGlzLnRvcCArIHBhZGRpbmcgKyB0aXRsZUhlaWdodCxcbiAgICAgICAgbGluZTogMFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3Vyc29yID0ge1xuICAgICAgICB4OiB0aGlzLmxlZnQgKyBwYWRkaW5nLFxuICAgICAgICB5OiBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbMF0uaGVpZ2h0KSxcbiAgICAgICAgbGluZTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpID0+IHtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yIHx8IGZvbnRDb2xvcjtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBsZWdlbmRJdGVtLmZvbnRDb2xvciB8fCBmb250Q29sb3I7XG4gICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgIGNvbnN0IHRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24gfHwgKGxlZ2VuZEl0ZW0udGV4dEFsaWduID0gbGFiZWxPcHRzLnRleHRBbGlnbikpO1xuICAgICAgY29uc3Qgd2lkdGggPSBib3hXaWR0aCArIGhhbGZGb250U2l6ZSArIHRleHRXaWR0aDtcbiAgICAgIGxldCB4ID0gY3Vyc29yLng7XG4gICAgICBsZXQgeSA9IGN1cnNvci55O1xuICAgICAgcnRsSGVscGVyLnNldFdpZHRoKHRoaXMud2lkdGgpO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBpZiAoaSA+IDAgJiYgeCArIHdpZHRoICsgcGFkZGluZyA+IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICB5ID0gY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICBjdXJzb3IubGluZSsrO1xuICAgICAgICAgIHggPSBjdXJzb3IueCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1tjdXJzb3IubGluZV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGkgPiAwICYmIHkgKyBsaW5lSGVpZ2h0ID4gdGhpcy5ib3R0b20pIHtcbiAgICAgICAgeCA9IGN1cnNvci54ID0geCArIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS53aWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgIHkgPSBjdXJzb3IueSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0uaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlYWxYID0gcnRsSGVscGVyLngoeCk7XG4gICAgICBkcmF3TGVnZW5kQm94KHJlYWxYLCB5LCBsZWdlbmRJdGVtKTtcbiAgICAgIHggPSBfdGV4dFgodGV4dEFsaWduLCB4ICsgYm94V2lkdGggKyBoYWxmRm9udFNpemUsIGlzSG9yaXpvbnRhbCA/IHggKyB3aWR0aCA6IHRoaXMucmlnaHQsIG9wdHMucnRsKTtcbiAgICAgIGZpbGxUZXh0KHJ0bEhlbHBlci54KHgpLCB5LCBsZWdlbmRJdGVtKTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgY3Vyc29yLnggKz0gd2lkdGggKyBwYWRkaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN0b3JlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgfVxuICBkcmF3VGl0bGUoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aXRsZU9wdHMgPSBvcHRzLnRpdGxlO1xuICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgY29uc3QgdGl0bGVQYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlT3B0cy5wYWRkaW5nKTtcbiAgICBpZiAoIXRpdGxlT3B0cy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0cy5ydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aXRsZU9wdHMucG9zaXRpb247XG4gICAgY29uc3QgaGFsZkZvbnRTaXplID0gdGl0bGVGb250LnNpemUgLyAyO1xuICAgIGNvbnN0IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplID0gdGl0bGVQYWRkaW5nLnRvcCArIGhhbGZGb250U2l6ZTtcbiAgICBsZXQgeTtcbiAgICBsZXQgbGVmdCA9IHRoaXMubGVmdDtcbiAgICBsZXQgbWF4V2lkdGggPSB0aGlzLndpZHRoO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBtYXhXaWR0aCA9IE1hdGgubWF4KC4uLnRoaXMubGluZVdpZHRocyk7XG4gICAgICB5ID0gdGhpcy50b3AgKyB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZTtcbiAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCBsZWZ0LCB0aGlzLnJpZ2h0IC0gbWF4V2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYXhIZWlnaHQgPSB0aGlzLmNvbHVtblNpemVzLnJlZHVjZSgoYWNjLCBzaXplKSA9PiBNYXRoLm1heChhY2MsIHNpemUuaGVpZ2h0KSwgMCk7XG4gICAgICB5ID0gdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgKyBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCB0aGlzLnRvcCwgdGhpcy5ib3R0b20gLSBtYXhIZWlnaHQgLSBvcHRzLmxhYmVscy5wYWRkaW5nIC0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCkpO1xuICAgIH1cbiAgICBjb25zdCB4ID0gX2FsaWduU3RhcnRFbmQocG9zaXRpb24sIGxlZnQsIGxlZnQgKyBtYXhXaWR0aCk7XG4gICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oX3RvTGVmdFJpZ2h0Q2VudGVyKHBvc2l0aW9uKSk7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRpdGxlT3B0cy5jb2xvcjtcbiAgICBjdHguZmlsbFN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGVPcHRzLnRleHQsIHgsIHksIHRpdGxlRm9udCk7XG4gIH1cbiAgX2NvbXB1dGVUaXRsZUhlaWdodCgpIHtcbiAgICBjb25zdCB0aXRsZU9wdHMgPSB0aGlzLm9wdGlvbnMudGl0bGU7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KHRpdGxlT3B0cy5mb250KTtcbiAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgIHJldHVybiB0aXRsZU9wdHMuZGlzcGxheSA/IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVQYWRkaW5nLmhlaWdodCA6IDA7XG4gIH1cbiAgX2dldExlZ2VuZEl0ZW1BdCh4LCB5KSB7XG4gICAgbGV0IGksIGhpdEJveCwgbGg7XG4gICAgaWYgKF9pc0JldHdlZW4oeCwgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KVxuICAgICAgJiYgX2lzQmV0d2Vlbih5LCB0aGlzLnRvcCwgdGhpcy5ib3R0b20pKSB7XG4gICAgICBsaCA9IHRoaXMubGVnZW5kSGl0Qm94ZXM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaGl0Qm94ID0gbGhbaV07XG4gICAgICAgIGlmIChfaXNCZXR3ZWVuKHgsIGhpdEJveC5sZWZ0LCBoaXRCb3gubGVmdCArIGhpdEJveC53aWR0aClcbiAgICAgICAgICAmJiBfaXNCZXR3ZWVuKHksIGhpdEJveC50b3AsIGhpdEJveC50b3AgKyBoaXRCb3guaGVpZ2h0KSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxlZ2VuZEl0ZW1zW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGhhbmRsZUV2ZW50KGUpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICghaXNMaXN0ZW5lZChlLnR5cGUsIG9wdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhvdmVyZWRJdGVtID0gdGhpcy5fZ2V0TGVnZW5kSXRlbUF0KGUueCwgZS55KTtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2Vtb3ZlJyB8fCBlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5faG92ZXJlZEl0ZW07XG4gICAgICBjb25zdCBzYW1lSXRlbSA9IGl0ZW1zRXF1YWwocHJldmlvdXMsIGhvdmVyZWRJdGVtKTtcbiAgICAgIGlmIChwcmV2aW91cyAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbZSwgcHJldmlvdXMsIHRoaXNdLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hvdmVyZWRJdGVtID0gaG92ZXJlZEl0ZW07XG4gICAgICBpZiAoaG92ZXJlZEl0ZW0gJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW2UsIGhvdmVyZWRJdGVtLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChob3ZlcmVkSXRlbSkge1xuICAgICAgY2FsbGJhY2sob3B0cy5vbkNsaWNrLCBbZSwgaG92ZXJlZEl0ZW0sIHRoaXNdLCB0aGlzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTGlzdGVuZWQodHlwZSwgb3B0cykge1xuICBpZiAoKHR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IHR5cGUgPT09ICdtb3VzZW91dCcpICYmIChvcHRzLm9uSG92ZXIgfHwgb3B0cy5vbkxlYXZlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvcHRzLm9uQ2xpY2sgJiYgKHR5cGUgPT09ICdjbGljaycgfHwgdHlwZSA9PT0gJ21vdXNldXAnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbnZhciBwbHVnaW5fbGVnZW5kID0ge1xuICBpZDogJ2xlZ2VuZCcsXG4gIF9lbGVtZW50OiBMZWdlbmQsXG4gIHN0YXJ0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZCA9IG5ldyBMZWdlbmQoe2N0eDogY2hhcnQuY3R4LCBvcHRpb25zLCBjaGFydH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCBsZWdlbmQpO1xuICB9LFxuICBzdG9wKGNoYXJ0KSB7XG4gICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIGNoYXJ0LmxlZ2VuZCk7XG4gICAgZGVsZXRlIGNoYXJ0LmxlZ2VuZDtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICBsZWdlbmQub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH0sXG4gIGFmdGVyVXBkYXRlKGNoYXJ0KSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgIGxlZ2VuZC5idWlsZExhYmVscygpO1xuICAgIGxlZ2VuZC5hZGp1c3RIaXRCb3hlcygpO1xuICB9LFxuICBhZnRlckV2ZW50KGNoYXJ0LCBhcmdzKSB7XG4gICAgaWYgKCFhcmdzLnJlcGxheSkge1xuICAgICAgY2hhcnQubGVnZW5kLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQpO1xuICAgIH1cbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgd2VpZ2h0OiAxMDAwLFxuICAgIG9uQ2xpY2soZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGxlZ2VuZEl0ZW0uZGF0YXNldEluZGV4O1xuICAgICAgY29uc3QgY2kgPSBsZWdlbmQuY2hhcnQ7XG4gICAgICBpZiAoY2kuaXNEYXRhc2V0VmlzaWJsZShpbmRleCkpIHtcbiAgICAgICAgY2kuaGlkZShpbmRleCk7XG4gICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNpLnNob3coaW5kZXgpO1xuICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Ib3ZlcjogbnVsbCxcbiAgICBvbkxlYXZlOiBudWxsLFxuICAgIGxhYmVsczoge1xuICAgICAgY29sb3I6IChjdHgpID0+IGN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgYm94V2lkdGg6IDQwLFxuICAgICAgcGFkZGluZzogMTAsXG4gICAgICBnZW5lcmF0ZUxhYmVscyhjaGFydCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG4gICAgICAgIGNvbnN0IHtsYWJlbHM6IHt1c2VQb2ludFN0eWxlLCBwb2ludFN0eWxlLCB0ZXh0QWxpZ24sIGNvbG9yfX0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKG1ldGEpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh1c2VQb2ludFN0eWxlID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0b1BhZGRpbmcoc3R5bGUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiBkYXRhc2V0c1ttZXRhLmluZGV4XS5sYWJlbCxcbiAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgIGhpZGRlbjogIW1ldGEudmlzaWJsZSxcbiAgICAgICAgICAgIGxpbmVDYXA6IHN0eWxlLmJvcmRlckNhcFN0eWxlLFxuICAgICAgICAgICAgbGluZURhc2g6IHN0eWxlLmJvcmRlckRhc2gsXG4gICAgICAgICAgICBsaW5lRGFzaE9mZnNldDogc3R5bGUuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgIGxpbmVKb2luOiBzdHlsZS5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IChib3JkZXJXaWR0aC53aWR0aCArIGJvcmRlcldpZHRoLmhlaWdodCkgLyA0LFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSB8fCBzdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgcm90YXRpb246IHN0eWxlLnJvdGF0aW9uLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24gfHwgc3R5bGUudGV4dEFsaWduLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgY29sb3I6IChjdHgpID0+IGN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICB0ZXh0OiAnJyxcbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICAgIGxhYmVsczoge1xuICAgICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhWydnZW5lcmF0ZUxhYmVscycsICdmaWx0ZXInLCAnc29ydCddLmluY2x1ZGVzKG5hbWUpLFxuICAgIH1cbiAgfSxcbn07XG5cbmNsYXNzIFRpdGxlIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB0aGlzLmN0eCA9IGNvbmZpZy5jdHg7XG4gICAgdGhpcy5fcGFkZGluZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdGhpcy5sZWZ0ID0gMDtcbiAgICB0aGlzLnRvcCA9IDA7XG4gICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IHRoaXMucmlnaHQgPSB0aGlzLmJvdHRvbSA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMud2lkdGggPSB0aGlzLnJpZ2h0ID0gbWF4V2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdHRvbSA9IG1heEhlaWdodDtcbiAgICBjb25zdCBsaW5lQ291bnQgPSBpc0FycmF5KG9wdHMudGV4dCkgPyBvcHRzLnRleHQubGVuZ3RoIDogMTtcbiAgICB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMucGFkZGluZyk7XG4gICAgY29uc3QgdGV4dFNpemUgPSBsaW5lQ291bnQgKiB0b0ZvbnQob3B0cy5mb250KS5saW5lSGVpZ2h0ICsgdGhpcy5fcGFkZGluZy5oZWlnaHQ7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGV4dFNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lkdGggPSB0ZXh0U2l6ZTtcbiAgICB9XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIGNvbnN0IHBvcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICByZXR1cm4gcG9zID09PSAndG9wJyB8fCBwb3MgPT09ICdib3R0b20nO1xuICB9XG4gIF9kcmF3QXJncyhvZmZzZXQpIHtcbiAgICBjb25zdCB7dG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBvcHRpb25zfSA9IHRoaXM7XG4gICAgY29uc3QgYWxpZ24gPSBvcHRpb25zLmFsaWduO1xuICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgbGV0IG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGl0bGVYID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGxlZnQsIHJpZ2h0KTtcbiAgICAgIHRpdGxlWSA9IHRvcCArIG9mZnNldDtcbiAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHRpdGxlWCA9IGxlZnQgKyBvZmZzZXQ7XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgICAgIHJvdGF0aW9uID0gUEkgKiAtMC41O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGl0bGVYID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0b3AsIGJvdHRvbSk7XG4gICAgICAgIHJvdGF0aW9uID0gUEkgKiAwLjU7XG4gICAgICB9XG4gICAgICBtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcbiAgICB9XG4gICAgcmV0dXJuIHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufTtcbiAgfVxuICBkcmF3KCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZm9udE9wdHMgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcbiAgICBjb25zdCBvZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMiArIHRoaXMuX3BhZGRpbmcudG9wO1xuICAgIGNvbnN0IHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufSA9IHRoaXMuX2RyYXdBcmdzKG9mZnNldCk7XG4gICAgcmVuZGVyVGV4dChjdHgsIG9wdHMudGV4dCwgMCwgMCwgZm9udE9wdHMsIHtcbiAgICAgIGNvbG9yOiBvcHRzLmNvbG9yLFxuICAgICAgbWF4V2lkdGgsXG4gICAgICByb3RhdGlvbixcbiAgICAgIHRleHRBbGlnbjogX3RvTGVmdFJpZ2h0Q2VudGVyKG9wdHMuYWxpZ24pLFxuICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgIHRyYW5zbGF0aW9uOiBbdGl0bGVYLCB0aXRsZVldLFxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUaXRsZShjaGFydCwgdGl0bGVPcHRzKSB7XG4gIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICBvcHRpb25zOiB0aXRsZU9wdHMsXG4gICAgY2hhcnRcbiAgfSk7XG4gIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcbiAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgY2hhcnQudGl0bGVCbG9jayA9IHRpdGxlO1xufVxudmFyIHBsdWdpbl90aXRsZSA9IHtcbiAgaWQ6ICd0aXRsZScsXG4gIF9lbGVtZW50OiBUaXRsZSxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY3JlYXRlVGl0bGUoY2hhcnQsIG9wdGlvbnMpO1xuICB9LFxuICBzdG9wKGNoYXJ0KSB7XG4gICAgY29uc3QgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHRpdGxlQmxvY2spO1xuICAgIGRlbGV0ZSBjaGFydC50aXRsZUJsb2NrO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIGZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ2JvbGQnLFxuICAgIH0sXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcGFkZGluZzogMTAsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIHRleHQ6ICcnLFxuICAgIHdlaWdodDogMjAwMFxuICB9LFxuICBkZWZhdWx0Um91dGVzOiB7XG4gICAgY29sb3I6ICdjb2xvcidcbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfSxcbn07XG5cbmNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcGx1Z2luX3N1YnRpdGxlID0ge1xuICBpZDogJ3N1YnRpdGxlJyxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICBvcHRpb25zLFxuICAgICAgY2hhcnRcbiAgICB9KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgbWFwLnNldChjaGFydCwgdGl0bGUpO1xuICB9LFxuICBzdG9wKGNoYXJ0KSB7XG4gICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIG1hcC5nZXQoY2hhcnQpKTtcbiAgICBtYXAuZGVsZXRlKGNoYXJ0KTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHRpdGxlID0gbWFwLmdldChjaGFydCk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZm9udDoge1xuICAgICAgd2VpZ2h0OiAnbm9ybWFsJyxcbiAgICB9LFxuICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIHRleHQ6ICcnLFxuICAgIHdlaWdodDogMTUwMFxuICB9LFxuICBkZWZhdWx0Um91dGVzOiB7XG4gICAgY29sb3I6ICdjb2xvcidcbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfSxcbn07XG5cbmNvbnN0IHBvc2l0aW9uZXJzID0ge1xuICBhdmVyYWdlKGl0ZW1zKSB7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGksIGxlbjtcbiAgICBsZXQgeCA9IDA7XG4gICAgbGV0IHkgPSAwO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGVsID0gaXRlbXNbaV0uZWxlbWVudDtcbiAgICAgIGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGVsLnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgICB4ICs9IHBvcy54O1xuICAgICAgICB5ICs9IHBvcy55O1xuICAgICAgICArK2NvdW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeDogeCAvIGNvdW50LFxuICAgICAgeTogeSAvIGNvdW50XG4gICAgfTtcbiAgfSxcbiAgbmVhcmVzdChpdGVtcywgZXZlbnRQb3NpdGlvbikge1xuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB4ID0gZXZlbnRQb3NpdGlvbi54O1xuICAgIGxldCB5ID0gZXZlbnRQb3NpdGlvbi55O1xuICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBsZXQgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gZWwuZ2V0Q2VudGVyUG9pbnQoKTtcbiAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhldmVudFBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICBpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgbWluRGlzdGFuY2UgPSBkO1xuICAgICAgICAgIG5lYXJlc3RFbGVtZW50ID0gZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5lYXJlc3RFbGVtZW50KSB7XG4gICAgICBjb25zdCB0cCA9IG5lYXJlc3RFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgeCA9IHRwLng7XG4gICAgICB5ID0gdHAueTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIHB1c2hPckNvbmNhdChiYXNlLCB0b1B1c2gpIHtcbiAgaWYgKHRvUHVzaCkge1xuICAgIGlmIChpc0FycmF5KHRvUHVzaCkpIHtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGJhc2UsIHRvUHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UucHVzaCh0b1B1c2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZTtcbn1cbmZ1bmN0aW9uIHNwbGl0TmV3bGluZXMoc3RyKSB7XG4gIGlmICgodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nKSAmJiBzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwSXRlbShjaGFydCwgaXRlbSkge1xuICBjb25zdCB7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0gPSBpdGVtO1xuICBjb25zdCBjb250cm9sbGVyID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICBjb25zdCB7bGFiZWwsIHZhbHVlfSA9IGNvbnRyb2xsZXIuZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCk7XG4gIHJldHVybiB7XG4gICAgY2hhcnQsXG4gICAgbGFiZWwsXG4gICAgcGFyc2VkOiBjb250cm9sbGVyLmdldFBhcnNlZChpbmRleCksXG4gICAgcmF3OiBjaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0sXG4gICAgZm9ybWF0dGVkVmFsdWU6IHZhbHVlLFxuICAgIGRhdGFzZXQ6IGNvbnRyb2xsZXIuZ2V0RGF0YXNldCgpLFxuICAgIGRhdGFJbmRleDogaW5kZXgsXG4gICAgZGF0YXNldEluZGV4LFxuICAgIGVsZW1lbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG9wdGlvbnMpIHtcbiAgY29uc3QgY3R4ID0gdG9vbHRpcC5jaGFydC5jdHg7XG4gIGNvbnN0IHtib2R5LCBmb290ZXIsIHRpdGxlfSA9IHRvb2x0aXA7XG4gIGNvbnN0IHtib3hXaWR0aCwgYm94SGVpZ2h0fSA9IG9wdGlvbnM7XG4gIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQob3B0aW9ucy50aXRsZUZvbnQpO1xuICBjb25zdCBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gIGNvbnN0IHRpdGxlTGluZUNvdW50ID0gdGl0bGUubGVuZ3RoO1xuICBjb25zdCBmb290ZXJMaW5lQ291bnQgPSBmb290ZXIubGVuZ3RoO1xuICBjb25zdCBib2R5TGluZUl0ZW1Db3VudCA9IGJvZHkubGVuZ3RoO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIGxldCBoZWlnaHQgPSBwYWRkaW5nLmhlaWdodDtcbiAgbGV0IHdpZHRoID0gMDtcbiAgbGV0IGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKChjb3VudCwgYm9keUl0ZW0pID0+IGNvdW50ICsgYm9keUl0ZW0uYmVmb3JlLmxlbmd0aCArIGJvZHlJdGVtLmxpbmVzLmxlbmd0aCArIGJvZHlJdGVtLmFmdGVyLmxlbmd0aCwgMCk7XG4gIGNvbWJpbmVkQm9keUxlbmd0aCArPSB0b29sdGlwLmJlZm9yZUJvZHkubGVuZ3RoICsgdG9vbHRpcC5hZnRlckJvZHkubGVuZ3RoO1xuICBpZiAodGl0bGVMaW5lQ291bnQpIHtcbiAgICBoZWlnaHQgKz0gdGl0bGVMaW5lQ291bnQgKiB0aXRsZUZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAodGl0bGVMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMudGl0bGVTcGFjaW5nXG5cdFx0XHQrIG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b207XG4gIH1cbiAgaWYgKGNvbWJpbmVkQm9keUxlbmd0aCkge1xuICAgIGNvbnN0IGJvZHlMaW5lSGVpZ2h0ID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gTWF0aC5tYXgoYm94SGVpZ2h0LCBib2R5Rm9udC5saW5lSGVpZ2h0KSA6IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgaGVpZ2h0ICs9IGJvZHlMaW5lSXRlbUNvdW50ICogYm9keUxpbmVIZWlnaHRcblx0XHRcdCsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIGJvZHlMaW5lSXRlbUNvdW50KSAqIGJvZHlGb250LmxpbmVIZWlnaHRcblx0XHRcdCsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogb3B0aW9ucy5ib2R5U3BhY2luZztcbiAgfVxuICBpZiAoZm9vdGVyTGluZUNvdW50KSB7XG4gICAgaGVpZ2h0ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wXG5cdFx0XHQrIGZvb3RlckxpbmVDb3VudCAqIGZvb3RlckZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gIH1cbiAgbGV0IHdpZHRoUGFkZGluZyA9IDA7XG4gIGNvbnN0IG1heExpbmVXaWR0aCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdHgubWVhc3VyZVRleHQobGluZSkud2lkdGggKyB3aWR0aFBhZGRpbmcpO1xuICB9O1xuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC50aXRsZSwgbWF4TGluZVdpZHRoKTtcbiAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC5iZWZvcmVCb2R5LmNvbmNhdCh0b29sdGlwLmFmdGVyQm9keSksIG1heExpbmVXaWR0aCk7XG4gIHdpZHRoUGFkZGluZyA9IG9wdGlvbnMuZGlzcGxheUNvbG9ycyA/IChib3hXaWR0aCArIDIgKyBvcHRpb25zLmJveFBhZGRpbmcpIDogMDtcbiAgZWFjaChib2R5LCAoYm9keUl0ZW0pID0+IHtcbiAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcbiAgICBlYWNoKGJvZHlJdGVtLmxpbmVzLCBtYXhMaW5lV2lkdGgpO1xuICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIG1heExpbmVXaWR0aCk7XG4gIH0pO1xuICB3aWR0aFBhZGRpbmcgPSAwO1xuICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICBlYWNoKHRvb2x0aXAuZm9vdGVyLCBtYXhMaW5lV2lkdGgpO1xuICBjdHgucmVzdG9yZSgpO1xuICB3aWR0aCArPSBwYWRkaW5nLndpZHRoO1xuICByZXR1cm4ge3dpZHRoLCBoZWlnaHR9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKSB7XG4gIGNvbnN0IHt5LCBoZWlnaHR9ID0gc2l6ZTtcbiAgaWYgKHkgPCBoZWlnaHQgLyAyKSB7XG4gICAgcmV0dXJuICd0b3AnO1xuICB9IGVsc2UgaWYgKHkgPiAoY2hhcnQuaGVpZ2h0IC0gaGVpZ2h0IC8gMikpIHtcbiAgICByZXR1cm4gJ2JvdHRvbSc7XG4gIH1cbiAgcmV0dXJuICdjZW50ZXInO1xufVxuZnVuY3Rpb24gZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gIGNvbnN0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBjb25zdCBjYXJldCA9IG9wdGlvbnMuY2FyZXRTaXplICsgb3B0aW9ucy5jYXJldFBhZGRpbmc7XG4gIGlmICh4QWxpZ24gPT09ICdsZWZ0JyAmJiB4ICsgd2lkdGggKyBjYXJldCA+IGNoYXJ0LndpZHRoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0JyAmJiB4IC0gd2lkdGggLSBjYXJldCA8IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pIHtcbiAgY29uc3Qge3gsIHdpZHRofSA9IHNpemU7XG4gIGNvbnN0IHt3aWR0aDogY2hhcnRXaWR0aCwgY2hhcnRBcmVhOiB7bGVmdCwgcmlnaHR9fSA9IGNoYXJ0O1xuICBsZXQgeEFsaWduID0gJ2NlbnRlcic7XG4gIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeEFsaWduID0geCA8PSAobGVmdCArIHJpZ2h0KSAvIDIgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB9IGVsc2UgaWYgKHggPD0gd2lkdGggLyAyKSB7XG4gICAgeEFsaWduID0gJ2xlZnQnO1xuICB9IGVsc2UgaWYgKHggPj0gY2hhcnRXaWR0aCAtIHdpZHRoIC8gMikge1xuICAgIHhBbGlnbiA9ICdyaWdodCc7XG4gIH1cbiAgaWYgKGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkpIHtcbiAgICB4QWxpZ24gPSAnY2VudGVyJztcbiAgfVxuICByZXR1cm4geEFsaWduO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gIGNvbnN0IHlBbGlnbiA9IHNpemUueUFsaWduIHx8IG9wdGlvbnMueUFsaWduIHx8IGRldGVybWluZVlBbGlnbihjaGFydCwgc2l6ZSk7XG4gIHJldHVybiB7XG4gICAgeEFsaWduOiBzaXplLnhBbGlnbiB8fCBvcHRpb25zLnhBbGlnbiB8fCBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbiksXG4gICAgeUFsaWduXG4gIH07XG59XG5mdW5jdGlvbiBhbGlnblgoc2l6ZSwgeEFsaWduKSB7XG4gIGxldCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggLT0gd2lkdGg7XG4gIH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuICAgIHggLT0gKHdpZHRoIC8gMik7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSkge1xuICBsZXQge3ksIGhlaWdodH0gPSBzaXplO1xuICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgIHkgKz0gcGFkZGluZ0FuZFNpemU7XG4gIH0gZWxzZSBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgIHkgLT0gaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG4gIH0gZWxzZSB7XG4gICAgeSAtPSAoaGVpZ2h0IC8gMik7XG4gIH1cbiAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuICBjb25zdCB7Y2FyZXRTaXplLCBjYXJldFBhZGRpbmcsIGNvcm5lclJhZGl1c30gPSBvcHRpb25zO1xuICBjb25zdCB7eEFsaWduLCB5QWxpZ259ID0gYWxpZ25tZW50O1xuICBjb25zdCBwYWRkaW5nQW5kU2l6ZSA9IGNhcmV0U2l6ZSArIGNhcmV0UGFkZGluZztcbiAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gIGxldCB4ID0gYWxpZ25YKHNpemUsIHhBbGlnbik7XG4gIGNvbnN0IHkgPSBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSk7XG4gIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICB4ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICB4IC09IHBhZGRpbmdBbmRTaXplO1xuICAgIH1cbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgIHggLT0gTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgeCArPSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpICsgY2FyZXRTaXplO1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogX2xpbWl0VmFsdWUoeCwgMCwgY2hhcnQud2lkdGggLSBzaXplLndpZHRoKSxcbiAgICB5OiBfbGltaXRWYWx1ZSh5LCAwLCBjaGFydC5oZWlnaHQgLSBzaXplLmhlaWdodClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEFsaWduZWRYKHRvb2x0aXAsIGFsaWduLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgcmV0dXJuIGFsaWduID09PSAnY2VudGVyJ1xuICAgID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAvIDJcbiAgICA6IGFsaWduID09PSAncmlnaHQnXG4gICAgICA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLSBwYWRkaW5nLnJpZ2h0XG4gICAgICA6IHRvb2x0aXAueCArIHBhZGRpbmcubGVmdDtcbn1cbmZ1bmN0aW9uIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGNhbGxiYWNrKSB7XG4gIHJldHVybiBwdXNoT3JDb25jYXQoW10sIHNwbGl0TmV3bGluZXMoY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBDb250ZXh0KHBhcmVudCwgdG9vbHRpcCwgdG9vbHRpcEl0ZW1zKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIHRvb2x0aXAsXG4gICAgdG9vbHRpcEl0ZW1zLFxuICAgIHR5cGU6ICd0b29sdGlwJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCkge1xuICBjb25zdCBvdmVycmlkZSA9IGNvbnRleHQgJiYgY29udGV4dC5kYXRhc2V0ICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwLmNhbGxiYWNrcztcbiAgcmV0dXJuIG92ZXJyaWRlID8gY2FsbGJhY2tzLm92ZXJyaWRlKG92ZXJyaWRlKSA6IGNhbGxiYWNrcztcbn1cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wYWNpdHkgPSAwO1xuICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IFtdO1xuICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0IHx8IGNvbmZpZy5fY2hhcnQ7XG4gICAgdGhpcy5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuZGF0YVBvaW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRpdGxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmVmb3JlQm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5hZnRlckJvZHkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mb290ZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy54QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy54ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2FyZXRYID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2FyZXRZID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxDb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICB9XG4gIF9yZXNvbHZlQW5pbWF0aW9ucygpIHtcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLl9jYWNoZWRBbmltYXRpb25zO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVuYWJsZWQgJiYgY2hhcnQub3B0aW9ucy5hbmltYXRpb24gJiYgb3B0aW9ucy5hbmltYXRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyh0aGlzLmNoYXJ0LCBvcHRzKTtcbiAgICBpZiAob3B0cy5fY2FjaGVhYmxlKSB7XG4gICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fFxuXHRcdFx0KHRoaXMuJGNvbnRleHQgPSBjcmVhdGVUb29sdGlwQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcywgdGhpcy5fdG9vbHRpcEl0ZW1zKSk7XG4gIH1cbiAgZ2V0VGl0bGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHtjYWxsYmFja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBiZWZvcmVUaXRsZSA9IGNhbGxiYWNrcy5iZWZvcmVUaXRsZS5hcHBseSh0aGlzLCBbY29udGV4dF0pO1xuICAgIGNvbnN0IHRpdGxlID0gY2FsbGJhY2tzLnRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgY29uc3QgYWZ0ZXJUaXRsZSA9IGNhbGxiYWNrcy5hZnRlclRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgbGV0IGxpbmVzID0gW107XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyh0aXRsZSkpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyVGl0bGUpKTtcbiAgICByZXR1cm4gbGluZXM7XG4gIH1cbiAgZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMob3B0aW9ucy5jYWxsYmFja3MuYmVmb3JlQm9keS5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSkpO1xuICB9XG4gIGdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlJdGVtcyA9IFtdO1xuICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCkgPT4ge1xuICAgICAgY29uc3QgYm9keUl0ZW0gPSB7XG4gICAgICAgIGJlZm9yZTogW10sXG4gICAgICAgIGxpbmVzOiBbXSxcbiAgICAgICAgYWZ0ZXI6IFtdXG4gICAgICB9O1xuICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoc2NvcGVkLmJlZm9yZUxhYmVsLmNhbGwodGhpcywgY29udGV4dCkpKTtcbiAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5saW5lcywgc2NvcGVkLmxhYmVsLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBzcGxpdE5ld2xpbmVzKHNjb3BlZC5hZnRlckxhYmVsLmNhbGwodGhpcywgY29udGV4dCkpKTtcbiAgICAgIGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm9keUl0ZW1zO1xuICB9XG4gIGdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMob3B0aW9ucy5jYWxsYmFja3MuYWZ0ZXJCb2R5LmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKSk7XG4gIH1cbiAgZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHtjYWxsYmFja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBiZWZvcmVGb290ZXIgPSBjYWxsYmFja3MuYmVmb3JlRm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBjb25zdCBmb290ZXIgPSBjYWxsYmFja3MuZm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBjb25zdCBhZnRlckZvb3RlciA9IGNhbGxiYWNrcy5hZnRlckZvb3Rlci5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSk7XG4gICAgbGV0IGxpbmVzID0gW107XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlRm9vdGVyKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoZm9vdGVyKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJGb290ZXIpKTtcbiAgICByZXR1cm4gbGluZXM7XG4gIH1cbiAgX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcbiAgICBjb25zdCBsYWJlbENvbG9ycyA9IFtdO1xuICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZXMgPSBbXTtcbiAgICBjb25zdCBsYWJlbFRleHRDb2xvcnMgPSBbXTtcbiAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgbGV0IGksIGxlbjtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRvb2x0aXBJdGVtcy5wdXNoKGNyZWF0ZVRvb2x0aXBJdGVtKHRoaXMuY2hhcnQsIGFjdGl2ZVtpXSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5maWx0ZXIoKGVsZW1lbnQsIGluZGV4LCBhcnJheSkgPT4gb3B0aW9ucy5maWx0ZXIoZWxlbWVudCwgaW5kZXgsIGFycmF5LCBkYXRhKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLml0ZW1Tb3J0KSB7XG4gICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydCgoYSwgYikgPT4gb3B0aW9ucy5pdGVtU29ydChhLCBiLCBkYXRhKSk7XG4gICAgfVxuICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCkgPT4ge1xuICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3Mob3B0aW9ucy5jYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgbGFiZWxDb2xvcnMucHVzaChzY29wZWQubGFiZWxDb2xvci5jYWxsKHRoaXMsIGNvbnRleHQpKTtcbiAgICAgIGxhYmVsUG9pbnRTdHlsZXMucHVzaChzY29wZWQubGFiZWxQb2ludFN0eWxlLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgbGFiZWxUZXh0Q29sb3JzLnB1c2goc2NvcGVkLmxhYmVsVGV4dENvbG9yLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgIH0pO1xuICAgIHRoaXMubGFiZWxDb2xvcnMgPSBsYWJlbENvbG9ycztcbiAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSBsYWJlbFBvaW50U3R5bGVzO1xuICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuICAgIHRoaXMuZGF0YVBvaW50cyA9IHRvb2x0aXBJdGVtcztcbiAgICByZXR1cm4gdG9vbHRpcEl0ZW1zO1xuICB9XG4gIHVwZGF0ZShjaGFuZ2VkLCByZXBsYXkpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICBsZXQgcHJvcGVydGllcztcbiAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgaWYgKCFhY3RpdmUubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5vcGFjaXR5ICE9PSAwKSB7XG4gICAgICAgIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRoaXMuX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpO1xuICAgICAgdGhpcy50aXRsZSA9IHRoaXMuZ2V0VGl0bGUodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYmVmb3JlQm9keSA9IHRoaXMuZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5ib2R5ID0gdGhpcy5nZXRCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmFmdGVyQm9keSA9IHRoaXMuZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmZvb3RlciA9IHRoaXMuZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHNpemUpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KHRoaXMuY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICBjb25zdCBiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIHRoaXMuY2hhcnQpO1xuICAgICAgdGhpcy54QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgeDogYmFja2dyb3VuZFBvaW50LngsXG4gICAgICAgIHk6IGJhY2tncm91bmRQb2ludC55LFxuICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgY2FyZXRYOiBwb3NpdGlvbi54LFxuICAgICAgICBjYXJldFk6IHBvc2l0aW9uLnlcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcztcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZWQgJiYgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgb3B0aW9ucy5leHRlcm5hbC5jYWxsKHRoaXMsIHtjaGFydDogdGhpcy5jaGFydCwgdG9vbHRpcDogdGhpcywgcmVwbGF5fSk7XG4gICAgfVxuICB9XG4gIGRyYXdDYXJldCh0b29sdGlwUG9pbnQsIGN0eCwgc2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNhcmV0UG9zaXRpb24gPSB0aGlzLmdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKTtcbiAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDEsIGNhcmV0UG9zaXRpb24ueTEpO1xuICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MiwgY2FyZXRQb3NpdGlvbi55Mik7XG4gICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngzLCBjYXJldFBvc2l0aW9uLnkzKTtcbiAgfVxuICBnZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSB0aGlzO1xuICAgIGNvbnN0IHtjYXJldFNpemUsIGNvcm5lclJhZGl1c30gPSBvcHRpb25zO1xuICAgIGNvbnN0IHt0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHR9ID0gdG9UUkJMQ29ybmVycyhjb3JuZXJSYWRpdXMpO1xuICAgIGNvbnN0IHt4OiBwdFgsIHk6IHB0WX0gPSB0b29sdGlwUG9pbnQ7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gc2l6ZTtcbiAgICBsZXQgeDEsIHgyLCB4MywgeTEsIHkyLCB5MztcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgeTIgPSBwdFkgKyAoaGVpZ2h0IC8gMik7XG4gICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeDEgPSBwdFg7XG4gICAgICAgIHgyID0geDEgLSBjYXJldFNpemU7XG4gICAgICAgIHkxID0geTIgKyBjYXJldFNpemU7XG4gICAgICAgIHkzID0geTIgLSBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHB0WCArIHdpZHRoO1xuICAgICAgICB4MiA9IHgxICsgY2FyZXRTaXplO1xuICAgICAgICB5MSA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICB5MyA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgfVxuICAgICAgeDMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHgyID0gcHRYICsgTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyAoY2FyZXRTaXplKTtcbiAgICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHgyID0gcHRYICsgd2lkdGggLSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpIC0gY2FyZXRTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDIgPSB0aGlzLmNhcmV0WDtcbiAgICAgIH1cbiAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgIHkxID0gcHRZO1xuICAgICAgICB5MiA9IHkxIC0gY2FyZXRTaXplO1xuICAgICAgICB4MSA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgICB4MyA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeTEgPSBwdFkgKyBoZWlnaHQ7XG4gICAgICAgIHkyID0geTEgKyBjYXJldFNpemU7XG4gICAgICAgIHgxID0geDIgKyBjYXJldFNpemU7XG4gICAgICAgIHgzID0geDIgLSBjYXJldFNpemU7XG4gICAgICB9XG4gICAgICB5MyA9IHkxO1xuICAgIH1cbiAgICByZXR1cm4ge3gxLCB4MiwgeDMsIHkxLCB5MiwgeTN9O1xuICB9XG4gIGRyYXdUaXRsZShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgIGNvbnN0IGxlbmd0aCA9IHRpdGxlLmxlbmd0aDtcbiAgICBsZXQgdGl0bGVGb250LCB0aXRsZVNwYWNpbmcsIGk7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLnRpdGxlQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy50aXRsZUFsaWduKTtcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgIHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgICB0aXRsZVNwYWNpbmcgPSBvcHRpb25zLnRpdGxlU3BhY2luZztcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLnRpdGxlQ29sb3I7XG4gICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgIHB0LnkgKz0gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVNwYWNpbmc7XG4gICAgICAgIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgcHQueSArPSBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGFiZWxDb2xvcnMgPSB0aGlzLmxhYmVsQ29sb3JzW2ldO1xuICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZSA9IHRoaXMubGFiZWxQb2ludFN0eWxlc1tpXTtcbiAgICBjb25zdCB7Ym94SGVpZ2h0LCBib3hXaWR0aCwgYm94UGFkZGluZ30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGNvbnN0IGNvbG9yWCA9IGdldEFsaWduZWRYKHRoaXMsICdsZWZ0Jywgb3B0aW9ucyk7XG4gICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICBjb25zdCB5T2ZmU2V0ID0gYm94SGVpZ2h0IDwgYm9keUZvbnQubGluZUhlaWdodCA/IChib2R5Rm9udC5saW5lSGVpZ2h0IC0gYm94SGVpZ2h0KSAvIDIgOiAwO1xuICAgIGNvbnN0IGNvbG9yWSA9IHB0LnkgKyB5T2ZmU2V0O1xuICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICByYWRpdXM6IE1hdGgubWluKGJveFdpZHRoLCBib3hIZWlnaHQpIC8gMixcbiAgICAgICAgcG9pbnRTdHlsZTogbGFiZWxQb2ludFN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxXG4gICAgICB9O1xuICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGgpICsgYm94V2lkdGggLyAyO1xuICAgICAgY29uc3QgY2VudGVyWSA9IGNvbG9yWSArIGJveEhlaWdodCAvIDI7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzLmJvcmRlckNvbG9yO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IGlzT2JqZWN0KGxhYmVsQ29sb3JzLmJvcmRlcldpZHRoKSA/IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGFiZWxDb2xvcnMuYm9yZGVyV2lkdGgpKSA6IChsYWJlbENvbG9ycy5ib3JkZXJXaWR0aCB8fCAxKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzLmJvcmRlckNvbG9yO1xuICAgICAgY3R4LnNldExpbmVEYXNoKGxhYmVsQ29sb3JzLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvcnMuYm9yZGVyRGFzaE9mZnNldCB8fCAwO1xuICAgICAgY29uc3Qgb3V0ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCAtIGJveFBhZGRpbmcpO1xuICAgICAgY29uc3QgaW5uZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLnhQbHVzKHJ0bENvbG9yWCwgMSksIGJveFdpZHRoIC0gYm94UGFkZGluZyAtIDIpO1xuICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9ycy5ib3JkZXJSYWRpdXMpO1xuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKHYgPT4gdiAhPT0gMCkpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgeTogY29sb3JZLFxuICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgIHk6IGNvbG9yWSArIDEsXG4gICAgICAgICAgdzogYm94V2lkdGggLSAyLFxuICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICBjdHguZmlsbFJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguc3Ryb2tlUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdChpbm5lclgsIGNvbG9yWSArIDEsIGJveFdpZHRoIC0gMiwgYm94SGVpZ2h0IC0gMik7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgfVxuICBkcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2JvZHl9ID0gdGhpcztcbiAgICBjb25zdCB7Ym9keVNwYWNpbmcsIGJvZHlBbGlnbiwgZGlzcGxheUNvbG9ycywgYm94SGVpZ2h0LCBib3hXaWR0aCwgYm94UGFkZGluZ30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGxldCBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgbGV0IHhMaW5lUGFkZGluZyA9IDA7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBmaWxsTGluZU9mVGV4dCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGN0eC5maWxsVGV4dChsaW5lLCBydGxIZWxwZXIueChwdC54ICsgeExpbmVQYWRkaW5nKSwgcHQueSArIGJvZHlMaW5lSGVpZ2h0IC8gMik7XG4gICAgICBwdC55ICs9IGJvZHlMaW5lSGVpZ2h0ICsgYm9keVNwYWNpbmc7XG4gICAgfTtcbiAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICBsZXQgYm9keUl0ZW0sIHRleHRDb2xvciwgbGluZXMsIGksIGosIGlsZW4sIGpsZW47XG4gICAgY3R4LnRleHRBbGlnbiA9IGJvZHlBbGlnbjtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uLCBvcHRpb25zKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgZWFjaCh0aGlzLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICB4TGluZVBhZGRpbmcgPSBkaXNwbGF5Q29sb3JzICYmIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uICE9PSAncmlnaHQnXG4gICAgICA/IGJvZHlBbGlnbiA9PT0gJ2NlbnRlcicgPyAoYm94V2lkdGggLyAyICsgYm94UGFkZGluZykgOiAoYm94V2lkdGggKyAyICsgYm94UGFkZGluZylcbiAgICAgIDogMDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGJvZHlJdGVtID0gYm9keVtpXTtcbiAgICAgIHRleHRDb2xvciA9IHRoaXMubGFiZWxUZXh0Q29sb3JzW2ldO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcbiAgICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICBsaW5lcyA9IGJvZHlJdGVtLmxpbmVzO1xuICAgICAgaWYgKGRpc3BsYXlDb2xvcnMgJiYgbGluZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IE1hdGgubWF4KGJvZHlGb250LmxpbmVIZWlnaHQsIGJveEhlaWdodCk7XG4gICAgICB9XG4gICAgICBmb3IgKGogPSAwLCBqbGVuID0gbGluZXMubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG4gICAgICAgIGZpbGxMaW5lT2ZUZXh0KGxpbmVzW2pdKTtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xuICAgIH1cbiAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBlYWNoKHRoaXMuYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgfVxuICBkcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmb290ZXIgPSB0aGlzLmZvb3RlcjtcbiAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgIGxldCBmb290ZXJGb250LCBpO1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy5mb290ZXJBbGlnbiwgb3B0aW9ucyk7XG4gICAgICBwdC55ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wO1xuICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy5mb290ZXJBbGlnbik7XG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5mb290ZXJDb2xvcjtcbiAgICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgcHQueSArPSBmb290ZXJGb250LmxpbmVIZWlnaHQgKyBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IHRoaXM7XG4gICAgY29uc3Qge3gsIHl9ID0gcHQ7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdG9vbHRpcFNpemU7XG4gICAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKG9wdGlvbnMuY29ybmVyUmFkaXVzKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyB0b3BSaWdodCk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gYm90dG9tUmlnaHQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gYm90dG9tUmlnaHQsIHkgKyBoZWlnaHQpO1xuICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIGJvdHRvbUxlZnQsIHkgKyBoZWlnaHQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgdG9wTGVmdCwgeSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICB9XG4gIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgIGNvbnN0IGFuaW1ZID0gYW5pbXMgJiYgYW5pbXMueTtcbiAgICBpZiAoYW5pbVggfHwgYW5pbVkpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCB0aGlzLl9hY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHRoaXMuX3NpemUpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUpO1xuICAgICAgY29uc3QgcG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIGNoYXJ0KTtcbiAgICAgIGlmIChhbmltWC5fdG8gIT09IHBvaW50LnggfHwgYW5pbVkuX3RvICE9PSBwb2ludC55KSB7XG4gICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICB0aGlzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgdGhpcy5jYXJldFggPSBwb3NpdGlvbi54O1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHBvc2l0aW9uLnk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX3dpbGxSZW5kZXIoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5vcGFjaXR5O1xuICB9XG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBsZXQgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICBpZiAoIW9wYWNpdHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpO1xuICAgIGNvbnN0IHRvb2x0aXBTaXplID0ge1xuICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XG4gICAgfTtcbiAgICBjb25zdCBwdCA9IHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueVxuICAgIH07XG4gICAgb3BhY2l0eSA9IE1hdGguYWJzKG9wYWNpdHkpIDwgMWUtMyA/IDAgOiBvcGFjaXR5O1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBjb25zdCBoYXNUb29sdGlwQ29udGVudCA9IHRoaXMudGl0bGUubGVuZ3RoIHx8IHRoaXMuYmVmb3JlQm9keS5sZW5ndGggfHwgdGhpcy5ib2R5Lmxlbmd0aCB8fCB0aGlzLmFmdGVyQm9keS5sZW5ndGggfHwgdGhpcy5mb290ZXIubGVuZ3RoO1xuICAgIGlmIChvcHRpb25zLmVuYWJsZWQgJiYgaGFzVG9vbHRpcENvbnRlbnQpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgcHQueSArPSBwYWRkaW5nLnRvcDtcbiAgICAgIHRoaXMuZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5kcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgIHRoaXMuZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3B0aW9ucy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG4gIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gIH1cbiAgc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoe2RhdGFzZXRJbmRleCwgaW5kZXh9KSA9PiB7XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICBpbmRleCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGV2ZW50UG9zaXRpb24pO1xuICAgIGlmIChjaGFuZ2VkIHx8IHBvc2l0aW9uQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IGV2ZW50UG9zaXRpb247XG4gICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSB0cnVlO1xuICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XG4gICAgfVxuICB9XG4gIGhhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEgPSB0cnVlKSB7XG4gICAgaWYgKHJlcGxheSAmJiB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gZmFsc2U7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpO1xuICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpO1xuICAgIGNvbnN0IGNoYW5nZWQgPSByZXBsYXkgfHwgIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSkgfHwgcG9zaXRpb25DaGFuZ2VkO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICBpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiBlLngsXG4gICAgICAgICAgeTogZS55XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlKHRydWUsIHJlcGxheSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9XG4gIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLmNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgb3B0aW9ucy5tb2RlLCBvcHRpb25zLCByZXBsYXkpO1xuICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIGFjdGl2ZS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmU7XG4gIH1cbiAgX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpIHtcbiAgICBjb25zdCB7Y2FyZXRYLCBjYXJldFksIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCBlKTtcbiAgICByZXR1cm4gcG9zaXRpb24gIT09IGZhbHNlICYmIChjYXJldFggIT09IHBvc2l0aW9uLnggfHwgY2FyZXRZICE9PSBwb3NpdGlvbi55KTtcbiAgfVxufVxuVG9vbHRpcC5wb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xudmFyIHBsdWdpbl90b29sdGlwID0ge1xuICBpZDogJ3Rvb2x0aXAnLFxuICBfZWxlbWVudDogVG9vbHRpcCxcbiAgcG9zaXRpb25lcnMsXG4gIGFmdGVySW5pdChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgY2hhcnQudG9vbHRpcCA9IG5ldyBUb29sdGlwKHtjaGFydCwgb3B0aW9uc30pO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICByZXNldChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgY2hhcnQudG9vbHRpcC5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgIH1cbiAgfSxcbiAgYWZ0ZXJEcmF3KGNoYXJ0KSB7XG4gICAgY29uc3QgdG9vbHRpcCA9IGNoYXJ0LnRvb2x0aXA7XG4gICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcC5fd2lsbFJlbmRlcigpKSB7XG4gICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICB0b29sdGlwXG4gICAgICB9O1xuICAgICAgaWYgKGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVRvb2x0aXBEcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRvb2x0aXAuZHJhdyhjaGFydC5jdHgpO1xuICAgICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJUb29sdGlwRHJhdycsIGFyZ3MpO1xuICAgIH1cbiAgfSxcbiAgYWZ0ZXJFdmVudChjaGFydCwgYXJncykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gYXJncy5yZXBsYXk7XG4gICAgICBpZiAoY2hhcnQudG9vbHRpcC5oYW5kbGVFdmVudChhcmdzLmV2ZW50LCB1c2VGaW5hbFBvc2l0aW9uLCBhcmdzLmluQ2hhcnRBcmVhKSkge1xuICAgICAgICBhcmdzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGV4dGVybmFsOiBudWxsLFxuICAgIHBvc2l0aW9uOiAnYXZlcmFnZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyxcbiAgICB0aXRsZUNvbG9yOiAnI2ZmZicsXG4gICAgdGl0bGVGb250OiB7XG4gICAgICB3ZWlnaHQ6ICdib2xkJyxcbiAgICB9LFxuICAgIHRpdGxlU3BhY2luZzogMixcbiAgICB0aXRsZU1hcmdpbkJvdHRvbTogNixcbiAgICB0aXRsZUFsaWduOiAnbGVmdCcsXG4gICAgYm9keUNvbG9yOiAnI2ZmZicsXG4gICAgYm9keVNwYWNpbmc6IDIsXG4gICAgYm9keUZvbnQ6IHtcbiAgICB9LFxuICAgIGJvZHlBbGlnbjogJ2xlZnQnLFxuICAgIGZvb3RlckNvbG9yOiAnI2ZmZicsXG4gICAgZm9vdGVyU3BhY2luZzogMixcbiAgICBmb290ZXJNYXJnaW5Ub3A6IDYsXG4gICAgZm9vdGVyRm9udDoge1xuICAgICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgfSxcbiAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgIHBhZGRpbmc6IDYsXG4gICAgY2FyZXRQYWRkaW5nOiAyLFxuICAgIGNhcmV0U2l6ZTogNSxcbiAgICBjb3JuZXJSYWRpdXM6IDYsXG4gICAgYm94SGVpZ2h0OiAoY3R4LCBvcHRzKSA9PiBvcHRzLmJvZHlGb250LnNpemUsXG4gICAgYm94V2lkdGg6IChjdHgsIG9wdHMpID0+IG9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICBtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICBkaXNwbGF5Q29sb3JzOiB0cnVlLFxuICAgIGJveFBhZGRpbmc6IDAsXG4gICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICBib3JkZXJXaWR0aDogMCxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiA0MDAsXG4gICAgICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuICAgIH0sXG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgbnVtYmVyczoge1xuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2NhcmV0WCcsICdjYXJldFknXSxcbiAgICAgIH0sXG4gICAgICBvcGFjaXR5OiB7XG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGR1cmF0aW9uOiAyMDBcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhbGxiYWNrczoge1xuICAgICAgYmVmb3JlVGl0bGU6IG5vb3AsXG4gICAgICB0aXRsZSh0b29sdGlwSXRlbXMpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRvb2x0aXBJdGVtc1swXTtcbiAgICAgICAgICBjb25zdCBsYWJlbHMgPSBpdGVtLmNoYXJ0LmRhdGEubGFiZWxzO1xuICAgICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcbiAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmxhYmVsO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGFiZWxDb3VudCA+IDAgJiYgaXRlbS5kYXRhSW5kZXggPCBsYWJlbENvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbGFiZWxzW2l0ZW0uZGF0YUluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSxcbiAgICAgIGFmdGVyVGl0bGU6IG5vb3AsXG4gICAgICBiZWZvcmVCb2R5OiBub29wLFxuICAgICAgYmVmb3JlTGFiZWw6IG5vb3AsXG4gICAgICBsYWJlbCh0b29sdGlwSXRlbSkge1xuICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgIHJldHVybiB0b29sdGlwSXRlbS5sYWJlbCArICc6ICcgKyB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZSB8fCB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFiZWwgPSB0b29sdGlwSXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICBsYWJlbCArPSAnOiAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICBsYWJlbCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICB9LFxuICAgICAgbGFiZWxDb2xvcih0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgbGFiZWxUZXh0Q29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYm9keUNvbG9yO1xuICAgICAgfSxcbiAgICAgIGxhYmVsUG9pbnRTdHlsZSh0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcbiAgICAgICAgICByb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvbixcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBhZnRlckxhYmVsOiBub29wLFxuICAgICAgYWZ0ZXJCb2R5OiBub29wLFxuICAgICAgYmVmb3JlRm9vdGVyOiBub29wLFxuICAgICAgZm9vdGVyOiBub29wLFxuICAgICAgYWZ0ZXJGb290ZXI6IG5vb3BcbiAgICB9XG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBib2R5Rm9udDogJ2ZvbnQnLFxuICAgIGZvb3RlckZvbnQ6ICdmb250JyxcbiAgICB0aXRsZUZvbnQ6ICdmb250J1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2ZpbHRlcicgJiYgbmFtZSAhPT0gJ2l0ZW1Tb3J0JyAmJiBuYW1lICE9PSAnZXh0ZXJuYWwnLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgIGNhbGxiYWNrczoge1xuICAgICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIF9mYWxsYmFjazogZmFsc2VcbiAgICB9LFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIF9mYWxsYmFjazogJ2FuaW1hdGlvbidcbiAgICB9XG4gIH0sXG4gIGFkZGl0aW9uYWxPcHRpb25TY29wZXM6IFsnaW50ZXJhY3Rpb24nXVxufTtcblxudmFyIHBsdWdpbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5EZWNpbWF0aW9uOiBwbHVnaW5fZGVjaW1hdGlvbixcbkZpbGxlcjogaW5kZXgsXG5MZWdlbmQ6IHBsdWdpbl9sZWdlbmQsXG5TdWJUaXRsZTogcGx1Z2luX3N1YnRpdGxlLFxuVGl0bGU6IHBsdWdpbl90aXRsZSxcblRvb2x0aXA6IHBsdWdpbl90b29sdGlwXG59KTtcblxuY29uc3QgYWRkSWZTdHJpbmcgPSAobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscykgPT4ge1xuICBpZiAodHlwZW9mIHJhdyA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IGxhYmVscy5wdXNoKHJhdykgLSAxO1xuICAgIGFkZGVkTGFiZWxzLnVuc2hpZnQoe2luZGV4LCBsYWJlbDogcmF3fSk7XG4gIH0gZWxzZSBpZiAoaXNOYU4ocmF3KSkge1xuICAgIGluZGV4ID0gbnVsbDtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59O1xuZnVuY3Rpb24gZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscykge1xuICBjb25zdCBmaXJzdCA9IGxhYmVscy5pbmRleE9mKHJhdyk7XG4gIGlmIChmaXJzdCA9PT0gLTEpIHtcbiAgICByZXR1cm4gYWRkSWZTdHJpbmcobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscyk7XG4gIH1cbiAgY29uc3QgbGFzdCA9IGxhYmVscy5sYXN0SW5kZXhPZihyYXcpO1xuICByZXR1cm4gZmlyc3QgIT09IGxhc3QgPyBpbmRleCA6IGZpcnN0O1xufVxuY29uc3QgdmFsaWRJbmRleCA9IChpbmRleCwgbWF4KSA9PiBpbmRleCA9PT0gbnVsbCA/IG51bGwgOiBfbGltaXRWYWx1ZShNYXRoLnJvdW5kKGluZGV4KSwgMCwgbWF4KTtcbmNsYXNzIENhdGVnb3J5U2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICB9XG4gIGluaXQoc2NhbGVPcHRpb25zKSB7XG4gICAgY29uc3QgYWRkZWQgPSB0aGlzLl9hZGRlZExhYmVscztcbiAgICBpZiAoYWRkZWQubGVuZ3RoKSB7XG4gICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgZm9yIChjb25zdCB7aW5kZXgsIGxhYmVsfSBvZiBhZGRlZCkge1xuICAgICAgICBpZiAobGFiZWxzW2luZGV4XSA9PT0gbGFiZWwpIHtcbiAgICAgICAgICBsYWJlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgICB9XG4gICAgc3VwZXIuaW5pdChzY2FsZU9wdGlvbnMpO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpbmRleCA9IGlzRmluaXRlKGluZGV4KSAmJiBsYWJlbHNbaW5kZXhdID09PSByYXcgPyBpbmRleFxuICAgICAgOiBmaW5kT3JBZGRMYWJlbChsYWJlbHMsIHJhdywgdmFsdWVPckRlZmF1bHQoaW5kZXgsIHJhdyksIHRoaXMuX2FkZGVkTGFiZWxzKTtcbiAgICByZXR1cm4gdmFsaWRJbmRleChpbmRleCwgbGFiZWxzLmxlbmd0aCAtIDEpO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbkRlZmluZWQsIG1heERlZmluZWR9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgbGV0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgIG1pbiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgbWF4ID0gdGhpcy5nZXRMYWJlbHMoKS5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICB0aGlzLm1heCA9IG1heDtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMub3B0aW9ucy5vZmZzZXQ7XG4gICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICBsZXQgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBsYWJlbHMgPSAobWluID09PSAwICYmIG1heCA9PT0gbGFiZWxzLmxlbmd0aCAtIDEpID8gbGFiZWxzIDogbGFiZWxzLnNsaWNlKG1pbiwgbWF4ICsgMSk7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IE1hdGgubWF4KGxhYmVscy5sZW5ndGggLSAob2Zmc2V0ID8gMCA6IDEpLCAxKTtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gdGhpcy5taW4gLSAob2Zmc2V0ID8gMC41IDogMCk7XG4gICAgZm9yIChsZXQgdmFsdWUgPSBtaW47IHZhbHVlIDw9IG1heDsgdmFsdWUrKykge1xuICAgICAgdGlja3MucHVzaCh7dmFsdWV9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGlmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDwgbGFiZWxzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGxhYmVsc1t2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgaWYgKCF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gIXRoaXMuX3JldmVyc2VQaXhlbHM7XG4gICAgfVxuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKHZhbHVlIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm90dG9tO1xuICB9XG59XG5DYXRlZ29yeVNjYWxlLmlkID0gJ2NhdGVnb3J5JztcbkNhdGVnb3J5U2NhbGUuZGVmYXVsdHMgPSB7XG4gIHRpY2tzOiB7XG4gICAgY2FsbGJhY2s6IENhdGVnb3J5U2NhbGUucHJvdG90eXBlLmdldExhYmVsRm9yVmFsdWVcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVUaWNrcyQxKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcbiAgY29uc3QgdGlja3MgPSBbXTtcbiAgY29uc3QgTUlOX1NQQUNJTkcgPSAxZS0xNDtcbiAgY29uc3Qge2JvdW5kcywgc3RlcCwgbWluLCBtYXgsIHByZWNpc2lvbiwgY291bnQsIG1heFRpY2tzLCBtYXhEaWdpdHMsIGluY2x1ZGVCb3VuZHN9ID0gZ2VuZXJhdGlvbk9wdGlvbnM7XG4gIGNvbnN0IHVuaXQgPSBzdGVwIHx8IDE7XG4gIGNvbnN0IG1heFNwYWNlcyA9IG1heFRpY2tzIC0gMTtcbiAgY29uc3Qge21pbjogcm1pbiwgbWF4OiBybWF4fSA9IGRhdGFSYW5nZTtcbiAgY29uc3QgbWluRGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1pbik7XG4gIGNvbnN0IG1heERlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtYXgpO1xuICBjb25zdCBjb3VudERlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihjb3VudCk7XG4gIGNvbnN0IG1pblNwYWNpbmcgPSAocm1heCAtIHJtaW4pIC8gKG1heERpZ2l0cyArIDEpO1xuICBsZXQgc3BhY2luZyA9IG5pY2VOdW0oKHJtYXggLSBybWluKSAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgbGV0IGZhY3RvciwgbmljZU1pbiwgbmljZU1heCwgbnVtU3BhY2VzO1xuICBpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmICFtaW5EZWZpbmVkICYmICFtYXhEZWZpbmVkKSB7XG4gICAgcmV0dXJuIFt7dmFsdWU6IHJtaW59LCB7dmFsdWU6IHJtYXh9XTtcbiAgfVxuICBudW1TcGFjZXMgPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpIC0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZyk7XG4gIGlmIChudW1TcGFjZXMgPiBtYXhTcGFjZXMpIHtcbiAgICBzcGFjaW5nID0gbmljZU51bShudW1TcGFjZXMgKiBzcGFjaW5nIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICB9XG4gIGlmICghaXNOdWxsT3JVbmRlZihwcmVjaXNpb24pKSB7XG4gICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgfVxuICBpZiAoYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgbmljZU1pbiA9IE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICBuaWNlTWF4ID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gIH0gZWxzZSB7XG4gICAgbmljZU1pbiA9IHJtaW47XG4gICAgbmljZU1heCA9IHJtYXg7XG4gIH1cbiAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCAmJiBzdGVwICYmIGFsbW9zdFdob2xlKChtYXggLSBtaW4pIC8gc3RlcCwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChNYXRoLm1pbigobWF4IC0gbWluKSAvIHNwYWNpbmcsIG1heFRpY2tzKSk7XG4gICAgc3BhY2luZyA9IChtYXggLSBtaW4pIC8gbnVtU3BhY2VzO1xuICAgIG5pY2VNaW4gPSBtaW47XG4gICAgbmljZU1heCA9IG1heDtcbiAgfSBlbHNlIGlmIChjb3VudERlZmluZWQpIHtcbiAgICBuaWNlTWluID0gbWluRGVmaW5lZCA/IG1pbiA6IG5pY2VNaW47XG4gICAgbmljZU1heCA9IG1heERlZmluZWQgPyBtYXggOiBuaWNlTWF4O1xuICAgIG51bVNwYWNlcyA9IGNvdW50IC0gMTtcbiAgICBzcGFjaW5nID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIG51bVNwYWNlcztcbiAgfSBlbHNlIHtcbiAgICBudW1TcGFjZXMgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gc3BhY2luZztcbiAgICBpZiAoYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcbiAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQobnVtU3BhY2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSBNYXRoLm1heChcbiAgICBfZGVjaW1hbFBsYWNlcyhzcGFjaW5nKSxcbiAgICBfZGVjaW1hbFBsYWNlcyhuaWNlTWluKVxuICApO1xuICBmYWN0b3IgPSBNYXRoLnBvdygxMCwgaXNOdWxsT3JVbmRlZihwcmVjaXNpb24pID8gZGVjaW1hbFBsYWNlcyA6IHByZWNpc2lvbik7XG4gIG5pY2VNaW4gPSBNYXRoLnJvdW5kKG5pY2VNaW4gKiBmYWN0b3IpIC8gZmFjdG9yO1xuICBuaWNlTWF4ID0gTWF0aC5yb3VuZChuaWNlTWF4ICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgbGV0IGogPSAwO1xuICBpZiAobWluRGVmaW5lZCkge1xuICAgIGlmIChpbmNsdWRlQm91bmRzICYmIG5pY2VNaW4gIT09IG1pbikge1xuICAgICAgdGlja3MucHVzaCh7dmFsdWU6IG1pbn0pO1xuICAgICAgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgICAgaWYgKGFsbW9zdEVxdWFscyhNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3RvciwgbWluLCByZWxhdGl2ZUxhYmVsU2l6ZShtaW4sIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmljZU1pbiA8IG1pbikge1xuICAgICAgaisrO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgaiA8IG51bVNwYWNlczsgKytqKSB7XG4gICAgdGlja3MucHVzaCh7dmFsdWU6IE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yfSk7XG4gIH1cbiAgaWYgKG1heERlZmluZWQgJiYgaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWF4ICE9PSBtYXgpIHtcbiAgICBpZiAodGlja3MubGVuZ3RoICYmIGFsbW9zdEVxdWFscyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSwgbWF4LCByZWxhdGl2ZUxhYmVsU2l6ZShtYXgsIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlID0gbWF4O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aWNrcy5wdXNoKHt2YWx1ZTogbWF4fSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFtYXhEZWZpbmVkIHx8IG5pY2VNYXggPT09IG1heCkge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBuaWNlTWF4fSk7XG4gIH1cbiAgcmV0dXJuIHRpY2tzO1xufVxuZnVuY3Rpb24gcmVsYXRpdmVMYWJlbFNpemUodmFsdWUsIG1pblNwYWNpbmcsIHtob3Jpem9udGFsLCBtaW5Sb3RhdGlvbn0pIHtcbiAgY29uc3QgcmFkID0gdG9SYWRpYW5zKG1pblJvdGF0aW9uKTtcbiAgY29uc3QgcmF0aW8gPSAoaG9yaXpvbnRhbCA/IE1hdGguc2luKHJhZCkgOiBNYXRoLmNvcyhyYWQpKSB8fCAwLjAwMTtcbiAgY29uc3QgbGVuZ3RoID0gMC43NSAqIG1pblNwYWNpbmcgKiAoJycgKyB2YWx1ZSkubGVuZ3RoO1xuICByZXR1cm4gTWF0aC5taW4obWluU3BhY2luZyAvIHJhdGlvLCBsZW5ndGgpO1xufVxuY2xhc3MgTGluZWFyU2NhbGVCYXNlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICgodHlwZW9mIHJhdyA9PT0gJ251bWJlcicgfHwgcmF3IGluc3RhbmNlb2YgTnVtYmVyKSAmJiAhaXNGaW5pdGUoK3JhdykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gK3JhdztcbiAgfVxuICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCkge1xuICAgIGNvbnN0IHtiZWdpbkF0WmVyb30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge21pbkRlZmluZWQsIG1heERlZmluZWR9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgbGV0IHttaW4sIG1heH0gPSB0aGlzO1xuICAgIGNvbnN0IHNldE1pbiA9IHYgPT4gKG1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiB2KTtcbiAgICBjb25zdCBzZXRNYXggPSB2ID0+IChtYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdik7XG4gICAgaWYgKGJlZ2luQXRaZXJvKSB7XG4gICAgICBjb25zdCBtaW5TaWduID0gc2lnbihtaW4pO1xuICAgICAgY29uc3QgbWF4U2lnbiA9IHNpZ24obWF4KTtcbiAgICAgIGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuICAgICAgICBzZXRNYXgoMCk7XG4gICAgICB9IGVsc2UgaWYgKG1pblNpZ24gPiAwICYmIG1heFNpZ24gPiAwKSB7XG4gICAgICAgIHNldE1pbigwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gMTtcbiAgICAgIGlmIChtYXggPj0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgbWluIDw9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGguYWJzKG1heCAqIDAuMDUpO1xuICAgICAgfVxuICAgICAgc2V0TWF4KG1heCArIG9mZnNldCk7XG4gICAgICBpZiAoIWJlZ2luQXRaZXJvKSB7XG4gICAgICAgIHNldE1pbihtaW4gLSBvZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICB0aGlzLm1heCA9IG1heDtcbiAgfVxuICBnZXRUaWNrTGltaXQoKSB7XG4gICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgbGV0IHttYXhUaWNrc0xpbWl0LCBzdGVwU2l6ZX0gPSB0aWNrT3B0cztcbiAgICBsZXQgbWF4VGlja3M7XG4gICAgaWYgKHN0ZXBTaXplKSB7XG4gICAgICBtYXhUaWNrcyA9IE1hdGguY2VpbCh0aGlzLm1heCAvIHN0ZXBTaXplKSAtIE1hdGguZmxvb3IodGhpcy5taW4gLyBzdGVwU2l6ZSkgKyAxO1xuICAgICAgaWYgKG1heFRpY2tzID4gMTAwMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oYHNjYWxlcy4ke3RoaXMuaWR9LnRpY2tzLnN0ZXBTaXplOiAke3N0ZXBTaXplfSB3b3VsZCByZXN1bHQgZ2VuZXJhdGluZyB1cCB0byAke21heFRpY2tzfSB0aWNrcy4gTGltaXRpbmcgdG8gMTAwMC5gKTtcbiAgICAgICAgbWF4VGlja3MgPSAxMDAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhUaWNrcyA9IHRoaXMuY29tcHV0ZVRpY2tMaW1pdCgpO1xuICAgICAgbWF4VGlja3NMaW1pdCA9IG1heFRpY2tzTGltaXQgfHwgMTE7XG4gICAgfVxuICAgIGlmIChtYXhUaWNrc0xpbWl0KSB7XG4gICAgICBtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1heFRpY2tzO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgcmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICAgIGxldCBtYXhUaWNrcyA9IHRoaXMuZ2V0VGlja0xpbWl0KCk7XG4gICAgbWF4VGlja3MgPSBNYXRoLm1heCgyLCBtYXhUaWNrcyk7XG4gICAgY29uc3QgbnVtZXJpY0dlbmVyYXRvck9wdGlvbnMgPSB7XG4gICAgICBtYXhUaWNrcyxcbiAgICAgIGJvdW5kczogb3B0cy5ib3VuZHMsXG4gICAgICBtaW46IG9wdHMubWluLFxuICAgICAgbWF4OiBvcHRzLm1heCxcbiAgICAgIHByZWNpc2lvbjogdGlja09wdHMucHJlY2lzaW9uLFxuICAgICAgc3RlcDogdGlja09wdHMuc3RlcFNpemUsXG4gICAgICBjb3VudDogdGlja09wdHMuY291bnQsXG4gICAgICBtYXhEaWdpdHM6IHRoaXMuX21heERpZ2l0cygpLFxuICAgICAgaG9yaXpvbnRhbDogdGhpcy5pc0hvcml6b250YWwoKSxcbiAgICAgIG1pblJvdGF0aW9uOiB0aWNrT3B0cy5taW5Sb3RhdGlvbiB8fCAwLFxuICAgICAgaW5jbHVkZUJvdW5kczogdGlja09wdHMuaW5jbHVkZUJvdW5kcyAhPT0gZmFsc2VcbiAgICB9O1xuICAgIGNvbnN0IGRhdGFSYW5nZSA9IHRoaXMuX3JhbmdlIHx8IHRoaXM7XG4gICAgY29uc3QgdGlja3MgPSBnZW5lcmF0ZVRpY2tzJDEobnVtZXJpY0dlbmVyYXRvck9wdGlvbnMsIGRhdGFSYW5nZSk7XG4gICAgaWYgKG9wdHMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICBfc2V0TWluQW5kTWF4QnlLZXkodGlja3MsIHRoaXMsICd2YWx1ZScpO1xuICAgIH1cbiAgICBpZiAob3B0cy5yZXZlcnNlKSB7XG4gICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5tYXg7XG4gICAgICB0aGlzLmVuZCA9IHRoaXMubWluO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5taW47XG4gICAgICB0aGlzLmVuZCA9IHRoaXMubWF4O1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBsZXQgc3RhcnQgPSB0aGlzLm1pbjtcbiAgICBsZXQgZW5kID0gdGhpcy5tYXg7XG4gICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGlja3MubGVuZ3RoKSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSAoZW5kIC0gc3RhcnQpIC8gTWF0aC5tYXgodGlja3MubGVuZ3RoIC0gMSwgMSkgLyAyO1xuICAgICAgc3RhcnQgLT0gb2Zmc2V0O1xuICAgICAgZW5kICs9IG9mZnNldDtcbiAgICB9XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuICAgIHRoaXMuX2VuZFZhbHVlID0gZW5kO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBlbmQgLSBzdGFydDtcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZvcm1hdE51bWJlcih2YWx1ZSwgdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gIH1cbn1cblxuY2xhc3MgTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBtaW4gOiAwO1xuICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSA/IG1heCA6IDE7XG4gICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gIH1cbiAgY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICBjb25zdCBob3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCBsZW5ndGggPSBob3Jpem9udGFsID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xuICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy50aWNrcy5taW5Sb3RhdGlvbik7XG4gICAgY29uc3QgcmF0aW8gPSAoaG9yaXpvbnRhbCA/IE1hdGguc2luKG1pblJvdGF0aW9uKSA6IE1hdGguY29zKG1pblJvdGF0aW9uKSkgfHwgMC4wMDE7XG4gICAgY29uc3QgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApO1xuICAgIHJldHVybiBNYXRoLmNlaWwobGVuZ3RoIC8gTWF0aC5taW4oNDAsIHRpY2tGb250LmxpbmVIZWlnaHQgLyByYXRpbykpO1xuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2U7XG4gIH1cbn1cbkxpbmVhclNjYWxlLmlkID0gJ2xpbmVhcic7XG5MaW5lYXJTY2FsZS5kZWZhdWx0cyA9IHtcbiAgdGlja3M6IHtcbiAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5udW1lcmljXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzTWFqb3IodGlja1ZhbCkge1xuICBjb25zdCByZW1haW4gPSB0aWNrVmFsIC8gKE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWwpKSkpO1xuICByZXR1cm4gcmVtYWluID09PSAxO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVUaWNrcyhnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gIGNvbnN0IGVuZEV4cCA9IE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1heCkpO1xuICBjb25zdCBlbmRTaWduaWZpY2FuZCA9IE1hdGguY2VpbChkYXRhUmFuZ2UubWF4IC8gTWF0aC5wb3coMTAsIGVuZEV4cCkpO1xuICBjb25zdCB0aWNrcyA9IFtdO1xuICBsZXQgdGlja1ZhbCA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKGRhdGFSYW5nZS5taW4pKSkpO1xuICBsZXQgZXhwID0gTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsKSk7XG4gIGxldCBzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IodGlja1ZhbCAvIE1hdGgucG93KDEwLCBleHApKTtcbiAgbGV0IHByZWNpc2lvbiA9IGV4cCA8IDAgPyBNYXRoLnBvdygxMCwgTWF0aC5hYnMoZXhwKSkgOiAxO1xuICBkbyB7XG4gICAgdGlja3MucHVzaCh7dmFsdWU6IHRpY2tWYWwsIG1ham9yOiBpc01ham9yKHRpY2tWYWwpfSk7XG4gICAgKytzaWduaWZpY2FuZDtcbiAgICBpZiAoc2lnbmlmaWNhbmQgPT09IDEwKSB7XG4gICAgICBzaWduaWZpY2FuZCA9IDE7XG4gICAgICArK2V4cDtcbiAgICAgIHByZWNpc2lvbiA9IGV4cCA+PSAwID8gMSA6IHByZWNpc2lvbjtcbiAgICB9XG4gICAgdGlja1ZhbCA9IE1hdGgucm91bmQoc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gIH0gd2hpbGUgKGV4cCA8IGVuZEV4cCB8fCAoZXhwID09PSBlbmRFeHAgJiYgc2lnbmlmaWNhbmQgPCBlbmRTaWduaWZpY2FuZCkpO1xuICBjb25zdCBsYXN0VGljayA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHRpY2tWYWwpO1xuICB0aWNrcy5wdXNoKHt2YWx1ZTogbGFzdFRpY2ssIG1ham9yOiBpc01ham9yKHRpY2tWYWwpfSk7XG4gIHJldHVybiB0aWNrcztcbn1cbmNsYXNzIExvZ2FyaXRobWljU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy5zdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcywgW3JhdywgaW5kZXhdKTtcbiAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSAmJiB2YWx1ZSA+IDAgPyB2YWx1ZSA6IG51bGw7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gTWF0aC5tYXgoMCwgbWluKSA6IG51bGw7XG4gICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gTWF0aC5tYXgoMCwgbWF4KSA6IG51bGw7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5iZWdpbkF0WmVybykge1xuICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgY29uc3Qge21pbkRlZmluZWQsIG1heERlZmluZWR9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgbGV0IG1pbiA9IHRoaXMubWluO1xuICAgIGxldCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCBzZXRNaW4gPSB2ID0+IChtaW4gPSBtaW5EZWZpbmVkID8gbWluIDogdik7XG4gICAgY29uc3Qgc2V0TWF4ID0gdiA9PiAobWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IHYpO1xuICAgIGNvbnN0IGV4cCA9ICh2LCBtKSA9PiBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh2KSkgKyBtKTtcbiAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICBzZXRNaW4oMSk7XG4gICAgICAgIHNldE1heCgxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRNaW4oZXhwKG1pbiwgLTEpKTtcbiAgICAgICAgc2V0TWF4KGV4cChtYXgsICsxKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgc2V0TWluKGV4cChtYXgsIC0xKSk7XG4gICAgfVxuICAgIGlmIChtYXggPD0gMCkge1xuICAgICAgc2V0TWF4KGV4cChtaW4sICsxKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl96ZXJvICYmIHRoaXMubWluICE9PSB0aGlzLl9zdWdnZXN0ZWRNaW4gJiYgbWluID09PSBleHAodGhpcy5taW4sIDApKSB7XG4gICAgICBzZXRNaW4oZXhwKG1pbiwgLTEpKTtcbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGdlbmVyYXRpb25PcHRpb25zID0ge1xuICAgICAgbWluOiB0aGlzLl91c2VyTWluLFxuICAgICAgbWF4OiB0aGlzLl91c2VyTWF4XG4gICAgfTtcbiAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHRoaXMpO1xuICAgIGlmIChvcHRzLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgX3NldE1pbkFuZE1heEJ5S2V5KHRpY2tzLCB0aGlzLCAndmFsdWUnKTtcbiAgICB9XG4gICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWluO1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1heDtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZFxuICAgICAgPyAnMCdcbiAgICAgIDogZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLm1pbjtcbiAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gbG9nMTAoc3RhcnQpO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBsb2cxMCh0aGlzLm1heCkgLSBsb2cxMChzdGFydCk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMubWluO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwodmFsdWUgPT09IHRoaXMubWluXG4gICAgICA/IDBcbiAgICAgIDogKGxvZzEwKHZhbHVlKSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCk7XG4gICAgcmV0dXJuIE1hdGgucG93KDEwLCB0aGlzLl9zdGFydFZhbHVlICsgZGVjaW1hbCAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG59XG5Mb2dhcml0aG1pY1NjYWxlLmlkID0gJ2xvZ2FyaXRobWljJztcbkxvZ2FyaXRobWljU2NhbGUuZGVmYXVsdHMgPSB7XG4gIHRpY2tzOiB7XG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubG9nYXJpdGhtaWMsXG4gICAgbWFqb3I6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSB7XG4gIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyh0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmcpO1xuICAgIHJldHVybiB2YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5mb250ICYmIHRpY2tPcHRzLmZvbnQuc2l6ZSwgZGVmYXVsdHMuZm9udC5zaXplKSArIHBhZGRpbmcuaGVpZ2h0O1xuICB9XG4gIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnQsIGxhYmVsKSB7XG4gIGxhYmVsID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbCA6IFtsYWJlbF07XG4gIHJldHVybiB7XG4gICAgdzogX2xvbmdlc3RUZXh0KGN0eCwgZm9udC5zdHJpbmcsIGxhYmVsKSxcbiAgICBoOiBsYWJlbC5sZW5ndGggKiBmb250LmxpbmVIZWlnaHRcbiAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuICBpZiAoYW5nbGUgPT09IG1pbiB8fCBhbmdsZSA9PT0gbWF4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBwb3MgLSAoc2l6ZSAvIDIpLFxuICAgICAgZW5kOiBwb3MgKyAoc2l6ZSAvIDIpXG4gICAgfTtcbiAgfSBlbHNlIGlmIChhbmdsZSA8IG1pbiB8fCBhbmdsZSA+IG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zIC0gc2l6ZSxcbiAgICAgIGVuZDogcG9zXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBwb3MsXG4gICAgZW5kOiBwb3MgKyBzaXplXG4gIH07XG59XG5mdW5jdGlvbiBmaXRXaXRoUG9pbnRMYWJlbHMoc2NhbGUpIHtcbiAgY29uc3Qgb3JpZyA9IHtcbiAgICBsOiBzY2FsZS5sZWZ0ICsgc2NhbGUuX3BhZGRpbmcubGVmdCxcbiAgICByOiBzY2FsZS5yaWdodCAtIHNjYWxlLl9wYWRkaW5nLnJpZ2h0LFxuICAgIHQ6IHNjYWxlLnRvcCArIHNjYWxlLl9wYWRkaW5nLnRvcCxcbiAgICBiOiBzY2FsZS5ib3R0b20gLSBzY2FsZS5fcGFkZGluZy5ib3R0b21cbiAgfTtcbiAgY29uc3QgbGltaXRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZyk7XG4gIGNvbnN0IGxhYmVsU2l6ZXMgPSBbXTtcbiAgY29uc3QgcGFkZGluZyA9IFtdO1xuICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgY29uc3QgcG9pbnRMYWJlbE9wdHMgPSBzY2FsZS5vcHRpb25zLnBvaW50TGFiZWxzO1xuICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBwb2ludExhYmVsT3B0cy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG4gICAgY29uc3Qgb3B0cyA9IHBvaW50TGFiZWxPcHRzLnNldENvbnRleHQoc2NhbGUuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgIHBhZGRpbmdbaV0gPSBvcHRzLnBhZGRpbmc7XG4gICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgIGNvbnN0IHRleHRTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShzY2FsZS5jdHgsIHBsRm9udCwgc2NhbGUuX3BvaW50TGFiZWxzW2ldKTtcbiAgICBsYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG4gICAgY29uc3QgYW5nbGVSYWRpYW5zID0gX25vcm1hbGl6ZUFuZ2xlKHNjYWxlLmdldEluZGV4QW5nbGUoaSkgKyBhZGRpdGlvbmFsQW5nbGUpO1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoYW5nbGVSYWRpYW5zKSk7XG4gICAgY29uc3QgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuICAgIGNvbnN0IHZMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueSwgdGV4dFNpemUuaCwgOTAsIDI3MCk7XG4gICAgdXBkYXRlTGltaXRzKGxpbWl0cywgb3JpZywgYW5nbGVSYWRpYW5zLCBoTGltaXRzLCB2TGltaXRzKTtcbiAgfVxuICBzY2FsZS5zZXRDZW50ZXJQb2ludChcbiAgICBvcmlnLmwgLSBsaW1pdHMubCxcbiAgICBsaW1pdHMuciAtIG9yaWcucixcbiAgICBvcmlnLnQgLSBsaW1pdHMudCxcbiAgICBsaW1pdHMuYiAtIG9yaWcuYlxuICApO1xuICBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zID0gYnVpbGRQb2ludExhYmVsSXRlbXMoc2NhbGUsIGxhYmVsU2l6ZXMsIHBhZGRpbmcpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGltaXRzKGxpbWl0cywgb3JpZywgYW5nbGUsIGhMaW1pdHMsIHZMaW1pdHMpIHtcbiAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpKTtcbiAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3MoYW5nbGUpKTtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGlmIChoTGltaXRzLnN0YXJ0IDwgb3JpZy5sKSB7XG4gICAgeCA9IChvcmlnLmwgLSBoTGltaXRzLnN0YXJ0KSAvIHNpbjtcbiAgICBsaW1pdHMubCA9IE1hdGgubWluKGxpbWl0cy5sLCBvcmlnLmwgLSB4KTtcbiAgfSBlbHNlIGlmIChoTGltaXRzLmVuZCA+IG9yaWcucikge1xuICAgIHggPSAoaExpbWl0cy5lbmQgLSBvcmlnLnIpIC8gc2luO1xuICAgIGxpbWl0cy5yID0gTWF0aC5tYXgobGltaXRzLnIsIG9yaWcuciArIHgpO1xuICB9XG4gIGlmICh2TGltaXRzLnN0YXJ0IDwgb3JpZy50KSB7XG4gICAgeSA9IChvcmlnLnQgLSB2TGltaXRzLnN0YXJ0KSAvIGNvcztcbiAgICBsaW1pdHMudCA9IE1hdGgubWluKGxpbWl0cy50LCBvcmlnLnQgLSB5KTtcbiAgfSBlbHNlIGlmICh2TGltaXRzLmVuZCA+IG9yaWcuYikge1xuICAgIHkgPSAodkxpbWl0cy5lbmQgLSBvcmlnLmIpIC8gY29zO1xuICAgIGxpbWl0cy5iID0gTWF0aC5tYXgobGltaXRzLmIsIG9yaWcuYiArIHkpO1xuICB9XG59XG5mdW5jdGlvbiBidWlsZFBvaW50TGFiZWxJdGVtcyhzY2FsZSwgbGFiZWxTaXplcywgcGFkZGluZykge1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgY29uc3Qgb3B0cyA9IHNjYWxlLm9wdGlvbnM7XG4gIGNvbnN0IGV4dHJhID0gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIC8gMjtcbiAgY29uc3Qgb3V0ZXJEaXN0YW5jZSA9IHNjYWxlLmRyYXdpbmdBcmVhO1xuICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBvcHRzLnBvaW50TGFiZWxzLmNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspIHtcbiAgICBjb25zdCBwb2ludExhYmVsUG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIG91dGVyRGlzdGFuY2UgKyBleHRyYSArIHBhZGRpbmdbaV0sIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhfbm9ybWFsaXplQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLmFuZ2xlICsgSEFMRl9QSSkpKTtcbiAgICBjb25zdCBzaXplID0gbGFiZWxTaXplc1tpXTtcbiAgICBjb25zdCB5ID0geUZvckFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi55LCBzaXplLmgsIGFuZ2xlKTtcbiAgICBjb25zdCB0ZXh0QWxpZ24gPSBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSk7XG4gICAgY29uc3QgbGVmdCA9IGxlZnRGb3JUZXh0QWxpZ24ocG9pbnRMYWJlbFBvc2l0aW9uLngsIHNpemUudywgdGV4dEFsaWduKTtcbiAgICBpdGVtcy5wdXNoKHtcbiAgICAgIHg6IHBvaW50TGFiZWxQb3NpdGlvbi54LFxuICAgICAgeSxcbiAgICAgIHRleHRBbGlnbixcbiAgICAgIGxlZnQsXG4gICAgICB0b3A6IHksXG4gICAgICByaWdodDogbGVmdCArIHNpemUudyxcbiAgICAgIGJvdHRvbTogeSArIHNpemUuaFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpdGVtcztcbn1cbmZ1bmN0aW9uIGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKSB7XG4gIGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG4gICAgcmV0dXJuICdjZW50ZXInO1xuICB9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG4gICAgcmV0dXJuICdsZWZ0JztcbiAgfVxuICByZXR1cm4gJ3JpZ2h0Jztcbn1cbmZ1bmN0aW9uIGxlZnRGb3JUZXh0QWxpZ24oeCwgdywgYWxpZ24pIHtcbiAgaWYgKGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgeCAtPSB3O1xuICB9IGVsc2UgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgIHggLT0gKHcgLyAyKTtcbiAgfVxuICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIHlGb3JBbmdsZSh5LCBoLCBhbmdsZSkge1xuICBpZiAoYW5nbGUgPT09IDkwIHx8IGFuZ2xlID09PSAyNzApIHtcbiAgICB5IC09IChoIC8gMik7XG4gIH0gZWxzZSBpZiAoYW5nbGUgPiAyNzAgfHwgYW5nbGUgPCA5MCkge1xuICAgIHkgLT0gaDtcbiAgfVxuICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSwgbGFiZWxDb3VudCkge1xuICBjb25zdCB7Y3R4LCBvcHRpb25zOiB7cG9pbnRMYWJlbHN9fSA9IHNjYWxlO1xuICBmb3IgKGxldCBpID0gbGFiZWxDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3Qgb3B0c0F0SW5kZXggPSBwb2ludExhYmVscy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgY29uc3Qge3gsIHksIHRleHRBbGlnbiwgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tfSA9IHNjYWxlLl9wb2ludExhYmVsSXRlbXNbaV07XG4gICAgY29uc3Qge2JhY2tkcm9wQ29sb3J9ID0gb3B0c0F0SW5kZXg7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKGJhY2tkcm9wQ29sb3IpKSB7XG4gICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKG9wdHNBdEluZGV4LmJvcmRlclJhZGl1cyk7XG4gICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gYmFja2Ryb3BDb2xvcjtcbiAgICAgIGNvbnN0IGJhY2tkcm9wTGVmdCA9IGxlZnQgLSBwYWRkaW5nLmxlZnQ7XG4gICAgICBjb25zdCBiYWNrZHJvcFRvcCA9IHRvcCAtIHBhZGRpbmcudG9wO1xuICAgICAgY29uc3QgYmFja2Ryb3BXaWR0aCA9IHJpZ2h0IC0gbGVmdCArIHBhZGRpbmcud2lkdGg7XG4gICAgICBjb25zdCBiYWNrZHJvcEhlaWdodCA9IGJvdHRvbSAtIHRvcCArIHBhZGRpbmcuaGVpZ2h0O1xuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKHYgPT4gdiAhPT0gMCkpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgeDogYmFja2Ryb3BMZWZ0LFxuICAgICAgICAgIHk6IGJhY2tkcm9wVG9wLFxuICAgICAgICAgIHc6IGJhY2tkcm9wV2lkdGgsXG4gICAgICAgICAgaDogYmFja2Ryb3BIZWlnaHQsXG4gICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGJhY2tkcm9wTGVmdCwgYmFja2Ryb3BUb3AsIGJhY2tkcm9wV2lkdGgsIGJhY2tkcm9wSGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyVGV4dChcbiAgICAgIGN0eCxcbiAgICAgIHNjYWxlLl9wb2ludExhYmVsc1tpXSxcbiAgICAgIHgsXG4gICAgICB5ICsgKHBsRm9udC5saW5lSGVpZ2h0IC8gMiksXG4gICAgICBwbEZvbnQsXG4gICAgICB7XG4gICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZSdcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCkge1xuICBjb25zdCB7Y3R4fSA9IHNjYWxlO1xuICBpZiAoY2lyY3VsYXIpIHtcbiAgICBjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgVEFVKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcbiAgICBjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxhYmVsQ291bnQ7IGkrKykge1xuICAgICAgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgcmFkaXVzKTtcbiAgICAgIGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBsYWJlbENvdW50KSB7XG4gIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgY29uc3QgY2lyY3VsYXIgPSBncmlkTGluZU9wdHMuY2lyY3VsYXI7XG4gIGNvbnN0IHtjb2xvciwgbGluZVdpZHRofSA9IGdyaWRMaW5lT3B0cztcbiAgaWYgKCghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQpIHx8ICFjb2xvciB8fCAhbGluZVdpZHRoIHx8IHJhZGl1cyA8IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gIGN0eC5zZXRMaW5lRGFzaChncmlkTGluZU9wdHMuYm9yZGVyRGFzaCk7XG4gIGN0eC5saW5lRGFzaE9mZnNldCA9IGdyaWRMaW5lT3B0cy5ib3JkZXJEYXNoT2Zmc2V0O1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguc3Ryb2tlKCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBsYWJlbCxcbiAgICBpbmRleCxcbiAgICB0eXBlOiAncG9pbnRMYWJlbCdcbiAgfSk7XG59XG5jbGFzcyBSYWRpYWxMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy54Q2VudGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueUNlbnRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BvaW50TGFiZWxzID0gW107XG4gICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSAvIDIpO1xuICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgY29uc3QgaCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBwYWRkaW5nLmhlaWdodDtcbiAgICB0aGlzLnhDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMubGVmdCArIHcgLyAyICsgcGFkZGluZy5sZWZ0KTtcbiAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSA9IE1hdGguZmxvb3IoTWF0aC5taW4odywgaCkgLyAyKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heChmYWxzZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogMDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUuZ2VuZXJhdGVUaWNrTGFiZWxzLmNhbGwodGhpcywgdGlja3MpO1xuICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKVxuICAgICAgLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbdmFsdWUsIGluZGV4XSwgdGhpcyk7XG4gICAgICAgIHJldHVybiBsYWJlbCB8fCBsYWJlbCA9PT0gMCA/IGxhYmVsIDogJyc7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigodiwgaSkgPT4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcbiAgICB9XG4gIH1cbiAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICB0aGlzLnhDZW50ZXIgKz0gTWF0aC5mbG9vcigobGVmdE1vdmVtZW50IC0gcmlnaHRNb3ZlbWVudCkgLyAyKTtcbiAgICB0aGlzLnlDZW50ZXIgKz0gTWF0aC5mbG9vcigodG9wTW92ZW1lbnQgLSBib3R0b21Nb3ZlbWVudCkgLyAyKTtcbiAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICB9XG4gIGdldEluZGV4QW5nbGUoaW5kZXgpIHtcbiAgICBjb25zdCBhbmdsZU11bHRpcGxpZXIgPSBUQVUgLyAodGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoIHx8IDEpO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgIHJldHVybiBfbm9ybWFsaXplQW5nbGUoaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyB0b1JhZGlhbnMoc3RhcnRBbmdsZSkpO1xuICB9XG4gIGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBjb25zdCBzY2FsaW5nRmFjdG9yID0gdGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gKHZhbHVlIC0gdGhpcy5taW4pICogc2NhbGluZ0ZhY3RvcjtcbiAgfVxuICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgIGlmIChpc051bGxPclVuZGVmKGRpc3RhbmNlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJldmVyc2UgPyB0aGlzLm1heCAtIHNjYWxlZERpc3RhbmNlIDogdGhpcy5taW4gKyBzY2FsZWREaXN0YW5jZTtcbiAgfVxuICBnZXRQb2ludExhYmVsQ29udGV4dChpbmRleCkge1xuICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBwb2ludExhYmVscy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHBvaW50TGFiZWwgPSBwb2ludExhYmVsc1tpbmRleF07XG4gICAgICByZXR1cm4gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBwb2ludExhYmVsKTtcbiAgICB9XG4gIH1cbiAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gSEFMRl9QSSArIGFkZGl0aW9uYWxBbmdsZTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy54Q2VudGVyLFxuICAgICAgeTogTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy55Q2VudGVyLFxuICAgICAgYW5nbGVcbiAgICB9O1xuICB9XG4gIGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG4gIH1cbiAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4IHx8IDAsIHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICB9XG4gIGdldFBvaW50TGFiZWxQb3NpdGlvbihpbmRleCkge1xuICAgIGNvbnN0IHtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdCxcbiAgICAgIHRvcCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgIH07XG4gIH1cbiAgZHJhd0JhY2tncm91bmQoKSB7XG4gICAgY29uc3Qge2JhY2tncm91bmRDb2xvciwgZ3JpZDoge2NpcmN1bGFyfX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgcGF0aFJhZGl1c0xpbmUodGhpcywgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLl9lbmRWYWx1ZSksIGNpcmN1bGFyLCB0aGlzLl9wb2ludExhYmVscy5sZW5ndGgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBkcmF3R3JpZCgpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHthbmdsZUxpbmVzLCBncmlkfSA9IG9wdHM7XG4gICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBsZXQgaSwgb2Zmc2V0LCBwb3NpdGlvbjtcbiAgICBpZiAob3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICBkcmF3UG9pbnRMYWJlbHModGhpcywgbGFiZWxDb3VudCk7XG4gICAgfVxuICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aWNrLnZhbHVlKTtcbiAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXggLSAxKSk7XG4gICAgICAgICAgZHJhd1JhZGl1c0xpbmUodGhpcywgb3B0c0F0SW5kZXgsIG9mZnNldCwgbGFiZWxDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgZm9yIChpID0gbGFiZWxDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICBjb25zdCB7Y29sb3IsIGxpbmVXaWR0aH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgaWYgKCFsaW5lV2lkdGggfHwgIWNvbG9yKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaChvcHRzQXRJbmRleC5ib3JkZXJEYXNoKTtcbiAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgb2Zmc2V0KTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgY3R4LmxpbmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZHJhd0JvcmRlcigpIHt9XG4gIGRyYXdMYWJlbHMoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoMCk7XG4gICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSAwICYmICFvcHRzLnJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICBjdHguZm9udCA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgd2lkdGggPSBjdHgubWVhc3VyZVRleHQodGljay5sYWJlbCkud2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAtd2lkdGggLyAyIC0gcGFkZGluZy5sZWZ0LFxuICAgICAgICAgIC1vZmZzZXQgLSB0aWNrRm9udC5zaXplIC8gMiAtIHBhZGRpbmcudG9wLFxuICAgICAgICAgIHdpZHRoICsgcGFkZGluZy53aWR0aCxcbiAgICAgICAgICB0aWNrRm9udC5zaXplICsgcGFkZGluZy5oZWlnaHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3IsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGRyYXdUaXRsZSgpIHt9XG59XG5SYWRpYWxMaW5lYXJTY2FsZS5pZCA9ICdyYWRpYWxMaW5lYXInO1xuUmFkaWFsTGluZWFyU2NhbGUuZGVmYXVsdHMgPSB7XG4gIGRpc3BsYXk6IHRydWUsXG4gIGFuaW1hdGU6IHRydWUsXG4gIHBvc2l0aW9uOiAnY2hhcnRBcmVhJyxcbiAgYW5nbGVMaW5lczoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgbGluZVdpZHRoOiAxLFxuICAgIGJvcmRlckRhc2g6IFtdLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuICB9LFxuICBncmlkOiB7XG4gICAgY2lyY3VsYXI6IGZhbHNlXG4gIH0sXG4gIHN0YXJ0QW5nbGU6IDAsXG4gIHRpY2tzOiB7XG4gICAgc2hvd0xhYmVsQmFja2Ryb3A6IHRydWUsXG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICB9LFxuICBwb2ludExhYmVsczoge1xuICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBiYWNrZHJvcFBhZGRpbmc6IDIsXG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBmb250OiB7XG4gICAgICBzaXplOiAxMFxuICAgIH0sXG4gICAgY2FsbGJhY2sobGFiZWwpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIHBhZGRpbmc6IDUsXG4gICAgY2VudGVyUG9pbnRMYWJlbHM6IGZhbHNlXG4gIH1cbn07XG5SYWRpYWxMaW5lYXJTY2FsZS5kZWZhdWx0Um91dGVzID0ge1xuICAnYW5nbGVMaW5lcy5jb2xvcic6ICdib3JkZXJDb2xvcicsXG4gICdwb2ludExhYmVscy5jb2xvcic6ICdjb2xvcicsXG4gICd0aWNrcy5jb2xvcic6ICdjb2xvcidcbn07XG5SYWRpYWxMaW5lYXJTY2FsZS5kZXNjcmlwdG9ycyA9IHtcbiAgYW5nbGVMaW5lczoge1xuICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gIH1cbn07XG5cbmNvbnN0IElOVEVSVkFMUyA9IHtcbiAgbWlsbGlzZWNvbmQ6IHtjb21tb246IHRydWUsIHNpemU6IDEsIHN0ZXBzOiAxMDAwfSxcbiAgc2Vjb25kOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAxMDAwLCBzdGVwczogNjB9LFxuICBtaW51dGU6IHtjb21tb246IHRydWUsIHNpemU6IDYwMDAwLCBzdGVwczogNjB9LFxuICBob3VyOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAzNjAwMDAwLCBzdGVwczogMjR9LFxuICBkYXk6IHtjb21tb246IHRydWUsIHNpemU6IDg2NDAwMDAwLCBzdGVwczogMzB9LFxuICB3ZWVrOiB7Y29tbW9uOiBmYWxzZSwgc2l6ZTogNjA0ODAwMDAwLCBzdGVwczogNH0sXG4gIG1vbnRoOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAyLjYyOGU5LCBzdGVwczogMTJ9LFxuICBxdWFydGVyOiB7Y29tbW9uOiBmYWxzZSwgc2l6ZTogNy44ODRlOSwgc3RlcHM6IDR9LFxuICB5ZWFyOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAzLjE1NGUxMH1cbn07XG5jb25zdCBVTklUUyA9IChPYmplY3Qua2V5cyhJTlRFUlZBTFMpKTtcbmZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cbmZ1bmN0aW9uIHBhcnNlKHNjYWxlLCBpbnB1dCkge1xuICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG4gIGNvbnN0IHtwYXJzZXIsIHJvdW5kLCBpc29XZWVrZGF5fSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gIGxldCB2YWx1ZSA9IGlucHV0O1xuICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gcGFyc2VyKHZhbHVlKTtcbiAgfVxuICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgIHZhbHVlID0gdHlwZW9mIHBhcnNlciA9PT0gJ3N0cmluZydcbiAgICAgID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgcGFyc2VyKVxuICAgICAgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgfVxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocm91bmQpIHtcbiAgICB2YWx1ZSA9IHJvdW5kID09PSAnd2VlaycgJiYgKGlzTnVtYmVyKGlzb1dlZWtkYXkpIHx8IGlzb1dlZWtkYXkgPT09IHRydWUpXG4gICAgICA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KVxuICAgICAgOiBhZGFwdGVyLnN0YXJ0T2YodmFsdWUsIHJvdW5kKTtcbiAgfVxuICByZXR1cm4gK3ZhbHVlO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyhtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcbiAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKSB7XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuICAgIGNvbnN0IGZhY3RvciA9IGludGVydmFsLnN0ZXBzID8gaW50ZXJ2YWwuc3RlcHMgOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFVOSVRTW2lsZW4gLSAxXTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKSB7XG4gICAgY29uc3QgdW5pdCA9IFVOSVRTW2ldO1xuICAgIGlmIChJTlRFUlZBTFNbdW5pdF0uY29tbW9uICYmIHNjYWxlLl9hZGFwdGVyLmRpZmYobWF4LCBtaW4sIHVuaXQpID49IG51bVRpY2tzIC0gMSkge1xuICAgICAgcmV0dXJuIHVuaXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWFqb3JVbml0KHVuaXQpIHtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKSB7XG4gIGlmICghdGltZXN0YW1wcykge1xuICAgIHRpY2tzW3RpbWVdID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgIGNvbnN0IHtsbywgaGl9ID0gX2xvb2t1cCh0aW1lc3RhbXBzLCB0aW1lKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICB0aWNrc1t0aW1lc3RhbXBdID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG4gIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgY29uc3QgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKHRpY2tzWzBdLnZhbHVlLCBtYWpvclVuaXQpO1xuICBjb25zdCBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG4gIGxldCBtYWpvciwgaW5kZXg7XG4gIGZvciAobWFqb3IgPSBmaXJzdDsgbWFqb3IgPD0gbGFzdDsgbWFqb3IgPSArYWRhcHRlci5hZGQobWFqb3IsIDEsIG1ham9yVW5pdCkpIHtcbiAgICBpbmRleCA9IG1hcFttYWpvcl07XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRpY2tzW2luZGV4XS5tYWpvciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHRpY2tzRnJvbVRpbWVzdGFtcHMoc2NhbGUsIHZhbHVlcywgbWFqb3JVbml0KSB7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgbGV0IGksIHZhbHVlO1xuICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgbWFwW3ZhbHVlXSA9IGk7XG4gICAgdGlja3MucHVzaCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIG1ham9yOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiAoaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0KSA/IHRpY2tzIDogc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KTtcbn1cbmNsYXNzIFRpbWVTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGxhYmVsczogW10sXG4gICAgICBhbGw6IFtdXG4gICAgfTtcbiAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgdGhpcy5fbWFqb3JVbml0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICB0aGlzLl9ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5fcGFyc2VPcHRzID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXQoc2NhbGVPcHRzLCBvcHRzKSB7XG4gICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlciA9IG5ldyBhZGFwdGVycy5fZGF0ZShzY2FsZU9wdHMuYWRhcHRlcnMuZGF0ZSk7XG4gICAgYWRhcHRlci5pbml0KG9wdHMpO1xuICAgIG1lcmdlSWYodGltZS5kaXNwbGF5Rm9ybWF0cywgYWRhcHRlci5mb3JtYXRzKCkpO1xuICAgIHRoaXMuX3BhcnNlT3B0cyA9IHtcbiAgICAgIHBhcnNlcjogdGltZS5wYXJzZXIsXG4gICAgICByb3VuZDogdGltZS5yb3VuZCxcbiAgICAgIGlzb1dlZWtkYXk6IHRpbWUuaXNvV2Vla2RheVxuICAgIH07XG4gICAgc3VwZXIuaW5pdChzY2FsZU9wdHMpO1xuICAgIHRoaXMuX25vcm1hbGl6ZWQgPSBvcHRzLm5vcm1hbGl6ZWQ7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChyYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZSh0aGlzLCByYXcpO1xuICB9XG4gIGJlZm9yZUxheW91dCgpIHtcbiAgICBzdXBlci5iZWZvcmVMYXlvdXQoKTtcbiAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgbGFiZWxzOiBbXSxcbiAgICAgIGFsbDogW11cbiAgICB9O1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICBjb25zdCB1bml0ID0gb3B0aW9ucy50aW1lLnVuaXQgfHwgJ2RheSc7XG4gICAgbGV0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBmdW5jdGlvbiBfYXBwbHlCb3VuZHMoYm91bmRzKSB7XG4gICAgICBpZiAoIW1pbkRlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5taW4pKSB7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgYm91bmRzLm1pbik7XG4gICAgICB9XG4gICAgICBpZiAoIW1heERlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5tYXgpKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgYm91bmRzLm1heCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuX2dldExhYmVsQm91bmRzKCkpO1xuICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSAndGlja3MnIHx8IG9wdGlvbnMudGlja3Muc291cmNlICE9PSAnbGFiZWxzJykge1xuICAgICAgICBfYXBwbHlCb3VuZHModGhpcy5nZXRNaW5NYXgoZmFsc2UpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6ICthZGFwdGVyLnN0YXJ0T2YoRGF0ZS5ub3coKSwgdW5pdCk7XG4gICAgbWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSAmJiAhaXNOYU4obWF4KSA/IG1heCA6ICthZGFwdGVyLmVuZE9mKERhdGUubm93KCksIHVuaXQpICsgMTtcbiAgICB0aGlzLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4IC0gMSk7XG4gICAgdGhpcy5tYXggPSBNYXRoLm1heChtaW4gKyAxLCBtYXgpO1xuICB9XG4gIF9nZXRMYWJlbEJvdW5kcygpIHtcbiAgICBjb25zdCBhcnIgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgIGxldCBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IG1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICBpZiAoYXJyLmxlbmd0aCkge1xuICAgICAgbWluID0gYXJyWzBdO1xuICAgICAgbWF4ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHttaW4sIG1heH07XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICBjb25zdCB0aW1lc3RhbXBzID0gdGlja09wdHMuc291cmNlID09PSAnbGFiZWxzJyA/IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCkgOiB0aGlzLl9nZW5lcmF0ZSgpO1xuICAgIGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgdGhpcy5taW4gPSB0aGlzLl91c2VyTWluIHx8IHRpbWVzdGFtcHNbMF07XG4gICAgICB0aGlzLm1heCA9IHRoaXMuX3VzZXJNYXggfHwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCB0aWNrcyA9IF9maWx0ZXJCZXR3ZWVuKHRpbWVzdGFtcHMsIG1pbiwgbWF4KTtcbiAgICB0aGlzLl91bml0ID0gdGltZU9wdHMudW5pdCB8fCAodGlja09wdHMuYXV0b1NraXBcbiAgICAgID8gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSlcbiAgICAgIDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcodGhpcywgdGlja3MubGVuZ3RoLCB0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgpKTtcbiAgICB0aGlzLl9tYWpvclVuaXQgPSAhdGlja09wdHMubWFqb3IuZW5hYmxlZCB8fCB0aGlzLl91bml0ID09PSAneWVhcicgPyB1bmRlZmluZWRcbiAgICAgIDogZGV0ZXJtaW5lTWFqb3JVbml0KHRoaXMuX3VuaXQpO1xuICAgIHRoaXMuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCB0aWNrcywgdGhpcy5fbWFqb3JVbml0KTtcbiAgfVxuICBhZnRlckF1dG9Ta2lwKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0QWZ0ZXJBdXRvc2tpcCkge1xuICAgICAgdGhpcy5pbml0T2Zmc2V0cyh0aGlzLnRpY2tzLm1hcCh0aWNrID0+ICt0aWNrLnZhbHVlKSk7XG4gICAgfVxuICB9XG4gIGluaXRPZmZzZXRzKHRpbWVzdGFtcHMpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSAwO1xuICAgIGxldCBmaXJzdCwgbGFzdDtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldCAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgZmlyc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzWzBdKTtcbiAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IDEgLSBmaXJzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgIH1cbiAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVuZCA9IGxhc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSAobGFzdCAtIHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAyXSkpIC8gMjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoc3RhcnQsIDAsIGxpbWl0KTtcbiAgICBlbmQgPSBfbGltaXRWYWx1ZShlbmQsIDAsIGxpbWl0KTtcbiAgICB0aGlzLl9vZmZzZXRzID0ge3N0YXJ0LCBlbmQsIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpfTtcbiAgfVxuICBfZ2VuZXJhdGUoKSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcbiAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IHZhbHVlT3JEZWZhdWx0KHRpbWVPcHRzLnN0ZXBTaXplLCAxKTtcbiAgICBjb25zdCB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcbiAgICBjb25zdCBoYXNXZWVrZGF5ID0gaXNOdW1iZXIod2Vla2RheSkgfHwgd2Vla2RheSA9PT0gdHJ1ZTtcbiAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgIGxldCBmaXJzdCA9IG1pbjtcbiAgICBsZXQgdGltZSwgY291bnQ7XG4gICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICB9XG4gICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCBoYXNXZWVrZGF5ID8gJ2RheScgOiBtaW5vcik7XG4gICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICB9XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IG9wdGlvbnMudGlja3Muc291cmNlID09PSAnZGF0YScgJiYgdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgIGZvciAodGltZSA9IGZpcnN0LCBjb3VudCA9IDA7IHRpbWUgPCBtYXg7IHRpbWUgPSArYWRhcHRlci5hZGQodGltZSwgc3RlcFNpemUsIG1pbm9yKSwgY291bnQrKykge1xuICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgfVxuICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGlja3MpLnNvcnQoKGEsIGIpID0+IGEgLSBiKS5tYXAoeCA9PiAreCk7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IHRpbWVPcHRzID0gdGhpcy5vcHRpb25zLnRpbWU7XG4gICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgfVxuICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMuZGlzcGxheUZvcm1hdHMuZGF0ZXRpbWUpO1xuICB9XG4gIF90aWNrRm9ybWF0RnVuY3Rpb24odGltZSwgaW5kZXgsIHRpY2tzLCBmb3JtYXQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgY29uc3QgdW5pdCA9IHRoaXMuX3VuaXQ7XG4gICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgIGNvbnN0IG1pbm9yRm9ybWF0ID0gdW5pdCAmJiBmb3JtYXRzW3VuaXRdO1xuICAgIGNvbnN0IG1ham9yRm9ybWF0ID0gbWFqb3JVbml0ICYmIGZvcm1hdHNbbWFqb3JVbml0XTtcbiAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgIGNvbnN0IG1ham9yID0gbWFqb3JVbml0ICYmIG1ham9yRm9ybWF0ICYmIHRpY2sgJiYgdGljay5tYWpvcjtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHRpbWUsIGZvcm1hdCB8fCAobWFqb3IgPyBtYWpvckZvcm1hdCA6IG1pbm9yRm9ybWF0KSk7XG4gICAgY29uc3QgZm9ybWF0dGVyID0gb3B0aW9ucy50aWNrcy5jYWxsYmFjaztcbiAgICByZXR1cm4gZm9ybWF0dGVyID8gY2FsbGJhY2soZm9ybWF0dGVyLCBbbGFiZWwsIGluZGV4LCB0aWNrc10sIHRoaXMpIDogbGFiZWw7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgdGljay5sYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbih0aWNrLnZhbHVlLCBpLCB0aWNrcyk7XG4gICAgfVxuICB9XG4gIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6ICh2YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgY29uc3QgcG9zID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgcmV0dXJuIHRoaXMubWluICsgcG9zICogKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICB9XG4gIF9nZXRMYWJlbFNpemUobGFiZWwpIHtcbiAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgdGlja0xhYmVsV2lkdGggPSB0aGlzLmN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG4gICAgY29uc3QgYW5nbGUgPSB0b1JhZGlhbnModGhpcy5pc0hvcml6b250YWwoKSA/IHRpY2tzT3B0cy5tYXhSb3RhdGlvbiA6IHRpY2tzT3B0cy5taW5Sb3RhdGlvbik7XG4gICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgY29uc3Qgc2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgY29uc3QgdGlja0ZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5zaXplO1xuICAgIHJldHVybiB7XG4gICAgICB3OiAodGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogc2luUm90YXRpb24pLFxuICAgICAgaDogKHRpY2tMYWJlbFdpZHRoICogc2luUm90YXRpb24pICsgKHRpY2tGb250U2l6ZSAqIGNvc1JvdGF0aW9uKVxuICAgIH07XG4gIH1cbiAgX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgIGNvbnN0IGRpc3BsYXlGb3JtYXRzID0gdGltZU9wdHMuZGlzcGxheUZvcm1hdHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgY29uc3QgZXhhbXBsZUxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKGV4YW1wbGVUaW1lLCAwLCB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIFtleGFtcGxlVGltZV0sIHRoaXMuX21ham9yVW5pdCksIGZvcm1hdCk7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuX2dldExhYmVsU2l6ZShleGFtcGxlTGFiZWwpO1xuICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgcmV0dXJuIGNhcGFjaXR5ID4gMCA/IGNhcGFjaXR5IDogMTtcbiAgfVxuICBnZXREYXRhVGltZXN0YW1wcygpIHtcbiAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgaWYgKHRoaXMuX25vcm1hbGl6ZWQgJiYgbWV0YXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmRhdGEgPSBtZXRhc1swXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5fY2FjaGUuZGF0YSA9IHRoaXMubm9ybWFsaXplKHRpbWVzdGFtcHMpKTtcbiAgfVxuICBnZXRMYWJlbFRpbWVzdGFtcHMoKSB7XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmxhYmVscyB8fCBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aW1lc3RhbXBzLnB1c2gocGFyc2UodGhpcywgbGFiZWxzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKSk7XG4gIH1cbiAgbm9ybWFsaXplKHZhbHVlcykge1xuICAgIHJldHVybiBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoc29ydGVyKSk7XG4gIH1cbn1cblRpbWVTY2FsZS5pZCA9ICd0aW1lJztcblRpbWVTY2FsZS5kZWZhdWx0cyA9IHtcbiAgYm91bmRzOiAnZGF0YScsXG4gIGFkYXB0ZXJzOiB7fSxcbiAgdGltZToge1xuICAgIHBhcnNlcjogZmFsc2UsXG4gICAgdW5pdDogZmFsc2UsXG4gICAgcm91bmQ6IGZhbHNlLFxuICAgIGlzb1dlZWtkYXk6IGZhbHNlLFxuICAgIG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG4gICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gIH0sXG4gIHRpY2tzOiB7XG4gICAgc291cmNlOiAnYXV0bycsXG4gICAgbWFqb3I6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSh0YWJsZSwgdmFsLCByZXZlcnNlKSB7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBwcmV2U291cmNlLCBuZXh0U291cmNlLCBwcmV2VGFyZ2V0LCBuZXh0VGFyZ2V0O1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGlmICh2YWwgPj0gdGFibGVbbG9dLnBvcyAmJiB2YWwgPD0gdGFibGVbaGldLnBvcykge1xuICAgICAgKHtsbywgaGl9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAncG9zJywgdmFsKSk7XG4gICAgfVxuICAgICh7cG9zOiBwcmV2U291cmNlLCB0aW1lOiBwcmV2VGFyZ2V0fSA9IHRhYmxlW2xvXSk7XG4gICAgKHtwb3M6IG5leHRTb3VyY2UsIHRpbWU6IG5leHRUYXJnZXR9ID0gdGFibGVbaGldKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsID49IHRhYmxlW2xvXS50aW1lICYmIHZhbCA8PSB0YWJsZVtoaV0udGltZSkge1xuICAgICAgKHtsbywgaGl9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAndGltZScsIHZhbCkpO1xuICAgIH1cbiAgICAoe3RpbWU6IHByZXZTb3VyY2UsIHBvczogcHJldlRhcmdldH0gPSB0YWJsZVtsb10pO1xuICAgICh7dGltZTogbmV4dFNvdXJjZSwgcG9zOiBuZXh0VGFyZ2V0fSA9IHRhYmxlW2hpXSk7XG4gIH1cbiAgY29uc3Qgc3BhbiA9IG5leHRTb3VyY2UgLSBwcmV2U291cmNlO1xuICByZXR1cm4gc3BhbiA/IHByZXZUYXJnZXQgKyAobmV4dFRhcmdldCAtIHByZXZUYXJnZXQpICogKHZhbCAtIHByZXZTb3VyY2UpIC8gc3BhbiA6IHByZXZUYXJnZXQ7XG59XG5jbGFzcyBUaW1lU2VyaWVzU2NhbGUgZXh0ZW5kcyBUaW1lU2NhbGUge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLl90YWJsZSA9IFtdO1xuICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90YWJsZVJhbmdlID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXRPZmZzZXRzKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKTtcbiAgICBjb25zdCB0YWJsZSA9IHRoaXMuX3RhYmxlID0gdGhpcy5idWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMpO1xuICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgdGhpcy5fdGFibGVSYW5nZSA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1heCkgLSB0aGlzLl9taW5Qb3M7XG4gICAgc3VwZXIuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gIH1cbiAgYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXM7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB0YWJsZSA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY3VyciA9IHRpbWVzdGFtcHNbaV07XG4gICAgICBpZiAoY3VyciA+PSBtaW4gJiYgY3VyciA8PSBtYXgpIHtcbiAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHt0aW1lOiBtaW4sIHBvczogMH0sXG4gICAgICAgIHt0aW1lOiBtYXgsIHBvczogMX1cbiAgICAgIF07XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIG5leHQgPSBpdGVtc1tpICsgMV07XG4gICAgICBwcmV2ID0gaXRlbXNbaSAtIDFdO1xuICAgICAgY3VyciA9IGl0ZW1zW2ldO1xuICAgICAgaWYgKE1hdGgucm91bmQoKG5leHQgKyBwcmV2KSAvIDIpICE9PSBjdXJyKSB7XG4gICAgICAgIHRhYmxlLnB1c2goe3RpbWU6IGN1cnIsIHBvczogaSAvIChpbGVuIC0gMSl9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9XG4gIF9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKSB7XG4gICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgfHwgW107XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgaWYgKGRhdGEubGVuZ3RoICYmIGxhYmVsLmxlbmd0aCkge1xuICAgICAgdGltZXN0YW1wcyA9IHRoaXMubm9ybWFsaXplKGRhdGEuY29uY2F0KGxhYmVsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVzdGFtcHMgPSBkYXRhLmxlbmd0aCA/IGRhdGEgOiBsYWJlbDtcbiAgICB9XG4gICAgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCA9IHRpbWVzdGFtcHM7XG4gICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgdmFsdWUpIC0gdGhpcy5fbWluUG9zKSAvIHRoaXMuX3RhYmxlUmFuZ2U7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgZGVjaW1hbCAqIHRoaXMuX3RhYmxlUmFuZ2UgKyB0aGlzLl9taW5Qb3MsIHRydWUpO1xuICB9XG59XG5UaW1lU2VyaWVzU2NhbGUuaWQgPSAndGltZXNlcmllcyc7XG5UaW1lU2VyaWVzU2NhbGUuZGVmYXVsdHMgPSBUaW1lU2NhbGUuZGVmYXVsdHM7XG5cbnZhciBzY2FsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5DYXRlZ29yeVNjYWxlOiBDYXRlZ29yeVNjYWxlLFxuTGluZWFyU2NhbGU6IExpbmVhclNjYWxlLFxuTG9nYXJpdGhtaWNTY2FsZTogTG9nYXJpdGhtaWNTY2FsZSxcblJhZGlhbExpbmVhclNjYWxlOiBSYWRpYWxMaW5lYXJTY2FsZSxcblRpbWVTY2FsZTogVGltZVNjYWxlLFxuVGltZVNlcmllc1NjYWxlOiBUaW1lU2VyaWVzU2NhbGVcbn0pO1xuXG5jb25zdCByZWdpc3RlcmFibGVzID0gW1xuICBjb250cm9sbGVycyxcbiAgZWxlbWVudHMsXG4gIHBsdWdpbnMsXG4gIHNjYWxlcyxcbl07XG5cbmV4cG9ydCB7IEFuaW1hdGlvbiwgQW5pbWF0aW9ucywgQXJjRWxlbWVudCwgQmFyQ29udHJvbGxlciwgQmFyRWxlbWVudCwgQmFzZVBsYXRmb3JtLCBCYXNpY1BsYXRmb3JtLCBCdWJibGVDb250cm9sbGVyLCBDYXRlZ29yeVNjYWxlLCBDaGFydCwgRGF0YXNldENvbnRyb2xsZXIsIHBsdWdpbl9kZWNpbWF0aW9uIGFzIERlY2ltYXRpb24sIERvbVBsYXRmb3JtLCBEb3VnaG51dENvbnRyb2xsZXIsIEVsZW1lbnQsIGluZGV4IGFzIEZpbGxlciwgSW50ZXJhY3Rpb24sIHBsdWdpbl9sZWdlbmQgYXMgTGVnZW5kLCBMaW5lQ29udHJvbGxlciwgTGluZUVsZW1lbnQsIExpbmVhclNjYWxlLCBMb2dhcml0aG1pY1NjYWxlLCBQaWVDb250cm9sbGVyLCBQb2ludEVsZW1lbnQsIFBvbGFyQXJlYUNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgUmFkaWFsTGluZWFyU2NhbGUsIFNjYWxlLCBTY2F0dGVyQ29udHJvbGxlciwgcGx1Z2luX3N1YnRpdGxlIGFzIFN1YlRpdGxlLCBUaWNrcywgVGltZVNjYWxlLCBUaW1lU2VyaWVzU2NhbGUsIHBsdWdpbl90aXRsZSBhcyBUaXRsZSwgcGx1Z2luX3Rvb2x0aXAgYXMgVG9vbHRpcCwgYWRhcHRlcnMgYXMgX2FkYXB0ZXJzLCBfZGV0ZWN0UGxhdGZvcm0sIGFuaW1hdG9yLCBjb250cm9sbGVycywgZWxlbWVudHMsIGxheW91dHMsIHBsdWdpbnMsIHJlZ2lzdGVyYWJsZXMsIHJlZ2lzdHJ5LCBzY2FsZXMgfTtcbiJdLCJuYW1lcyI6WyJub29wIiwidWlkIiwiaWQiLCJpc051bGxPclVuZGVmIiwidmFsdWUiLCJpc0FycmF5IiwiQXJyYXkiLCJ0eXBlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvRGltZW5zaW9uIiwiZGltZW5zaW9uIiwiZW5kc1dpdGgiLCJwYXJzZUZsb2F0IiwiY2FsbGJhY2siLCJmbiIsImFyZ3MiLCJ0aGlzQXJnIiwiYXBwbHkiLCJlYWNoIiwibG9vcGFibGUiLCJyZXZlcnNlIiwiaSIsImxlbiIsImtleXMiLCJsZW5ndGgiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImRhdGFzZXRJbmRleCIsImluZGV4IiwiY2xvbmUkMSIsInNvdXJjZSIsIm1hcCIsInRhcmdldCIsImNyZWF0ZSIsImtsZW4iLCJrIiwiaXNWYWxpZEtleSIsImtleSIsImluZGV4T2YiLCJfbWVyZ2VyIiwib3B0aW9ucyIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJzb3VyY2VzIiwibWVyZ2VyIiwibWVyZ2VJZiIsIl9tZXJnZXJJZiIsImhhc093blByb3BlcnR5Iiwia2V5UmVzb2x2ZXJzIiwidiIsIngiLCJvIiwieSIsInJlc29sdmVPYmplY3RLZXkiLCJvYmoiLCJyZXNvbHZlciIsInBhcnRzIiwic3BsaXQiLCJ0bXAiLCJwYXJ0IiwicHVzaCIsIl9zcGxpdEtleSIsIl9nZXRLZXlSZXNvbHZlciIsIl9jYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsImEiLCJiIiwic2l6ZSIsIml0ZW0iLCJoYXMiLCJQSSIsIk1hdGgiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsIm5pY2VOdW0iLCJyYW5nZSIsInJvdW5kZWRSYW5nZSIsInJvdW5kIiwiYWxtb3N0RXF1YWxzIiwibmljZVJhbmdlIiwicG93IiwiZmxvb3IiLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwibiIsImlzTmFOIiwiZXBzaWxvbiIsImFicyIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJtaW4iLCJtYXgiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZSIsInAiLCJnZXRBbmdsZUZyb21Qb2ludCIsImNlbnRyZVBvaW50IiwiYW5nbGVQb2ludCIsImRpc3RhbmNlRnJvbVhDZW50ZXIiLCJkaXN0YW5jZUZyb21ZQ2VudGVyIiwicmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyIiwic3FydCIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZSIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsInB0MSIsInB0MiIsIl9hbmdsZURpZmYiLCJfbm9ybWFsaXplQW5nbGUiLCJfYW5nbGVCZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCJzIiwiYW5nbGVUb1N0YXJ0IiwiYW5nbGVUb0VuZCIsInN0YXJ0VG9BbmdsZSIsImVuZFRvQW5nbGUiLCJfbGltaXRWYWx1ZSIsIl9pc0JldHdlZW4iLCJfbG9va3VwIiwidGFibGUiLCJjbXAiLCJtaWQiLCJoaSIsImxvIiwiX2xvb2t1cEJ5S2V5IiwibGFzdCIsIl9ybG9va3VwQnlLZXkiLCJhcnJheUV2ZW50cyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsInN0dWIiLCJfY2hhcnRqcyIsImxpc3RlbmVycyIsInNwbGljZSIsImZvckVhY2giLCJfYXJyYXlVbmlxdWUiLCJpdGVtcyIsInNldCIsIlNldCIsImFkZCIsImZyb20iLCJyZXF1ZXN0QW5pbUZyYW1lIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGhyb3R0bGVkIiwidXBkYXRlRm4iLCJ1cGRhdGVBcmdzIiwidGlja2luZyIsInJlc3QiLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwiX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJtZXRhIiwicG9pbnRzIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsImNvdW50IiwiX3NvcnRlZCIsImlTY2FsZSIsIl9wYXJzZWQiLCJheGlzIiwibWluRGVmaW5lZCIsIm1heERlZmluZWQiLCJnZXRVc2VyQm91bmRzIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsIl9zY2FsZVJhbmdlc0NoYW5nZWQiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiY2hhbmdlZCIsImFzc2lnbiIsImF0RWRnZSIsInQiLCJlbGFzdGljSW4iLCJzaW4iLCJlbGFzdGljT3V0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJtIiwiZCIsImVhc2VJbk91dEJvdW5jZSIsImxpbSIsImwiLCJoIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJjIiwiZiIsImhleCIsImgxIiwiaDIiLCJlcSIsIkhVRV9SRSIsImhzbDJyZ2JuIiwiaHN2MnJnYm4iLCJod2IycmdibiIsInciLCJyZ2IiLCJyZ2IyaHNsIiwiciIsImciLCJodWVWYWx1ZSIsImNhbGxuIiwiaHNsMnJnYiIsImh1ZSIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMkMSIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzIiwiUkdCX1JFIiwidG8iLCJtb2RIU0wiLCJyYXRpbyIsImNsb25lIiwicHJvdG8iLCJmcm9tT2JqZWN0IiwiaW5wdXQiLCJmdW5jdGlvblBhcnNlIiwiZXhlYyIsInJnYlBhcnNlIiwicDEiLCJwMiIsImh3YjJyZ2IiLCJoc3YycmdiIiwiaHVlUGFyc2UiLCJDb2xvciIsImNvbnN0cnVjdG9yIiwicmV0IiwidW5wYWNrZWQiLCJ0a2V5cyIsImoiLCJvayIsIm5rIiwicmVwbGFjZSIsInBhcnNlSW50IiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm5hbWVQYXJzZSIsInRoaXMiLCJfcmdiIiwiX3ZhbGlkIiwidmFsaWQiLCJyZ2JTdHJpbmciLCJ1bmRlZmluZWQiLCJoZXhTdHJpbmciLCJpc1Nob3J0IiwiYWxwaGEiLCJoc2xTdHJpbmciLCJtaXgiLCJjb2xvciIsIndlaWdodCIsImMxIiwiYzIiLCJ3MiIsIncxIiwiaW50ZXJwb2xhdGUiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsImluZGV4X2VzbSIsImlzUGF0dGVybk9yR3JhZGllbnQiLCJnZXRIb3ZlckNvbG9yIiwib3ZlcnJpZGVzIiwiZGVzY3JpcHRvcnMiLCJnZXRTY29wZSQxIiwibm9kZSIsInJvb3QiLCJzY29wZSIsInZhbHVlcyIsImRlZmF1bHRzIiwiX2Rlc2NyaXB0b3JzIiwiYW5pbWF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJkYXRhc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJjb250ZXh0IiwiY2hhcnQiLCJwbGF0Zm9ybSIsImdldERldmljZVBpeGVsUmF0aW8iLCJlbGVtZW50cyIsImV2ZW50cyIsImZvbnQiLCJmYW1pbHkiLCJzdHlsZSIsImxpbmVIZWlnaHQiLCJob3ZlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiY3R4IiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQ29sb3IiLCJpbmRleEF4aXMiLCJpbnRlcmFjdGlvbiIsIm1vZGUiLCJpbnRlcnNlY3QiLCJpbmNsdWRlSW52aXNpYmxlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsIm9uSG92ZXIiLCJvbkNsaWNrIiwicGFyc2luZyIsInBsdWdpbnMiLCJyZXNwb25zaXZlIiwic2NhbGUiLCJzY2FsZXMiLCJzaG93TGluZSIsImRyYXdBY3RpdmVFbGVtZW50c09uVG9wIiwiZGVzY3JpYmUiLCJnZXQiLCJvdmVycmlkZSIsInJvdXRlIiwibmFtZSIsInRhcmdldFNjb3BlIiwidGFyZ2V0TmFtZSIsInNjb3BlT2JqZWN0IiwidGFyZ2V0U2NvcGVPYmplY3QiLCJwcml2YXRlTmFtZSIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJsb2NhbCIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJfbWVhc3VyZVRleHQiLCJkYXRhIiwiZ2MiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJ3aWR0aCIsIl9sb25nZXN0VGV4dCIsImFycmF5T2ZUaGluZ3MiLCJjYWNoZSIsImdhcmJhZ2VDb2xsZWN0Iiwic2F2ZSIsImpsZW4iLCJ0aGluZyIsIm5lc3RlZFRoaW5nIiwicmVzdG9yZSIsImdjTGVuIiwiX2FsaWduUGl4ZWwiLCJwaXhlbCIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiaGFsZldpZHRoIiwiY2xlYXJDYW52YXMiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwicmVzZXRUcmFuc2Zvcm0iLCJjbGVhclJlY3QiLCJoZWlnaHQiLCJkcmF3UG9pbnQiLCJkcmF3UG9pbnRMZWdlbmQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImNvcm5lclJhZGl1cyIsInBvaW50U3R5bGUiLCJyb3RhdGlvbiIsInJhZGl1cyIsInJhZCIsInRyYW5zbGF0ZSIsImRyYXdJbWFnZSIsImJlZ2luUGF0aCIsImVsbGlwc2UiLCJhcmMiLCJjbG9zZVBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJTUVJUMV8yIiwicmVjdCIsImZpbGwiLCJib3JkZXJXaWR0aCIsInN0cm9rZSIsIl9pc1BvaW50SW5BcmVhIiwicG9pbnQiLCJhcmVhIiwibWFyZ2luIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiY2xpcEFyZWEiLCJjbGlwIiwidW5jbGlwQXJlYSIsIl9zdGVwcGVkTGluZVRvIiwicHJldmlvdXMiLCJmbGlwIiwibWlkcG9pbnQiLCJfYmV6aWVyQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJjcDF4IiwiY3AyeCIsImNwMXkiLCJjcDJ5IiwicmVuZGVyVGV4dCIsInRleHQiLCJvcHRzIiwibGluZXMiLCJzdHJva2VXaWR0aCIsInN0cm9rZUNvbG9yIiwibGluZSIsInRyYW5zbGF0aW9uIiwiZmlsbFN0eWxlIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwic2V0UmVuZGVyT3B0cyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlVGV4dCIsIm1heFdpZHRoIiwiZmlsbFRleHQiLCJkZWNvcmF0ZVRleHQiLCJzdHJpa2V0aHJvdWdoIiwidW5kZXJsaW5lIiwibWV0cmljcyIsImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsImFjdHVhbEJvdW5kaW5nQm94UmlnaHQiLCJhY3R1YWxCb3VuZGluZ0JveEFzY2VudCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsInlEZWNvcmF0aW9uIiwiZGVjb3JhdGlvbldpZHRoIiwiYWRkUm91bmRlZFJlY3RQYXRoIiwidG9wTGVmdCIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsInRvcFJpZ2h0IiwiTElORV9IRUlHSFQiLCJSZWdFeHAiLCJGT05UX1NUWUxFIiwidG9MaW5lSGVpZ2h0IiwibWF0Y2hlcyIsIm1hdGNoIiwiX3JlYWRWYWx1ZVRvUHJvcHMiLCJwcm9wcyIsIm9ialByb3BzIiwicmVhZCIsInByb3AiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJjb25zb2xlIiwid2FybiIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsImluY2x1ZGVzIiwib3duS2V5cyIsInN0b3JhZ2UiLCJfc3RvcmFnZSIsIl9hdHRhY2hDb250ZXh0Iiwic3ViUHJveHkiLCJkZXNjcmlwdG9yRGVmYXVsdHMiLCJfcHJveHkiLCJfY29udGV4dCIsIl9zdWJQcm94eSIsIl9zdGFjayIsInNldENvbnRleHQiLCJyZWNlaXZlciIsImlzU2NyaXB0YWJsZSIsIkVycm9yIiwiam9pbiIsImRlbGV0ZSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiYXJyIiwiZmlsdGVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJfcGFyc2luZyIsInBhcnNlZCIsInBhcnNlIiwiRVBTSUxPTiIsImdldFBvaW50Iiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsImN1cnJlbnQiLCJuZXh0IiwiZDAxIiwiZDEyIiwiczAxIiwiczEyIiwiZmEiLCJmYiIsImNhcENvbnRyb2xQb2ludCIsInB0IiwiX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJsb29wIiwiY29udHJvbFBvaW50cyIsInNwYW5HYXBzIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInZhbHVlQXhpcyIsInBvaW50c0xlbiIsImRlbHRhSyIsIm1LIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwic2xvcGVEZWx0YSIsImFscGhhSyIsImJldGFLIiwidGF1SyIsInNxdWFyZWRNYWduaXR1ZGUiLCJtb25vdG9uZUFkanVzdCIsImRlbHRhIiwiaVBpeGVsIiwidlBpeGVsIiwibW9ub3RvbmVDb21wdXRlIiwic3BsaW5lQ3VydmVNb25vdG9uZSIsInByZXYiLCJ0ZW5zaW9uIiwiY2FwQmV6aWVyUG9pbnRzIiwiaW5BcmVhIiwiaW5BcmVhUHJldiIsImluQXJlYU5leHQiLCJfaXNEb21TdXBwb3J0ZWQiLCJkb2N1bWVudCIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsInBhcmVudE5vZGUiLCJob3N0IiwicGFyc2VNYXhTdHlsZSIsInN0eWxlVmFsdWUiLCJwYXJlbnRQcm9wZXJ0eSIsInZhbHVlSW5QaXhlbHMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZWxlbWVudCIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uZWRTdHlsZSIsInN0eWxlcyIsInN1ZmZpeCIsInJlc3VsdCIsInBvcyIsImdldFJlbGF0aXZlUG9zaXRpb24iLCJldnQiLCJib3JkZXJCb3giLCJib3hTaXppbmciLCJwYWRkaW5ncyIsImJvcmRlcnMiLCJib3giLCJ0b3VjaGVzIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzaGFkb3dSb290IiwidXNlT2Zmc2V0UG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWRVc2VkU2l6ZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFN0eWxlIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJpbnRsQ2FjaGUiLCJNYXAiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJsb2NhbGUiLCJjYWNoZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZXIiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiZ2V0UnRsQWRhcHRlciIsInJ0bCIsInJlY3RYIiwic2V0V2lkdGgiLCJ4UGx1cyIsImxlZnRGb3JMdHIiLCJpdGVtV2lkdGgiLCJnZXRSaWdodFRvTGVmdEFkYXB0ZXIiLCJfaXRlbVdpZHRoIiwib3ZlcnJpZGVUZXh0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwib3JpZ2luYWwiLCJnZXRQcm9wZXJ0eVByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJwcmV2VGV4dERpcmVjdGlvbiIsInJlc3RvcmVUZXh0RGlyZWN0aW9uIiwicHJvcGVydHlGbiIsImJldHdlZW4iLCJjb21wYXJlIiwibm9ybWFsaXplIiwibm9ybWFsaXplU2VnbWVudCIsIl9ib3VuZFNlZ21lbnQiLCJzZWdtZW50IiwiYm91bmRzIiwic3RhcnRCb3VuZCIsImVuZEJvdW5kIiwiZ2V0U2VnbWVudCIsInByZXZWYWx1ZSIsImluc2lkZSIsInN1YlN0YXJ0IiwiX2JvdW5kU2VnbWVudHMiLCJzZWdtZW50cyIsInN1YiIsInJlYWRTdHlsZSIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJzdHlsZUNoYW5nZWQiLCJwcmV2U3R5bGUiLCJhbmltYXRvciIsIl9yZXF1ZXN0IiwiX2NoYXJ0cyIsIl9ydW5uaW5nIiwiX2xhc3REYXRlIiwiX25vdGlmeSIsImFuaW1zIiwiZGF0ZSIsImNhbGxiYWNrcyIsIm51bVN0ZXBzIiwiZHVyYXRpb24iLCJpbml0aWFsIiwiY3VycmVudFN0ZXAiLCJfcmVmcmVzaCIsIl91cGRhdGUiLCJEYXRlIiwibm93IiwicmVtYWluaW5nIiwicnVubmluZyIsImRyYXciLCJfYWN0aXZlIiwiX3RvdGFsIiwidGljayIsInBvcCIsIl9nZXRBbmltcyIsImNoYXJ0cyIsImNvbXBsZXRlIiwicHJvZ3Jlc3MiLCJsaXN0ZW4iLCJldmVudCIsImNiIiwicmVkdWNlIiwiYWNjIiwiY3VyIiwiX2R1cmF0aW9uIiwic3RvcCIsImNhbmNlbCIsInJlbW92ZSIsImludGVycG9sYXRvcnMiLCJib29sZWFuIiwiZmFjdG9yIiwiYzAiLCJudW1iZXIiLCJBbmltYXRpb24iLCJjZmciLCJjdXJyZW50VmFsdWUiLCJfZm4iLCJfZWFzaW5nIiwiZWFzaW5nIiwiX3N0YXJ0IiwiZGVsYXkiLCJfbG9vcCIsIl90YXJnZXQiLCJfcHJvcCIsIl9mcm9tIiwiX3RvIiwiX3Byb21pc2VzIiwiYWN0aXZlIiwidXBkYXRlIiwiZWxhcHNlZCIsInJlbWFpbiIsIndhaXQiLCJwcm9taXNlcyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXNvbHZlZCIsIm1ldGhvZCIsImFuaW1hdGlvbk9wdGlvbnMiLCJjb2xvcnMiLCJwcm9wZXJ0aWVzIiwibnVtYmVycyIsInJlc2l6ZSIsInNob3ciLCJhbmltYXRpb25zIiwidmlzaWJsZSIsImhpZGUiLCJBbmltYXRpb25zIiwiY29uZmlnIiwiX2NoYXJ0IiwiX3Byb3BlcnRpZXMiLCJjb25maWd1cmUiLCJhbmltYXRlZFByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9wdGlvbiIsIl9hbmltYXRlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCIkc2hhcmVkIiwiJGFuaW1hdGlvbnMiLCJyZXNvbHZlVGFyZ2V0T3B0aW9ucyIsIl9jcmVhdGVBbmltYXRpb25zIiwiYW5pbSIsImFsbCIsImF3YWl0QWxsIiwidGhlbiIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJzdGFjayIsImRzSW5kZXgiLCJzaW5nbGVNb2RlIiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsInN0YWNrZWQiLCJnZXRPckNyZWF0ZVN0YWNrIiwic3RhY2tzIiwic3RhY2tLZXkiLCJpbmRleFZhbHVlIiwic3ViU3RhY2siLCJnZXRMYXN0SW5kZXhJblN0YWNrIiwidlNjYWxlIiwicG9zaXRpdmUiLCJnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyIsInVwZGF0ZVN0YWNrcyIsImNvbnRyb2xsZXIiLCJfY2FjaGVkTWV0YSIsIl9zdGFja3MiLCJpQXhpcyIsInZBeGlzIiwiaW5kZXhTY2FsZSIsInZhbHVlU2NhbGUiLCJnZXRTdGFja0tleSIsIl90b3AiLCJfYm90dG9tIiwiZ2V0Rmlyc3RTY2FsZUlkIiwic2hpZnQiLCJjbGVhclN0YWNrcyIsImlzRGlyZWN0VXBkYXRlTW9kZSIsImNsb25lSWZOb3RTaGFyZWQiLCJjYWNoZWQiLCJzaGFyZWQiLCJEYXRhc2V0Q29udHJvbGxlciIsIl9jdHgiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfZGF0YSIsIl9vYmplY3REYXRhIiwiX3NoYXJlZE9wdGlvbnMiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCJzdXBwb3J0c0RlY2ltYXRpb24iLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsInVwZGF0ZUluZGV4IiwiZGF0YXNldCIsImdldERhdGFzZXQiLCJjaG9vc2VJZCIsInhpZCIsInhBeGlzSUQiLCJ5aWQiLCJ5QXhpc0lEIiwicmlkIiwickF4aXNJRCIsImlpZCIsImlBeGlzSUQiLCJ2aWQiLCJ2QXhpc0lEIiwiZ2V0U2NhbGVGb3JJZCIsInJTY2FsZSIsImdldERhdGFzZXRNZXRhIiwic2NhbGVJRCIsIl9nZXRPdGhlclNjYWxlIiwicmVzZXQiLCJfZGVzdHJveSIsIl9kYXRhQ2hlY2siLCJhZGF0YSIsImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVByb3BlcnR5IiwiYmFzZSIsIm9iamVjdCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInJlc2V0TmV3RWxlbWVudHMiLCJzdGFja0NoYW5nZWQiLCJvbGRTdGFja2VkIiwiX3Jlc3luY0VsZW1lbnRzIiwic2NvcGVLZXlzIiwiZGF0YXNldFNjb3BlS2V5cyIsImdldE9wdGlvblNjb3BlcyIsImNyZWF0ZVJlc29sdmVyIiwic29ydGVkIiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiIsImxhYmVscyIsImdldExhYmVscyIsInNpbmdsZVNjYWxlIiwieEF4aXNLZXkiLCJ5QXhpc0tleSIsImdldFBhcnNlZCIsImdldERhdGFFbGVtZW50IiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwicGFyc2VkVmFsdWUiLCJOYU4iLCJnZXRNaW5NYXgiLCJjYW5TdGFjayIsIm90aGVyU2NhbGUiLCJoaWRkZW4iLCJjcmVhdGVTdGFjayIsIk5FR0FUSVZFX0lORklOSVRZIiwib3RoZXJNaW4iLCJvdGhlck1heCIsIl9za2lwIiwiZ2V0QWxsUGFyc2VkVmFsdWVzIiwiZ2V0TWF4T3ZlcmZsb3ciLCJnZXRMYWJlbEFuZFZhbHVlIiwibGFiZWwiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJkaXNhYmxlZCIsInRvQ2xpcCIsImRlZmF1bHRDbGlwIiwiY2hhcnRBcmVhIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJyYXciLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImRhdGFFbGVtZW50VHlwZSIsImVsZW1lbnRUeXBlIiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwicmVzb2x2ZU5hbWVkT3B0aW9ucyIsImZyZWV6ZSIsIl9yZXNvbHZlQW5pbWF0aW9ucyIsInRyYW5zaXRpb24iLCJkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzIiwiZ2V0U2hhcmVkT3B0aW9ucyIsImluY2x1ZGVPcHRpb25zIiwic2hhcmVkT3B0aW9ucyIsIl9hbmltYXRpb25zRGlzYWJsZWQiLCJfZ2V0U2hhcmVkT3B0aW9ucyIsImZpcnN0T3B0cyIsInByZXZpb3VzbHlTaGFyZWRPcHRpb25zIiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsInVwZGF0ZUVsZW1lbnQiLCJfc2V0U3R5bGUiLCJyZW1vdmVIb3ZlclN0eWxlIiwic2V0SG92ZXJTdHlsZSIsIl9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSIsIl9zZXREYXRhc2V0SG92ZXJTdHlsZSIsImFyZzEiLCJhcmcyIiwibnVtTWV0YSIsIm51bURhdGEiLCJfaW5zZXJ0RWxlbWVudHMiLCJfcmVtb3ZlRWxlbWVudHMiLCJtb3ZlIiwidXBkYXRlRWxlbWVudHMiLCJyZW1vdmVkIiwiX3N5bmMiLCJfZGF0YUNoYW5nZXMiLCJfb25EYXRhUHVzaCIsImFyZ3VtZW50cyIsIl9vbkRhdGFQb3AiLCJfb25EYXRhU2hpZnQiLCJfb25EYXRhU3BsaWNlIiwibmV3Q291bnQiLCJfb25EYXRhVW5zaGlmdCIsImNvbXB1dGVNaW5TYW1wbGVTaXplIiwiX2NhY2hlIiwiJGJhciIsInZpc2libGVNZXRhcyIsImNvbmNhdCIsInNvcnQiLCJnZXRBbGxTY2FsZVZhbHVlcyIsImN1cnIiLCJfbGVuZ3RoIiwidXBkYXRlTWluQW5kUHJldiIsInRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwicGFyc2VWYWx1ZSIsImVudHJ5Iiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiYmFyU3RhcnQiLCJiYXJFbmQiLCJfY3VzdG9tIiwicGFyc2VGbG9hdEJhciIsInBhcnNlQXJyYXlPclByaW1pdGl2ZSIsImlzRmxvYXRCYXIiLCJjdXN0b20iLCJzZXRCb3JkZXJTa2lwcGVkIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwiYm9yZGVyUHJvcHMiLCJlbmFibGVCb3JkZXJSYWRpdXMiLCJwYXJzZUVkZ2UiLCJvcmlnIiwidjIiLCJzdGFydEVuZCIsInNldEluZmxhdGVBbW91bnQiLCJpbmZsYXRlQW1vdW50IiwiQmFyQ29udHJvbGxlciIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJzdXBlciIsImJhcnMiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJydWxlciIsIl9nZXRSdWxlciIsInZwaXhlbHMiLCJoZWFkIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJncm91cGVkIiwic2tpcE51bGwiLCJfZ2V0U3RhY2tDb3VudCIsIl9nZXRTdGFja0luZGV4IiwicGl4ZWxzIiwiYmFyVGhpY2tuZXNzIiwiX3N0YXJ0UGl4ZWwiLCJfZW5kUGl4ZWwiLCJzdGFja0NvdW50IiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImJhc2VWYWx1ZSIsIm1pbkJhckxlbmd0aCIsImFjdHVhbEJhc2UiLCJmbG9hdGluZyIsImdldERhdGFWaXNpYmlsaXR5IiwiYmFyU2lnbiIsInN0YXJ0UGl4ZWwiLCJnZXRQaXhlbEZvckRlY2ltYWwiLCJlbmRQaXhlbCIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJtYXhCYXJUaGlja25lc3MiLCJJbmZpbml0eSIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJfaW5kZXhfIiwib2Zmc2V0IiwiZ3JpZCIsIl92YWx1ZV8iLCJiZWdpbkF0WmVybyIsIkJ1YmJsZUNvbnRyb2xsZXIiLCJ0b29sdGlwIiwidGl0bGUiLCJEb3VnaG51dENvbnRyb2xsZXIiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiZ2V0dGVyIiwiX2dldFJvdGF0aW9uIiwiX2dldENpcmN1bWZlcmVuY2UiLCJjaXJjdW1mZXJlbmNlIiwiX2dldFJvdGF0aW9uRXh0ZW50cyIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwic3BhY2luZyIsImdldE1heEJvcmRlcldpZHRoIiwiZ2V0TWF4T2Zmc2V0IiwibWF4U2l6ZSIsImN1dG91dCIsImNoYXJ0V2VpZ2h0IiwiX2dldFJpbmdXZWlnaHQiLCJyYXRpb1giLCJyYXRpb1kiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJzdGFydFgiLCJzdGFydFkiLCJlbmRYIiwiZW5kWSIsImNhbGNNYXgiLCJjYWxjTWluIiwibWF4WCIsIm1heFkiLCJtaW5YIiwibWluWSIsImdldFJhdGlvQW5kT2Zmc2V0IiwibWF4SGVpZ2h0IiwibWF4UmFkaXVzIiwicmFkaXVzTGVuZ3RoIiwiX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwiLCJ0b3RhbCIsImNhbGN1bGF0ZVRvdGFsIiwiX2dldFJpbmdXZWlnaHRPZmZzZXQiLCJfY2lyY3VtZmVyZW5jZSIsImFuaW1hdGVSb3RhdGUiLCJjYWxjdWxhdGVDaXJjdW1mZXJlbmNlIiwiYW5pbWF0aW9uT3B0cyIsImNlbnRlclgiLCJjZW50ZXJZIiwiYW5pbWF0ZVNjYWxlIiwibWV0YURhdGEiLCJib3JkZXJBbGlnbiIsImhvdmVyQm9yZGVyV2lkdGgiLCJob3Zlck9mZnNldCIsInJpbmdXZWlnaHRPZmZzZXQiLCJhc3BlY3RSYXRpbyIsImxlZ2VuZCIsImdlbmVyYXRlTGFiZWxzIiwibGVnZW5kSXRlbSIsInRvZ2dsZURhdGFWaXNpYmlsaXR5IiwidG9vbHRpcEl0ZW0iLCJkYXRhTGFiZWwiLCJmb3JtYXR0ZWRWYWx1ZSIsIkxpbmVDb250cm9sbGVyIiwiX2RhdGFzZXQiLCJfZGF0YXNldEluZGV4IiwiX2RlY2ltYXRlZCIsImFuaW1hdGVkIiwibWF4R2FwTGVuZ3RoIiwiZGlyZWN0VXBkYXRlIiwicHJldlBhcnNlZCIsIm51bGxEYXRhIiwiYm9yZGVyIiwibGFzdFBvaW50IiwidXBkYXRlQ29udHJvbFBvaW50cyIsIlBvbGFyQXJlYUNvbnRyb2xsZXIiLCJiaW5kIiwiX3VwZGF0ZVJhZGl1cyIsIm1pblNpemUiLCJjdXRvdXRQZXJjZW50YWdlIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGF0YXNldFN0YXJ0QW5nbGUiLCJnZXRJbmRleEFuZ2xlIiwiZGVmYXVsdEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJhbmdsZUxpbmVzIiwiZGlzcGxheSIsImNpcmN1bGFyIiwicG9pbnRMYWJlbHMiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIkVsZW1lbnQiLCJ0b29sdGlwUG9zaXRpb24iLCJ1c2VGaW5hbFBvc2l0aW9uIiwiZ2V0UHJvcHMiLCJoYXNWYWx1ZSIsImZpbmFsIiwiZGVmYXVsdFJvdXRlcyIsImZvcm1hdHRlcnMiLCJudW1lcmljIiwidGlja1ZhbHVlIiwibm90YXRpb24iLCJtYXhUaWNrIiwiY2FsY3VsYXRlRGVsdGEiLCJsb2dEZWx0YSIsIm51bURlY2ltYWwiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJsb2dhcml0aG1pYyIsIlRpY2tzIiwibmV3VGlja3MiLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJjZWlsIiwiZ3JhY2UiLCJkcmF3Qm9yZGVyIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsInRpY2tDb2xvciIsInBhZGRpbmciLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwib2Zmc2V0RnJvbUVkZ2UiLCJzYW1wbGUiLCJudW1JdGVtcyIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsInRpdGxlQWxpZ24iLCJwb3NpdGlvbiIsInJldmVyc2VBbGlnbiIsIlNjYWxlIiwiX21hcmdpbnMiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibGFiZWxSb3RhdGlvbiIsIl9yYW5nZSIsIl9ncmlkTGluZUl0ZW1zIiwiX2xhYmVsSXRlbXMiLCJfbGFiZWxTaXplcyIsIl9tYXhMZW5ndGgiLCJfbG9uZ2VzdFRleHRDYWNoZSIsIl9yZXZlcnNlUGl4ZWxzIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJpbml0Iiwic3VnZ2VzdGVkTWluIiwic3VnZ2VzdGVkTWF4IiwibWV0YXMiLCJnZXRQYWRkaW5nIiwiZ2V0VGlja3MiLCJ4TGFiZWxzIiwieUxhYmVscyIsImJlZm9yZUxheW91dCIsImJlZm9yZVVwZGF0ZSIsIm1hcmdpbnMiLCJ0aWNrT3B0cyIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwibWlubWF4IiwiY2hhbmdlIiwia2VlcFplcm8iLCJfYWRkR3JhY2UiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsInNhbXBsaW5nRW5hYmxlZCIsIl9jb252ZXJ0VGlja3NUb0xhYmVscyIsImJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCJjYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwidGlja3NMaW1pdCIsIm1heFRpY2tzTGltaXQiLCJfdGlja1NpemUiLCJtYXhTY2FsZSIsIm1heENoYXJ0IiwiZGV0ZXJtaW5lTWF4VGlja3MiLCJtYWpvckluZGljZXMiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImRpZmYiLCJnZXRFdmVuU3BhY2luZyIsImZhY3RvcnMiLCJfZmFjdG9yaXplIiwiY2FsY3VsYXRlU3BhY2luZyIsImF2Z01ham9yU3BhY2luZyIsImFmdGVyQXV0b1NraXAiLCJiZWZvcmVGaXQiLCJmaXQiLCJhZnRlckZpdCIsImFmdGVyVXBkYXRlIiwicmV2ZXJzZVBpeGVscyIsIl9hbGlnblRvUGl4ZWxzIiwiYWxpZ25Ub1BpeGVscyIsIl9jYWxsSG9va3MiLCJub3RpZnlQbHVnaW5zIiwiYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiZ2VuZXJhdGVUaWNrTGFiZWxzIiwiYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJudW1UaWNrcyIsIm1heExhYmVsRGlhZ29uYWwiLCJfaXNWaXNpYmxlIiwibGFiZWxTaXplcyIsIl9nZXRMYWJlbFNpemVzIiwibWF4TGFiZWxXaWR0aCIsIndpZGVzdCIsIm1heExhYmVsSGVpZ2h0IiwiaGlnaGVzdCIsImFzaW4iLCJ0aXRsZU9wdHMiLCJncmlkT3B0cyIsInRpdGxlSGVpZ2h0IiwidGlja1BhZGRpbmciLCJhbmdsZVJhZGlhbnMiLCJsYWJlbEhlaWdodCIsImxhYmVsV2lkdGgiLCJfY2FsY3VsYXRlUGFkZGluZyIsIl9oYW5kbGVNYXJnaW5zIiwiaXNSb3RhdGVkIiwibGFiZWxzQmVsb3dUaWNrcyIsIm9mZnNldExlZnQiLCJvZmZzZXRSaWdodCIsImlzRnVsbFNpemUiLCJmdWxsU2l6ZSIsIl9jb21wdXRlTGFiZWxTaXplcyIsImNhY2hlcyIsIndpZHRocyIsImhlaWdodHMiLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInZhbHVlQXQiLCJpZHgiLCJnZXRWYWx1ZUZvclBpeGVsIiwiZGVjaW1hbCIsImdldERlY2ltYWxGb3JQaXhlbCIsImdldEJhc2VWYWx1ZSIsImNyZWF0ZVRpY2tDb250ZXh0Iiwib3B0aW9uVGlja3MiLCJyb3QiLCJfY29tcHV0ZUdyaWRMaW5lSXRlbXMiLCJ0aWNrc0xlbmd0aCIsInRsIiwiYm9yZGVyT3B0cyIsImF4aXNXaWR0aCIsImF4aXNIYWxmV2lkdGgiLCJhbGlnbkJvcmRlclZhbHVlIiwiYm9yZGVyVmFsdWUiLCJhbGlnbmVkTGluZVZhbHVlIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb3NpdGlvbkF4aXNJRCIsImxpbWl0Iiwic3RlcCIsIm9wdHNBdEluZGV4IiwibGluZUNvbG9yIiwidGlja0JvcmRlckRhc2giLCJ0aWNrQm9yZGVyRGFzaE9mZnNldCIsIl9jb21wdXRlTGFiZWxJdGVtcyIsInRpY2tBbmRQYWRkaW5nIiwiaFRpY2tBbmRQYWRkaW5nIiwibGluZUNvdW50IiwidGV4dE9mZnNldCIsIl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50IiwiX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQiLCJoYWxmQ291bnQiLCJiYWNrZHJvcCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwiZmlsbFJlY3QiLCJmaW5kSW5kZXgiLCJkcmF3R3JpZCIsImRyYXdMaW5lIiwic2V0TGluZURhc2giLCJsaW5lRGFzaE9mZnNldCIsImxhc3RMaW5lV2lkdGgiLCJkcmF3TGFiZWxzIiwiZHJhd1RpdGxlIiwidGl0bGVYIiwidGl0bGVZIiwidGl0bGVBcmdzIiwiX2xheWVycyIsInR6IiwieiIsImd6IiwiZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcyIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJpc0ZvclR5cGUiLCJpc1Byb3RvdHlwZU9mIiwicmVnaXN0ZXIiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwiaXRlbURlZmF1bHRzIiwicm91dGVzIiwicHJvcGVydHlQYXJ0cyIsInNvdXJjZU5hbWUiLCJzb3VyY2VTY29wZSIsInJvdXRlRGVmYXVsdHMiLCJyZWdpc3RlckRlZmF1bHRzIiwidW5yZWdpc3RlciIsInJlZ2lzdHJ5IiwiY29udHJvbGxlcnMiLCJfdHlwZWRSZWdpc3RyaWVzIiwiX2VhY2giLCJhZGRDb250cm9sbGVycyIsImFkZFBsdWdpbnMiLCJhZGRTY2FsZXMiLCJnZXRDb250cm9sbGVyIiwiX2dldCIsImdldEVsZW1lbnQiLCJnZXRQbHVnaW4iLCJnZXRTY2FsZSIsInJlbW92ZUNvbnRyb2xsZXJzIiwicmVtb3ZlRWxlbWVudHMiLCJyZW1vdmVQbHVnaW5zIiwicmVtb3ZlU2NhbGVzIiwidHlwZWRSZWdpc3RyeSIsImFyZyIsInJlZyIsIl9nZXRSZWdpc3RyeUZvclR5cGUiLCJfZXhlYyIsIml0ZW1SZWciLCJjb21wb25lbnQiLCJjYW1lbE1ldGhvZCIsIlNjYXR0ZXJDb250cm9sbGVyIiwiX19wcm90b19fIiwiRGF0ZUFkYXB0ZXIiLCJjaGFydE9wdGlvbnMiLCJmb3JtYXRzIiwidGltZXN0YW1wIiwiYW1vdW50IiwidW5pdCIsInN0YXJ0T2YiLCJ3ZWVrZGF5IiwiZW5kT2YiLCJtZW1iZXJzIiwiYWRhcHRlcnMiLCJfZGF0ZSIsImJpbmFyeVNlYXJjaCIsIm1ldGFzZXQiLCJsb29rdXBNZXRob2QiLCJnZXRSYW5nZSIsImV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyIsImhhbmRsZXIiLCJnZXRJbnRlcnNlY3RJdGVtcyIsImlzUG9pbnRJbkFyZWEiLCJpblJhbmdlIiwiZ2V0TmVhcmVzdEl0ZW1zIiwiZGlzdGFuY2VNZXRyaWMiLCJ1c2VYIiwidXNlWSIsImRlbHRhWCIsImRlbHRhWSIsImdldERpc3RhbmNlTWV0cmljRm9yQXhpcyIsIm1pbkRpc3RhbmNlIiwiZ2V0Q2VudGVyUG9pbnQiLCJnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMiLCJnZXROZWFyZXN0UmFkaWFsSXRlbXMiLCJnZXRBeGlzSXRlbXMiLCJyYW5nZU1ldGhvZCIsImludGVyc2VjdHNJdGVtIiwiSW50ZXJhY3Rpb24iLCJtb2RlcyIsIm5lYXJlc3QiLCJTVEFUSUNfUE9TSVRJT05TIiwiZmlsdGVyQnlQb3NpdGlvbiIsImZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyIsInNvcnRCeVdlaWdodCIsImdldENvbWJpbmVkTWF4IiwibWF4UGFkZGluZyIsInVwZGF0ZU1heFBhZGRpbmciLCJib3hQYWRkaW5nIiwidXBkYXRlRGltcyIsInBhcmFtcyIsImxheW91dCIsIm5ld1dpZHRoIiwib3V0ZXJXaWR0aCIsIm5ld0hlaWdodCIsIm91dGVySGVpZ2h0Iiwid2lkdGhDaGFuZ2VkIiwiaGVpZ2h0Q2hhbmdlZCIsInNhbWUiLCJvdGhlciIsImdldE1hcmdpbnMiLCJtYXJnaW5Gb3JQb3NpdGlvbnMiLCJmaXRCb3hlcyIsImJveGVzIiwicmVmaXRCb3hlcyIsInJlZml0Iiwic2V0Qm94RGltcyIsInBsYWNlQm94ZXMiLCJ1c2VyUGFkZGluZyIsInBsYWNlZCIsInN0YWNrV2VpZ2h0IiwiYXV0b1BhZGRpbmciLCJsYXlvdXRzIiwiYWRkQm94IiwicmVtb3ZlQm94IiwibGF5b3V0SXRlbSIsIm1pblBhZGRpbmciLCJhdmFpbGFibGVXaWR0aCIsImF2YWlsYWJsZUhlaWdodCIsImxheW91dEJveGVzIiwid3JhcEJveGVzIiwid3JhcCIsImNlbnRlckhvcml6b250YWwiLCJjZW50ZXJWZXJ0aWNhbCIsImxlZnRBbmRUb3AiLCJyaWdodEFuZEJvdHRvbSIsInZlcnRpY2FsIiwiYnVpbGRMYXlvdXRCb3hlcyIsInZlcnRpY2FsQm94ZXMiLCJob3Jpem9udGFsQm94ZXMiLCJ2aXNpYmxlVmVydGljYWxCb3hDb3VudCIsInZCb3hNYXhXaWR0aCIsImhCb3hNYXhIZWlnaHQiLCJidWlsZFN0YWNrcyIsInNldExheW91dERpbXMiLCJ1cGRhdGVQb3MiLCJoYW5kbGVNYXhQYWRkaW5nIiwiQmFzZVBsYXRmb3JtIiwiYWNxdWlyZUNvbnRleHQiLCJyZWxlYXNlQ29udGV4dCIsImdldE1heGltdW1TaXplIiwiaXNBdHRhY2hlZCIsInVwZGF0ZUNvbmZpZyIsIkJhc2ljUGxhdGZvcm0iLCJFVkVOVF9UWVBFUyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVybGVhdmUiLCJwb2ludGVyb3V0IiwiaXNOdWxsT3JFbXB0eSIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJjb250YWlucyIsImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZW50cmllcyIsInRyaWdnZXIiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjcmVhdGVEZXRhY2hPYnNlcnZlciIsImRycExpc3RlbmluZ0NoYXJ0cyIsIm9sZERldmljZVBpeGVsUmF0aW8iLCJvbldpbmRvd1Jlc2l6ZSIsImRwciIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwiY29udGFpbmVyIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRSZWN0IiwibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJyZWxlYXNlT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsImNyZWF0ZVByb3h5QW5kTGlzdGVuIiwibmF0aXZlIiwiZnJvbU5hdGl2ZUV2ZW50IiwiYWRkTGlzdGVuZXIiLCJEb21QbGF0Zm9ybSIsInJlbmRlckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsImluaXRDYW52YXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJwcm94aWVzIiwiJHByb3hpZXMiLCJhdHRhY2giLCJkZXRhY2giLCJiYldpZHRoIiwiYmJIZWlnaHQiLCJjb250YWluZXJTaXplIiwiY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJCb3JkZXIiLCJjb250YWluZXJQYWRkaW5nIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q29udGFpbmVyU2l6ZSIsImlzQ29ubmVjdGVkIiwiX2RldGVjdFBsYXRmb3JtIiwiT2Zmc2NyZWVuQ2FudmFzIiwiUGx1Z2luU2VydmljZSIsIl9pbml0Iiwibm90aWZ5IiwiaG9vayIsIl9jcmVhdGVEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJwbHVnaW4iLCJjYW5jZWxhYmxlIiwiaW52YWxpZGF0ZSIsIl9vbGRDYWNoZSIsIl9ub3RpZnlTdGF0ZUNoYW5nZXMiLCJsb2NhbElkcyIsImFsbFBsdWdpbnMiLCJnZXRPcHRzIiwicGx1Z2luT3B0cyIsImNyZWF0ZURlc2NyaXB0b3JzIiwicHJldmlvdXNEZXNjcmlwdG9ycyIsInNvbWUiLCJwbHVnaW5TY29wZUtleXMiLCJnZXRJbmRleEF4aXMiLCJkYXRhc2V0RGVmYXVsdHMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJmaXJzdElEcyIsInNjYWxlQ29uZiIsImVycm9yIiwiZGVmYXVsdElkIiwiZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyIsImRlZmF1bHRTY2FsZU9wdGlvbnMiLCJkZWZhdWx0SUQiLCJnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEIiwibWVyZ2VTY2FsZUNvbmZpZyIsImluaXREYXRhIiwia2V5Q2FjaGUiLCJrZXlzQ2FjaGVkIiwiY2FjaGVkS2V5cyIsImdlbmVyYXRlIiwiYWRkSWZGb3VuZCIsIkNvbmZpZyIsIl9jb25maWciLCJpbml0Q29uZmlnIiwiX3Njb3BlQ2FjaGUiLCJfcmVzb2x2ZXJDYWNoZSIsImNsZWFyQ2FjaGUiLCJjbGVhciIsImRhdGFzZXRUeXBlIiwiYWRkaXRpb25hbE9wdGlvblNjb3BlcyIsIl9jYWNoZWRTY29wZXMiLCJtYWluU2NvcGUiLCJyZXNldENhY2hlIiwia2V5TGlzdHMiLCJjaGFydE9wdGlvblNjb3BlcyIsInN1YlByZWZpeGVzIiwiZ2V0UmVzb2x2ZXIiLCJoYXNGdW5jdGlvbiIsIm5lZWRDb250ZXh0IiwicmVzb2x2ZXJDYWNoZSIsIktOT1dOX1BPU0lUSU9OUyIsInBvc2l0aW9uSXNIb3Jpem9udGFsIiwiY29tcGFyZTJMZXZlbCIsImwxIiwibDIiLCJvbkFuaW1hdGlvbnNDb21wbGV0ZSIsIm9uQ29tcGxldGUiLCJvbkFuaW1hdGlvblByb2dyZXNzIiwib25Qcm9ncmVzcyIsImdldENhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiaW5zdGFuY2VzIiwiZ2V0Q2hhcnQiLCJtb3ZlTnVtZXJpY0tleXMiLCJpbnRLZXkiLCJDaGFydCIsInVzZXJDb25maWciLCJpbml0aWFsQ2FudmFzIiwiZXhpc3RpbmdDaGFydCIsIl9vcHRpb25zIiwiX2FzcGVjdFJhdGlvIiwiX21ldGFzZXRzIiwiX2xhc3RFdmVudCIsIl9saXN0ZW5lcnMiLCJfcmVzcG9uc2l2ZUxpc3RlbmVycyIsIl9zb3J0ZWRNZXRhc2V0cyIsIl9wbHVnaW5zIiwiX2hpZGRlbkluZGljZXMiLCJhdHRhY2hlZCIsIl9kb1Jlc2l6ZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZGVib3VuY2UiLCJyZXNpemVEZWxheSIsIl9pbml0aWFsaXplIiwiYmluZEV2ZW50cyIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm5ld1NpemUiLCJuZXdSYXRpbyIsIm9uUmVzaXplIiwicmVuZGVyIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsInVwZGF0ZWQiLCJpc1JhZGlhbCIsImRwb3NpdGlvbiIsImR0eXBlIiwic2NhbGVUeXBlIiwiaGFzVXBkYXRlZCIsIl91cGRhdGVNZXRhc2V0cyIsIl9kZXN0cm95RGF0YXNldE1ldGEiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwiX3Jlc2V0RWxlbWVudHMiLCJhbmltc0Rpc2FibGVkIiwiX3VwZGF0ZVNjYWxlcyIsIl9jaGVja0V2ZW50QmluZGluZ3MiLCJfdXBkYXRlSGlkZGVuSW5kaWNlcyIsIl9taW5QYWRkaW5nIiwiX3VwZGF0ZUxheW91dCIsIl91cGRhdGVEYXRhc2V0cyIsIl9ldmVudEhhbmRsZXIiLCJfdXBkYXRlSG92ZXJTdHlsZXMiLCJleGlzdGluZ0V2ZW50cyIsIm5ld0V2ZW50cyIsInVuYmluZEV2ZW50cyIsImNoYW5nZXMiLCJfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzIiwiZGF0YXNldENvdW50IiwibWFrZVNldCIsImNoYW5nZVNldCIsIm5vQXJlYSIsIl9pZHgiLCJfdXBkYXRlRGF0YXNldCIsImxheWVycyIsIl9kcmF3RGF0YXNldHMiLCJfZHJhd0RhdGFzZXQiLCJ1c2VDbGlwIiwiZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSIsInNldERhdGFzZXRWaXNpYmlsaXR5IiwiX3VwZGF0ZVZpc2liaWxpdHkiLCJfc3RvcCIsImRlc3Ryb3kiLCJ0b0Jhc2U2NEltYWdlIiwidG9EYXRhVVJMIiwiYmluZFVzZXJFdmVudHMiLCJiaW5kUmVzcG9uc2l2ZUV2ZW50cyIsIl9hZGQiLCJfcmVtb3ZlIiwiZGV0YWNoZWQiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiZ2V0QWN0aXZlRWxlbWVudHMiLCJzZXRBY3RpdmVFbGVtZW50cyIsImFjdGl2ZUVsZW1lbnRzIiwibGFzdEFjdGl2ZSIsInJlcGxheSIsImhvdmVyT3B0aW9ucyIsImRlYWN0aXZhdGVkIiwiYWN0aXZhdGVkIiwiaW5DaGFydEFyZWEiLCJldmVudEZpbHRlciIsIl9oYW5kbGVFdmVudCIsIl9nZXRBY3RpdmVFbGVtZW50cyIsImlzQ2xpY2siLCJfaXNDbGlja0V2ZW50IiwibGFzdEV2ZW50IiwiZGV0ZXJtaW5lTGFzdEV2ZW50IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJjbGlwQXJjIiwicGl4ZWxNYXJnaW4iLCJhbmdsZU1hcmdpbiIsInJUaGV0YVRvWFkiLCJ0aGV0YSIsInBhdGhBcmMiLCJpbm5lclIiLCJzcGFjaW5nT2Zmc2V0IiwiYXZOb2dTcGFjaW5nUmFkaXVzIiwiYW5nbGVPZmZzZXQiLCJvdXRlclN0YXJ0Iiwib3V0ZXJFbmQiLCJpbm5lclN0YXJ0IiwiaW5uZXJFbmQiLCJhbmdsZURlbHRhIiwiYm9yZGVyUmFkaXVzIiwiaGFsZlRoaWNrbmVzcyIsImlubmVyTGltaXQiLCJjb21wdXRlT3V0ZXJMaW1pdCIsIm91dGVyQXJjTGltaXQiLCJwYXJzZUJvcmRlclJhZGl1cyQxIiwib3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzIiwib3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyIsIm91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwib3V0ZXJFbmRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzIiwiaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyIsImlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwiaW5uZXJFbmRBZGp1c3RlZEFuZ2xlIiwicENlbnRlciIsInA0IiwicDgiLCJvdXRlclN0YXJ0WCIsIm91dGVyU3RhcnRZIiwib3V0ZXJFbmRYIiwib3V0ZXJFbmRZIiwidmVyc2lvbiIsIkFyY0VsZW1lbnQiLCJmdWxsQ2lyY2xlcyIsImNoYXJ0WCIsImNoYXJ0WSIsInJBZGp1c3QiLCJiZXR3ZWVuQW5nbGVzIiwid2l0aGluUmFkaXVzIiwiaGFsZkFuZ2xlIiwiaGFsZlJhZGl1cyIsInJhZGl1c09mZnNldCIsImRyYXdBcmMiLCJpbm5lciIsImxpbmVKb2luIiwiZHJhd0Z1bGxDaXJjbGVCb3JkZXJzIiwic2V0U3R5bGUiLCJsaW5lQ2FwIiwicGF0aFZhcnMiLCJwYXJhbXNTdGFydCIsInBhcmFtc0VuZCIsInNlZ21lbnRTdGFydCIsInNlZ21lbnRFbmQiLCJvdXRzaWRlIiwicGF0aFNlZ21lbnQiLCJsaW5lTWV0aG9kIiwic3RlcHBlZCIsImdldExpbmVNZXRob2QiLCJmYXN0UGF0aFNlZ21lbnQiLCJwcmV2WCIsImxhc3RZIiwiYXZnWCIsImNvdW50WCIsInBvaW50SW5kZXgiLCJkcmF3WCIsInRydW5jWCIsIl9nZXRTZWdtZW50TWV0aG9kIiwidXNlUGF0aDJEIiwiUGF0aDJEIiwiTGluZUVsZW1lbnQiLCJfcGF0aCIsIl9wb2ludHMiLCJfc2VnbWVudHMiLCJfcG9pbnRzVXBkYXRlZCIsInNlZ21lbnRPcHRpb25zIiwiZmluZFN0YXJ0QW5kRW5kIiwiY2hhcnRDb250ZXh0IiwiYmFzZVN0eWxlIiwiYWRkU3R5bGUiLCJzdCIsImRpciIsInAwIiwicDBEYXRhSW5kZXgiLCJwMURhdGFJbmRleCIsImRvU3BsaXRCeVN0eWxlcyIsInNwbGl0QnlTdHlsZXMiLCJzb2xpZFNlZ21lbnRzIiwiX2NvbXB1dGVTZWdtZW50cyIsIl9pbnRlcnBvbGF0ZSIsIl9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kIiwiaW50ZXJwb2xhdGVkIiwic2VnbWVudE1ldGhvZCIsInBhdGgiLCJzdHJva2VQYXRoV2l0aENhY2hlIiwic3Ryb2tlUGF0aERpcmVjdCIsImluUmFuZ2UkMSIsImhpdFJhZGl1cyIsIlBvaW50RWxlbWVudCIsIm1vdXNlWCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJob3ZlclJhZGl1cyIsImdldEJhckJvdW5kcyIsImJhciIsImhhbGYiLCJza2lwT3JMaW1pdCIsInNraXBYIiwic2tpcFkiLCJhZGROb3JtYWxSZWN0UGF0aCIsImluZmxhdGVSZWN0IiwicmVmUmVjdCIsIkJhckVsZW1lbnQiLCJvdXRlciIsIm1heFciLCJtYXhIIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFIiLCJlbmFibGVCb3JkZXIiLCJwYXJzZUJvcmRlclJhZGl1cyIsImJvdW5kaW5nUmVjdHMiLCJhZGRSZWN0UGF0aCIsImNsZWFuRGVjaW1hdGVkRGF0YXNldCIsImNsZWFuRGVjaW1hdGVkRGF0YSIsInBsdWdpbl9kZWNpbWF0aW9uIiwiYWxnb3JpdGhtIiwiYmVmb3JlRWxlbWVudHNVcGRhdGUiLCJ4QXhpcyIsImRlY2ltYXRlZCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkIiwidGhyZXNob2xkIiwic2FtcGxlcyIsImJ1Y2tldFdpZHRoIiwic2FtcGxlZEluZGV4IiwiZW5kSW5kZXgiLCJtYXhBcmVhUG9pbnQiLCJtYXhBcmVhIiwibmV4dEEiLCJhdmdZIiwiYXZnUmFuZ2VTdGFydCIsImF2Z1JhbmdlRW5kIiwiYXZnUmFuZ2VMZW5ndGgiLCJyYW5nZU9mZnMiLCJyYW5nZVRvIiwicG9pbnRBeCIsInBvaW50QXkiLCJsdHRiRGVjaW1hdGlvbiIsIm1pbkluZGV4IiwibWF4SW5kZXgiLCJzdGFydEluZGV4IiwieE1pbiIsImR4IiwibGFzdEluZGV4IiwiaW50ZXJtZWRpYXRlSW5kZXgxIiwiaW50ZXJtZWRpYXRlSW5kZXgyIiwibWluTWF4RGVjaW1hdGlvbiIsIl9nZXRCb3VuZHMiLCJfZmluZFNlZ21lbnRFbmQiLCJfZ2V0RWRnZSIsIl9jcmVhdGVCb3VuZGFyeUxpbmUiLCJib3VuZGFyeSIsImxpbmVQb2ludHMiLCJfcG9pbnRzRnJvbVNlZ21lbnRzIiwiX3Nob3VsZEFwcGx5RmlsbCIsIl9yZXNvbHZlVGFyZ2V0IiwicHJvcGFnYXRlIiwidmlzaXRlZCIsIl9kZWNvZGVGaWxsIiwiZmlsbE9wdGlvbiIsInBhcnNlRmlsbE9wdGlvbiIsImZpcnN0Q2giLCJkZWNvZGVUYXJnZXRJbmRleCIsImFkZFBvaW50c0JlbG93Iiwic291cmNlUG9pbnQiLCJsaW5lc0JlbG93IiwicG9zdHBvbmVkIiwiZmluZFBvaW50IiwidW5zaGlmdCIsInBvaW50VmFsdWUiLCJmaXJzdFZhbHVlIiwibGFzdFZhbHVlIiwic2ltcGxlQXJjIiwiX2RyYXdmaWxsIiwiZ2V0TGluZUJ5SW5kZXgiLCJzb3VyY2VQb2ludHMiLCJiZWxvdyIsImdldExpbmVzQmVsb3ciLCJfYnVpbGRTdGFja0xpbmUiLCJfZ2V0VGFyZ2V0VmFsdWUiLCJjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeSIsIl9nZXRUYXJnZXRQaXhlbCIsImNvbXB1dGVMaW5lYXJCb3VuZGFyeSIsImNvbXB1dGVCb3VuZGFyeSIsImxpbmVPcHRzIiwiYWJvdmUiLCJjbGlwVmVydGljYWwiLCJkb0ZpbGwiLCJjbGlwWSIsImxpbmVMb29wIiwidHBvaW50cyIsInRhcmdldFNlZ21lbnRzIiwidGd0Iiwic3ViQm91bmRzIiwiZmlsbFNvdXJjZXMiLCJmaWxsU291cmNlIiwic3JjIiwibm90U2hhcGUiLCJjbGlwQm91bmRzIiwiaW50ZXJwb2xhdGVkTGluZVRvIiwidGFyZ2V0TG9vcCIsImludGVycG9sYXRlZFBvaW50IiwiYWZ0ZXJEYXRhc2V0c1VwZGF0ZSIsIl9hcmdzIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsInBvaW50U3R5bGVXaWR0aCIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJoZWlnaHRMaW1pdCIsInRvdGFsV2lkdGgiLCJjdXJyZW50Q29sV2lkdGgiLCJjdXJyZW50Q29sSGVpZ2h0IiwiY29sIiwiYWRqdXN0SGl0Qm94ZXMiLCJydGxIZWxwZXIiLCJoaXRib3giLCJfZHJhdyIsImRlZmF1bHRDb2xvciIsImZvbnRDb2xvciIsImhhbGZGb250U2l6ZSIsImN1cnNvciIsInRleHREaXJlY3Rpb24iLCJsaW5lRGFzaCIsImRyYXdPcHRpb25zIiwiU1FSVDIiLCJ5Qm94VG9wIiwieEJveExlZnQiLCJkcmF3TGVnZW5kQm94IiwiX3RleHRYIiwidGl0bGVGb250IiwidGl0bGVQYWRkaW5nIiwidG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUiLCJfZ2V0TGVnZW5kSXRlbUF0IiwiaGl0Qm94IiwibGgiLCJoYW5kbGVFdmVudCIsIm9uTGVhdmUiLCJpc0xpc3RlbmVkIiwiaG92ZXJlZEl0ZW0iLCJzYW1lSXRlbSIsInBsdWdpbl9sZWdlbmQiLCJfZWxlbWVudCIsImFmdGVyRXZlbnQiLCJjaSIsIlRpdGxlIiwiX3BhZGRpbmciLCJ0ZXh0U2l6ZSIsIl9kcmF3QXJncyIsImZvbnRPcHRzIiwicGx1Z2luX3RpdGxlIiwidGl0bGVCbG9jayIsImNyZWF0ZVRpdGxlIiwiV2Vha01hcCIsInBsdWdpbl9zdWJ0aXRsZSIsInBvc2l0aW9uZXJzIiwiYXZlcmFnZSIsImV2ZW50UG9zaXRpb24iLCJuZWFyZXN0RWxlbWVudCIsInRwIiwicHVzaE9yQ29uY2F0IiwidG9QdXNoIiwic3BsaXROZXdsaW5lcyIsIlN0cmluZyIsImNyZWF0ZVRvb2x0aXBJdGVtIiwiZ2V0VG9vbHRpcFNpemUiLCJib2R5IiwiZm9vdGVyIiwiYm9keUZvbnQiLCJmb290ZXJGb250IiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJib2R5TGluZUl0ZW1Db3VudCIsImNvbWJpbmVkQm9keUxlbmd0aCIsImJvZHlJdGVtIiwiYmVmb3JlIiwiYWZ0ZXIiLCJiZWZvcmVCb2R5IiwiYWZ0ZXJCb2R5IiwidGl0bGVTcGFjaW5nIiwidGl0bGVNYXJnaW5Cb3R0b20iLCJkaXNwbGF5Q29sb3JzIiwiYm9keVNwYWNpbmciLCJmb290ZXJNYXJnaW5Ub3AiLCJmb290ZXJTcGFjaW5nIiwid2lkdGhQYWRkaW5nIiwibWF4TGluZVdpZHRoIiwiZGV0ZXJtaW5lWEFsaWduIiwieUFsaWduIiwiY2hhcnRXaWR0aCIsInhBbGlnbiIsImNhcmV0IiwiY2FyZXRTaXplIiwiY2FyZXRQYWRkaW5nIiwiZG9lc05vdEZpdFdpdGhBbGlnbiIsImRldGVybWluZUFsaWdubWVudCIsImRldGVybWluZVlBbGlnbiIsImdldEJhY2tncm91bmRQb2ludCIsImFsaWdubWVudCIsInBhZGRpbmdBbmRTaXplIiwiYWxpZ25YIiwiYWxpZ25ZIiwiZ2V0QWxpZ25lZFgiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsIm92ZXJyaWRlQ2FsbGJhY2tzIiwiVG9vbHRpcCIsIm9wYWNpdHkiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsInRvb2x0aXBJdGVtcyIsImdldFRpdGxlIiwiYmVmb3JlVGl0bGUiLCJhZnRlclRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJiZWZvcmVMYWJlbCIsImFmdGVyTGFiZWwiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsIl9jcmVhdGVJdGVtcyIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImxhYmVsVGV4dENvbG9yIiwicG9zaXRpb25BbmRTaXplIiwiYmFja2dyb3VuZFBvaW50IiwiZXh0ZXJuYWwiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0aXRsZUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiZHJhd0JvZHkiLCJib2R5QWxpZ24iLCJib2R5TGluZUhlaWdodCIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiYm9keUFsaWduRm9yQ2FsY3VsYXRpb24iLCJ0ZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsInRvb2x0aXBTaXplIiwicXVhZHJhdGljQ3VydmVUbyIsIl91cGRhdGVBbmltYXRpb25UYXJnZXQiLCJhbmltWCIsImFuaW1ZIiwiX3dpbGxSZW5kZXIiLCJoYXNUb29sdGlwQ29udGVudCIsImdsb2JhbEFscGhhIiwicG9zaXRpb25DaGFuZ2VkIiwiX3Bvc2l0aW9uQ2hhbmdlZCIsIl9pZ25vcmVSZXBsYXlFdmVudHMiLCJwbHVnaW5fdG9vbHRpcCIsImFmdGVySW5pdCIsImFmdGVyRHJhdyIsImxhYmVsQ291bnQiLCJEZWNpbWF0aW9uIiwiRmlsbGVyIiwiU3ViVGl0bGUiLCJDYXRlZ29yeVNjYWxlIiwiX3N0YXJ0VmFsdWUiLCJfdmFsdWVSYW5nZSIsIl9hZGRlZExhYmVscyIsImFkZGVkIiwiYWRkZWRMYWJlbHMiLCJhZGRJZlN0cmluZyIsImxhc3RJbmRleE9mIiwiZmluZE9yQWRkTGFiZWwiLCJyZWxhdGl2ZUxhYmVsU2l6ZSIsIm1pblNwYWNpbmciLCJMaW5lYXJTY2FsZUJhc2UiLCJfZW5kVmFsdWUiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsImdldFRpY2tMaW1pdCIsIm1heFRpY2tzIiwic3RlcFNpemUiLCJjb21wdXRlVGlja0xpbWl0IiwiZ2VuZXJhdGlvbk9wdGlvbnMiLCJkYXRhUmFuZ2UiLCJwcmVjaXNpb24iLCJtYXhEaWdpdHMiLCJpbmNsdWRlQm91bmRzIiwibWF4U3BhY2VzIiwicm1pbiIsInJtYXgiLCJjb3VudERlZmluZWQiLCJuaWNlTWluIiwibmljZU1heCIsIm51bVNwYWNlcyIsInJvdW5kZWQiLCJhbG1vc3RXaG9sZSIsImRlY2ltYWxQbGFjZXMiLCJnZW5lcmF0ZVRpY2tzJDEiLCJMaW5lYXJTY2FsZSIsImlzTWFqb3IiLCJ0aWNrVmFsIiwiTG9nYXJpdGhtaWNTY2FsZSIsIl96ZXJvIiwiZXhwIiwiZW5kRXhwIiwiZW5kU2lnbmlmaWNhbmQiLCJzaWduaWZpY2FuZCIsImxhc3RUaWNrIiwiZ2VuZXJhdGVUaWNrcyIsImdldFRpY2tCYWNrZHJvcEhlaWdodCIsImRldGVybWluZUxpbWl0cyIsInVwZGF0ZUxpbWl0cyIsImxpbWl0cyIsImhMaW1pdHMiLCJ2TGltaXRzIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJ5Rm9yQW5nbGUiLCJwYXRoUmFkaXVzTGluZSIsImdldFBvaW50UG9zaXRpb24iLCJSYWRpYWxMaW5lYXJTY2FsZSIsImRyYXdpbmdBcmVhIiwiX3BvaW50TGFiZWxzIiwiX3BvaW50TGFiZWxJdGVtcyIsInZhbHVlQ291bnQiLCJwb2ludExhYmVsT3B0cyIsImFkZGl0aW9uYWxBbmdsZSIsImNlbnRlclBvaW50TGFiZWxzIiwiZ2V0UG9pbnRMYWJlbENvbnRleHQiLCJwbEZvbnQiLCJzZXRDZW50ZXJQb2ludCIsImV4dHJhIiwib3V0ZXJEaXN0YW5jZSIsInBvaW50TGFiZWxQb3NpdGlvbiIsImJ1aWxkUG9pbnRMYWJlbEl0ZW1zIiwiZml0V2l0aFBvaW50TGFiZWxzIiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsInRvcE1vdmVtZW50IiwiYm90dG9tTW92ZW1lbnQiLCJzY2FsaW5nRmFjdG9yIiwiZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIiLCJzY2FsZWREaXN0YW5jZSIsInBvaW50TGFiZWwiLCJjcmVhdGVQb2ludExhYmVsQ29udGV4dCIsImRpc3RhbmNlRnJvbUNlbnRlciIsImdldEJhc2VQb3NpdGlvbiIsImdldFBvaW50TGFiZWxQb3NpdGlvbiIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJhbmltYXRlIiwiSU5URVJWQUxTIiwibWlsbGlzZWNvbmQiLCJjb21tb24iLCJzdGVwcyIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNhcGFjaXR5IiwiaW50ZXJ2YWwiLCJhZGRUaWNrIiwidGltZSIsInRpbWVzdGFtcHMiLCJ0aWNrc0Zyb21UaW1lc3RhbXBzIiwibWFqb3JVbml0Iiwic2V0TWFqb3JUaWNrcyIsIlRpbWVTY2FsZSIsIl91bml0IiwiX21ham9yVW5pdCIsIl9vZmZzZXRzIiwiX25vcm1hbGl6ZWQiLCJkaXNwbGF5Rm9ybWF0cyIsIm5vcm1hbGl6ZWQiLCJfYXBwbHlCb3VuZHMiLCJfZ2V0TGFiZWxCb3VuZHMiLCJnZXRMYWJlbFRpbWVzdGFtcHMiLCJ0aW1lT3B0cyIsIl9nZW5lcmF0ZSIsIl9maWx0ZXJCZXR3ZWVuIiwiX2dldExhYmVsQ2FwYWNpdHkiLCJkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyIsImRldGVybWluZU1ham9yVW5pdCIsImluaXRPZmZzZXRzIiwib2Zmc2V0QWZ0ZXJBdXRvc2tpcCIsImdldERlY2ltYWxGb3JWYWx1ZSIsImhhc1dlZWtkYXkiLCJnZXREYXRhVGltZXN0YW1wcyIsInRvb2x0aXBGb3JtYXQiLCJkYXRldGltZSIsIl90aWNrRm9ybWF0RnVuY3Rpb24iLCJtaW5vckZvcm1hdCIsIm1ham9yRm9ybWF0Iiwib2Zmc2V0cyIsIl9nZXRMYWJlbFNpemUiLCJ0aWNrc09wdHMiLCJ0aWNrTGFiZWxXaWR0aCIsImNvc1JvdGF0aW9uIiwic2luUm90YXRpb24iLCJ0aWNrRm9udFNpemUiLCJleGFtcGxlVGltZSIsImV4YW1wbGVMYWJlbCIsInByZXZTb3VyY2UiLCJuZXh0U291cmNlIiwicHJldlRhcmdldCIsIm5leHRUYXJnZXQiLCJzcGFuIiwiVGltZVNlcmllc1NjYWxlIiwiX3RhYmxlIiwiX21pblBvcyIsIl90YWJsZVJhbmdlIiwiX2dldFRpbWVzdGFtcHNGb3JUYWJsZSIsImJ1aWxkTG9va3VwVGFibGUiLCJyZWdpc3RlcmFibGVzIl0sInNvdXJjZVJvb3QiOiIifQ==