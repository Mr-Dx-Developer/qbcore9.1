"use strict";(self.webpackChunknpwd_crypto=self.webpackChunknpwd_crypto||[]).push([[464],{9464:(n,e,i)=>{i.r(e);var o,t,r=i(2950),p=i.n(r),d=i(2181),l=i.n(d),x=(i(5475),i(5662),i(3839)),a=i.n(x),c=i(6501),u=(i(4810),i(245),i(3971),i(1551),i(8087),i(2072),i(246),i(7951),i(2453),i(5210),i(9085),i(7030),i(3377),function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n});a()(c.Z)(o||(o=u(["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: 100%;\n"],["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: 100%;\n"]))),a().div(t||(t=u(["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  padding: 1.5rem;\n  max-height: calc(100% - 7.5rem);\n"],["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  padding: 1.5rem;\n  max-height: calc(100% - 7.5rem);\n"]))),i.p,i(5142);var b,s,f,g=i(6038),h=function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n};a().div(b||(b=h(["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"],["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"]))),a().div(s||(s=h(["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"],["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"])),(function(n){return n.src})),a().div(f||(f=h(["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"],["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"]))),(0,g.Z)({palette:{mode:"light"}}),l().render(p().createElement((function(){return null}),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,