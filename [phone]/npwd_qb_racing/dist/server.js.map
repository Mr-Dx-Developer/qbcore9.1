{
  "version": 3,
  "sources": ["../server/server.ts"],
  "sourcesContent": ["import { RawUser, User } from '../types/User';\nimport { Server } from 'qbcore.js';\nimport { RawTrack, Track, RaceRecord, Race, QBRace } from '../types/Racing';\nimport { QBRacingEvents, RacingEvents } from '../types/Events';\nimport { SQLJSON } from '../types/Common';\n\nconst QBCore: Server = exports['qb-core'].GetCoreObject();\n\nconst hotReloadConfig = {\n  resourceName: GetCurrentResourceName(),\n  files: ['/dist/server.js', '/dist/client.js', '/dist/html/index.js'],\n};\n\nif (GetResourceState('hotreload') === 'started') {\n  exports['hotreload'].add(hotReloadConfig);\n}\n\nconst MYSQL: OXMysqlExports = global.exports['oxmysql'];\n\ninterface OXMysqlExports {\n  query_async: <T>(query: string, args?: string[]) => Promise<T>;\n}\n\nonNet(RacingEvents.GetTracks, async () => {\n  const src = source;\n  const rawTracks = await MYSQL.query_async<RawTrack[]>('SELECT * from lapraces');\n  const rawUsers = await MYSQL.query_async<RawUser[]>('SELECT citizenid, charinfo from players');\n  const tracks = rawTracks.map(parseTrack(rawUsers));\n  emitNet(RacingEvents.SendTracks, src, tracks);\n});\n\nonNet(RacingEvents.GetRaces, async () => {\n  const src = source;\n\n  const rawUsers = await MYSQL.query_async<RawUser[]>('SELECT citizenid, charinfo from players');\n  const races = await new Promise<QBRace[]>((resolve) => {\n    QBCore.Functions.TriggerCallback('qb-lapraces:server:GetRaces', 0, resolve);\n  });\n\n  const parsedRaces = races.map(parseRace(rawUsers));\n\n  emitNet(RacingEvents.SendRaces, src, parsedRaces);\n});\n\nonNet(RacingEvents.GetUser, async () => {\n  const src = source;\n  const player = QBCore.Functions.GetPlayer(src);\n  emitNet(RacingEvents.SendUser, src, player.PlayerData);\n});\n\nonNet(RacingEvents.DeleteTrack, async (raceId: string) => {\n  const src = source;\n  const player = QBCore.Functions.GetPlayer(src);\n\n  const { affectedRows } = await MYSQL.query_async<{ affectedRows: number }>(\n    'DELETE FROM lapraces WHERE creator=? AND raceid=?',\n    [player.PlayerData.citizenid, raceId],\n  );\n\n  if (affectedRows > 0) {\n    emit(QBRacingEvents.CancelRace, raceId);\n    emitNet(RacingEvents.SendDeleteTrack, src, true);\n    return;\n  }\n\n  emitNet(RacingEvents.SendDeleteTrack, src, false);\n});\n\nfunction parseRecord(record: SQLJSON | null): RaceRecord | null {\n  if (!record) {\n    return null;\n  }\n\n  const raceRecord = JSON.parse(record);\n\n  if (!raceRecord.Holder) {\n    return null;\n  }\n\n  return {\n    name: `${raceRecord.Holder[0]} ${raceRecord.Holder[1]}`,\n    time: raceRecord.Time,\n  };\n}\n\nfunction parseTrack(users: RawUser[]) {\n  return (rawTrack: RawTrack): Track => {\n    const record = parseRecord(rawTrack.records);\n    const creator = users.find((user) => user.citizenid === rawTrack.creator);\n    const charInfo = creator && (JSON.parse(creator.charinfo) as User['charInfo']);\n    const creatorName = charInfo ? `${charInfo.firstname} ${charInfo.lastname}` : 'Unknown';\n\n    return {\n      records: null,\n      ...rawTrack,\n      record,\n      creatorId: rawTrack.creator,\n      creatorName,\n      raceId: rawTrack.raceid,\n      checkpoints: JSON.parse(rawTrack.checkpoints),\n    };\n  };\n}\n\nfunction parseRace(users: RawUser[]) {\n  return (race: QBRace): Race => {\n    const record = parseRecord(JSON.stringify(race.RaceData.Records) as SQLJSON);\n    const creator = users.find((user) => user.citizenid === race.SetupCitizenId);\n    const charInfo = creator && (JSON.parse(creator.charinfo) as User['charInfo']);\n    const creatorName = charInfo ? `${charInfo.firstname} ${charInfo.lastname}` : 'Unknown';\n\n    return {\n      id: -1,\n      record,\n      name: race.RaceData.RaceName,\n      racers: race.RaceData.Racers,\n      raceCreatorName: creatorName,\n      lastLeaderboard: race.RaceData.LastLeaderboard,\n      laps: race.Laps,\n      waiting: race.RaceData.Waiting,\n      started: race.RaceData.Started,\n      distance: race.RaceData.Distance,\n      creatorName: race.RaceData.Creator,\n      raceCreatorId: race.SetupCitizenId,\n      raceId: race.RaceId,\n      creatorId: race.RaceData.Creator,\n      checkpoints: race.RaceData.Checkpoints,\n    };\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
