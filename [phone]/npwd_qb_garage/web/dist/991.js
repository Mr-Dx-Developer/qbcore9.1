"use strict";(self.webpackChunkgarage=self.webpackChunkgarage||[]).push([[991],{5991:(n,e,o)=>{o.r(e);var t=o(2950),r=o.n(t),i=o(2181),a=o.n(i),d=(o(5475),o(6235),o(3839)),p=o.n(d),l=(p()("div")({width:"100%",justifyContent:"flex-start",display:"flex",alignItems:"center",gap:20,marginBottom:20}),o(4810),o(5974),o(6867),o(2658),o(4669),o(1508),o(2440),o(8277),o(2981),o(799),o(7903),o(7425),o(6447),o(5092),o(5137),o(3486));o(265),o(7036),o(6559),o(9521),o(4637),o(327),o(700),o(4755),o(8584),o(6914),o(9308),o(2753),o(6024);var u,c;p().div(x||(u=["\n  flex: 1;\n  padding: 1.5rem;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],c=["\n  flex: 1;\n  padding: 1.5rem;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],Object.defineProperty?Object.defineProperty(u,"raw",{value:c}):u.raw=c,x=u),(function(n){return n.isDarkMode&&"\n    background-color: #212121;\n  "}));var x,s=o(6115);l.Z[500],s.Z.white;l.Z[700],l.Z[300],o.p,o(2453),o(5142);var f,g,b,h=o(360),v=function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n};p().div(f||(f=v(["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"],["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"]))),p().div(g||(g=v(["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"],["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"])),(function(n){return n.src})),p().div(b||(b=v(["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"],["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"]))),(0,h.Z)({palette:{mode:"light"}}),a().render(r().createElement((function(){return null}),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,