"use strict";(self.webpackChunknpwd_app=self.webpackChunknpwd_app||[]).push([[804],{2804:(e,t,n)=>{n.r(t),n.d(t,{default:()=>hi,DefaultValue:()=>Ls,RecoilLoadable:()=>Us,RecoilRoot:()=>Cs,atom:()=>Ds,atomFamily:()=>Ps,constSelector:()=>Fs,errorSelector:()=>zs,isRecoilValue:()=>Ms,noWait:()=>Gs,readOnlySelector:()=>Ws,retentionZone:()=>fi,selector:()=>Os,selectorFamily:()=>xs,snapshot_UNSTABLE:()=>ui,useGetRecoilValueInfo_UNSTABLE:()=>ei,useGotoRecoilSnapshot:()=>ii,useRecoilBridgeAcrossReactRoots_UNSTABLE:()=>Is,useRecoilCallback:()=>ai,useRecoilRefresher_UNSTABLE:()=>ti,useRecoilSnapshot:()=>li,useRecoilState:()=>Ys,useRecoilStateLoadable:()=>Js,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:()=>ri,useRecoilStoreID:()=>Bs,useRecoilTransactionObserver_UNSTABLE:()=>ci,useRecoilTransaction_UNSTABLE:()=>si,useRecoilValue:()=>Ks,useRecoilValueLoadable:()=>Zs,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:()=>ni,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:()=>oi,useResetRecoilState:()=>Qs,useRetain:()=>di,useSetRecoilState:()=>Xs,waitForAll:()=>Hs,waitForAllSettled:()=>qs,waitForAny:()=>$s,waitForNone:()=>js});var o=n(2950),r=n.n(o),a=n(2181),s=n.n(a),i=function(e){const t=new Error(e);if(void 0===t.stack)try{throw t}catch(e){}return t},l=function(e){return!!e&&"function"==typeof e.then},c=function(e,t){if(null!=e)return e;throw i(null!=t?t:"Got unexpected null or undefined")};function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class d{getValue(){throw i("BaseLoadable")}toPromise(){throw i("BaseLoadable")}valueMaybe(){throw i("BaseLoadable")}valueOrThrow(){throw i(`Loadable expected value, but in "${this.state}" state`)}promiseMaybe(){throw i("BaseLoadable")}promiseOrThrow(){throw i(`Loadable expected promise, but in "${this.state}" state`)}errorMaybe(){throw i("BaseLoadable")}errorOrThrow(){throw i(`Loadable expected error, but in "${this.state}" state`)}is(e){return e.state===this.state&&e.contents===this.contents}map(e){throw i("BaseLoadable")}}class f extends d{constructor(e){super(),u(this,"state","hasValue"),u(this,"contents",void 0),this.contents=e}getValue(){return this.contents}toPromise(){return Promise.resolve(this.contents)}valueMaybe(){return this.contents}valueOrThrow(){return this.contents}promiseMaybe(){}errorMaybe(){}map(e){try{const t=e(this.contents);return l(t)?_(t):m(t)?t:y(t)}catch(t){return l(t)?_(t.next((()=>this.map(e)))):v(t)}}}class h extends d{constructor(e){super(),u(this,"state","hasError"),u(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return Promise.reject(this.contents)}valueMaybe(){}promiseMaybe(){}errorMaybe(){return this.contents}errorOrThrow(){return this.contents}map(e){return this}}class p extends d{constructor(e){super(),u(this,"state","loading"),u(this,"contents",void 0),this.contents=e}getValue(){throw this.contents}toPromise(){return this.contents}valueMaybe(){}promiseMaybe(){return this.contents}promiseOrThrow(){return this.contents}errorMaybe(){}map(e){return _(this.contents.then((t=>{const n=e(t);if(m(n)){const e=n;switch(e.state){case"hasValue":case"loading":return e.contents;case"hasError":throw e.contents}}return n})).catch((t=>{if(l(t))return t.then((()=>this.map(e).contents));throw t})))}}function y(e){return Object.freeze(new f(e))}function v(e){return Object.freeze(new h(e))}function _(e){return Object.freeze(new p(e))}function S(e){const t=function(e){return e.every((e=>"hasValue"===e.state))?y(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?v(c(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):_(Promise.all(e.map((e=>e.contents))))}((Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))).map((e=>m(e)?e:l(e)?_(e):y(e))));return Array.isArray(e)?t:t.map((t=>Object.getOwnPropertyNames(e).reduce(((e,n,o)=>({...e,[n]:t[o]})),{})))}function m(e){return e instanceof d}const g={of:e=>l(e)?_(e):m(e)?e:y(e),error:e=>v(e),all:S,isLoadable:m};var R={loadableWithValue:y,loadableWithError:v,loadableWithPromise:_,loadableLoading:function(){return Object.freeze(new p(new Promise((()=>{}))))},loadableAll:S,isLoadable:m,RecoilLoadable:g},T=R.loadableWithValue,b=R.loadableWithError,w=R.loadableWithPromise,A=R.loadableLoading,N=R.loadableAll,E=R.isLoadable,k=R.RecoilLoadable,V=Object.freeze({__proto__:null,loadableWithValue:T,loadableWithError:b,loadableWithPromise:w,loadableLoading:A,loadableAll:N,isLoadable:E,RecoilLoadable:k});class L{constructor(e){u(this,"key",void 0),this.key=e}}class M extends L{}class U extends L{}var C={AbstractRecoilValue:L,RecoilState:M,RecoilValueReadOnly:U,isRecoilValue:function(e){return e instanceof M||e instanceof U}},B=C.AbstractRecoilValue,I=C.RecoilState,D=C.RecoilValueReadOnly,O=C.isRecoilValue,P=Object.freeze({__proto__:null,AbstractRecoilValue:B,RecoilState:I,RecoilValueReadOnly:D,isRecoilValue:O});const x=(new Map).set("recoil_hamt_2020",!0).set("recoil_sync_external_store",!0).set("recoil_suppress_rerender_in_callback",!0).set("recoil_memory_managament_2020",!0);function F(e){var t;return null!==(t=x.get(e))&&void 0!==t&&t}F.setPass=e=>{x.set(e,!0)},F.setFail=e=>{x.set(e,!1)},F.clear=()=>{x.clear()};var z=F,W=function(e,t){return function*(){let n=0;for(const o of e)yield t(o,n++)}()};class G{}const j=new G;class $ extends Error{constructor(e){super(`Tried to set the value of Recoil selector ${e} using an updater function, but it is an async selector in a pending or error state; this is not supported.`)}}const H=new Map,q=new Map;class K extends Error{}const Z=new Map;function Y(e){return Z.get(e)}var J,X,Q={nodes:H,recoilValues:q,registerNode:function(e){if(H.has(e.key)){const t=`Duplicate atom key "${e.key}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}H.set(e.key,e);const t=null==e.set?new P.RecoilValueReadOnly(e.key):new P.RecoilState(e.key);return q.set(e.key,t),t},getNode:function(e){const t=H.get(e);if(null==t)throw new K(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return H.get(e)},deleteNodeConfigIfPossible:function(e){var t;if(!z("recoil_memory_managament_2020"))return;const n=H.get(e);var o;null!=n&&null!==(t=n.shouldDeleteConfigOnRelease)&&void 0!==t&&t.call(n)&&(H.delete(e),null===(o=Y(e))||void 0===o||o(),Z.delete(e))},setConfigDeletionHandler:function(e,t){z("recoil_memory_managament_2020")&&(void 0===t?Z.delete(e):Z.set(e,t))},getConfigDeletionHandler:Y,recoilValuesForKeys:function(e){return W(e,(e=>c(q.get(e))))},NodeMissingError:K,DefaultValue:G,DEFAULT_VALUE:j,RecoilValueNotReady:$},ee=function(e,t){t()},te=(J=function(e){var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n={},o=Math.pow(2,5),r=o-1,a=o/2,s=o/4,i={},l=function(e){return function(){return e}},c=n.hash=function(e){var n=void 0===e?"undefined":t(e);if("number"===n)return e;"string"!==n&&(e+="");for(var o=0,r=0,a=e.length;r<a;++r)o=(o<<5)-o+e.charCodeAt(r)|0;return o},u=function(e,t){return t>>>e&r},d=function(e){return 1<<e},f=function(e,t){return n=e&t-1,n=(n=(858993459&(n-=n>>1&1431655765))+(n>>2&858993459))+(n>>4)&252645135,127&(n+=n>>8)+(n>>16);var n},h=function(e,t,n,o){var r=o;if(!e){var a=o.length;r=new Array(a);for(var s=0;s<a;++s)r[s]=o[s]}return r[t]=n,r},p=function(e,t,n){var o=n.length-1,r=0,a=0,s=n;if(e)r=a=t;else for(s=new Array(o);r<t;)s[a++]=n[r++];for(++r;r<=o;)s[a++]=n[r++];return e&&(s.length=o),s},y={__hamt_isEmpty:!0},v=function(e){return e===y||e&&e.__hamt_isEmpty},_=function(e,t,n,o){return{type:1,edit:e,hash:t,key:n,value:o,_modify:b}},S=function(e,t,n){return{type:2,edit:e,hash:t,children:n,_modify:w}},m=function(e,t,n){return{type:3,edit:e,mask:t,children:n,_modify:A}},g=function(e,t,n){return{type:4,edit:e,size:t,children:n,_modify:N}},R=function e(t,n,o,r,a,s){if(o===a)return S(t,o,[s,r]);var i=u(n,o),l=u(n,a);return m(t,d(i)|d(l),i===l?[e(t,n+5,o,r,a,s)]:i<l?[r,s]:[s,r])},T=function(e,t){return e===t.edit},b=function(e,t,n,o,r,a,s){if(t(a,this.key)){var l=o(this.value);return l===this.value?this:l===i?(--s.value,y):T(e,this)?(this.value=l,this):_(e,r,a,l)}var c=o();return c===i?this:(++s.value,R(e,n,this.hash,this,r,_(e,r,a,c)))},w=function(e,t,n,o,r,a,s){if(r===this.hash){var l=function(e,t,n,o,r,a,s,l){for(var c=r.length,u=0;u<c;++u){var d=r[u];if(n(s,d.key)){var f=d.value,y=a(f);return y===f?r:y===i?(--l.value,p(e,u,r)):h(e,u,_(t,o,s,y),r)}}var v=a();return v===i?r:(++l.value,h(e,c,_(t,o,s,v),r))}(T(e,this),e,t,this.hash,this.children,o,a,s);return l===this.children?this:l.length>1?S(e,this.hash,l):l[0]}var c=o();return c===i?this:(++s.value,R(e,n,this.hash,this,r,_(e,r,a,c)))},A=function(e,t,n,o,r,s,i){var l=this.mask,c=this.children,_=u(n,r),S=d(_),R=f(l,S),b=l&S,w=b?c[R]:y,A=w._modify(e,t,n+5,o,r,s,i);if(w===A)return this;var N,E=T(e,this),k=l,V=void 0;if(b&&v(A)){if(!(k&=~S))return y;if(c.length<=2&&((N=c[1^R])===y||1===N.type||2===N.type))return c[1^R];V=p(E,R,c)}else if(b||v(A))V=h(E,R,A,c);else{if(c.length>=a)return function(e,t,n,o,r){for(var a=[],s=o,i=0,l=0;s;++l)1&s&&(a[l]=r[i++]),s>>>=1;return a[t]=n,g(e,i+1,a)}(e,_,A,l,c);k|=S,V=function(e,t,n,o){var r=o.length;if(e){for(var a=r;a>=t;)o[a--]=o[a];return o[t]=n,o}for(var s=0,i=0,l=new Array(r+1);s<t;)l[i++]=o[s++];for(l[t]=n;s<r;)l[++i]=o[s++];return l}(E,R,A,c)}return E?(this.mask=k,this.children=V,this):m(e,k,V)},N=function(e,t,n,o,r,a,i){var l=this.size,c=this.children,d=u(n,r),f=c[d],p=(f||y)._modify(e,t,n+5,o,r,a,i);if(f===p)return this;var _=T(e,this),S=void 0;if(v(f)&&!v(p))++l,S=h(_,d,p,c);else if(!v(f)&&v(p)){if(--l<=s)return function(e,t,n,o){for(var r=new Array(t-1),a=0,s=0,i=0,l=o.length;i<l;++i)if(i!==n){var c=o[i];c&&!v(c)&&(r[a++]=c,s|=1<<i)}return m(e,s,r)}(e,l,d,c);S=h(_,d,y,c)}else S=h(_,d,p,c);return _?(this.size=l,this.children=S,this):g(e,l,S)};function E(e,t,n,o,r){this._editable=e,this._edit=t,this._config=n,this._root=o,this._size=r}y._modify=function(e,t,n,o,r,a,s){var l=o();return l===i?y:(++s.value,_(e,r,a,l))},E.prototype.setTree=function(e,t){return this._editable?(this._root=e,this._size=t,this):e===this._root?this:new E(this._editable,this._edit,this._config,e,t)};var k=n.tryGetHash=function(e,t,n,o){for(var r=o._root,a=0,s=o._config.keyEq;;)switch(r.type){case 1:return s(n,r.key)?r.value:e;case 2:if(t===r.hash)for(var i=r.children,l=0,c=i.length;l<c;++l){var h=i[l];if(s(n,h.key))return h.value}return e;case 3:var p=u(a,t),y=d(p);if(r.mask&y){r=r.children[f(r.mask,y)],a+=5;break}return e;case 4:if(r=r.children[u(a,t)]){a+=5;break}return e;default:return e}};E.prototype.tryGetHash=function(e,t,n){return k(e,t,n,this)};var V=n.tryGet=function(e,t,n){return k(e,n._config.hash(t),t,n)};E.prototype.tryGet=function(e,t){return V(e,t,this)};var L=n.getHash=function(e,t,n){return k(void 0,e,t,n)};E.prototype.getHash=function(e,t){return L(e,t,this)},n.get=function(e,t){return k(void 0,t._config.hash(e),e,t)},E.prototype.get=function(e,t){return V(t,e,this)};var M=n.has=function(e,t,n){return k(i,e,t,n)!==i};E.prototype.hasHash=function(e,t){return M(e,t,this)};var U=n.has=function(e,t){return M(t._config.hash(e),e,t)};E.prototype.has=function(e){return U(e,this)};var C=function(e,t){return e===t};n.make=function(e){return new E(0,0,{keyEq:e&&e.keyEq||C,hash:e&&e.hash||c},y,0)},n.empty=n.make();var B=n.isEmpty=function(e){return e&&!!v(e._root)};E.prototype.isEmpty=function(){return B(this)};var I=n.modifyHash=function(e,t,n,o){var r={value:o._size},a=o._root._modify(o._editable?o._edit:NaN,o._config.keyEq,0,e,t,n,r);return o.setTree(a,r.value)};E.prototype.modifyHash=function(e,t,n){return I(n,e,t,this)};var D=n.modify=function(e,t,n){return I(e,n._config.hash(t),t,n)};E.prototype.modify=function(e,t){return D(t,e,this)};var O=n.setHash=function(e,t,n,o){return I(l(n),e,t,o)};E.prototype.setHash=function(e,t,n){return O(e,t,n,this)};var P=n.set=function(e,t,n){return O(n._config.hash(e),e,t,n)};E.prototype.set=function(e,t){return P(e,t,this)};var x=l(i),F=n.removeHash=function(e,t,n){return I(x,e,t,n)};E.prototype.removeHash=E.prototype.deleteHash=function(e,t){return F(e,t,this)};var z=n.remove=function(e,t){return F(t._config.hash(e),e,t)};E.prototype.remove=E.prototype.delete=function(e){return z(e,this)};var W=n.beginMutation=function(e){return new E(e._editable+1,e._edit+1,e._config,e._root,e._size)};E.prototype.beginMutation=function(){return W(this)};var G=n.endMutation=function(e){return e._editable=e._editable&&e._editable-1,e};E.prototype.endMutation=function(){return G(this)};var j=n.mutate=function(e,t){var n=W(t);return e(n),G(n)};E.prototype.mutate=function(e){return j(e,this)};var $=function(e){return e&&H(e[0],e[1],e[2],e[3],e[4])},H=function(e,t,n,o,r){for(;n<e;){var a=t[n++];if(a&&!v(a))return q(a,o,[e,t,n,o,r])}return $(r)},q=function(e,t,n){switch(e.type){case 1:return{value:t(e),rest:n};case 2:case 4:case 3:var o=e.children;return H(o.length,o,0,t,n);default:return $(n)}},K={done:!0};function Z(e){this.v=e}Z.prototype.next=function(){if(!this.v)return K;var e=this.v;return this.v=$(e.rest),e},Z.prototype[Symbol.iterator]=function(){return this};var Y=function(e,t){return new Z(q(e._root,t))},J=function(e){return[e.key,e.value]},X=n.entries=function(e){return Y(e,J)};E.prototype.entries=E.prototype[Symbol.iterator]=function(){return X(this)};var Q=function(e){return e.key},ee=n.keys=function(e){return Y(e,Q)};E.prototype.keys=function(){return ee(this)};var te=function(e){return e.value},ne=n.values=E.prototype.values=function(e){return Y(e,te)};E.prototype.values=function(){return ne(this)};var oe=n.fold=function(e,t,n){var o=n._root;if(1===o.type)return e(t,o.value,o.key);for(var r=[o.children],a=void 0;a=r.pop();)for(var s=0,i=a.length;s<i;){var l=a[s++];l&&l.type&&(1===l.type?t=e(t,l.value,l.key):r.push(l.children))}return t};E.prototype.fold=function(e,t){return oe(e,t,this)};var re=n.forEach=function(e,t){return oe((function(n,o,r){return e(o,r,t)}),null,t)};E.prototype.forEach=function(e){return re(e,this)};var ae=n.count=function(e){return e._size};E.prototype.count=function(){return ae(this)},Object.defineProperty(E.prototype,"size",{get:E.prototype.count}),e.exports?e.exports=n:(void 0).hamt=n},J(X={exports:{}}),X.exports);class ne{constructor(e){u(this,"_map",void 0),this._map=new Map(null==e?void 0:e.entries())}keys(){return this._map.keys()}entries(){return this._map.entries()}get(e){return this._map.get(e)}has(e){return this._map.has(e)}set(e,t){return this._map.set(e,t),this}delete(e){return this._map.delete(e),this}clone(){return re(this)}toMap(){return new Map(this._map)}}class oe{constructor(e){if(u(this,"_hamt",te.empty.beginMutation()),e instanceof oe){const t=e._hamt.endMutation();e._hamt=t.beginMutation(),this._hamt=t.beginMutation()}else if(e)for(const[t,n]of e.entries())this._hamt.set(t,n)}keys(){return this._hamt.keys()}entries(){return this._hamt.entries()}get(e){return this._hamt.get(e)}has(e){return this._hamt.has(e)}set(e,t){return this._hamt.set(e,t),this}delete(e){return this._hamt.delete(e),this}clone(){return re(this)}toMap(){return new Map(this._hamt)}}function re(e){return z("recoil_hamt_2020")?new oe(e):new ne(e)}var ae=re,se=Object.freeze({__proto__:null,persistentMap:ae}),ie=function(e,...t){const n=new Set;e:for(const o of e){for(const e of t)if(e.has(o))continue e;n.add(o)}return n},le=function(e,t){const n=new Map;return e.forEach(((e,o)=>{n.set(o,t(e,o))})),n};function ce(e,t,n){const{nodeDeps:o,nodeToNodeSubscriptions:r}=t;e.forEach(((e,t)=>{const a=o.get(t);a&&n&&a!==n.nodeDeps.get(t)||(o.set(t,new Set(e)),(null==a?e:ie(e,a)).forEach((e=>{r.has(e)||r.set(e,new Set),c(r.get(e)).add(t)})),a&&ie(a,e).forEach((e=>{if(!r.has(e))return;const n=c(r.get(e));n.delete(t),0===n.size&&r.delete(e)})))}))}var ue={addToDependencyMap:function(e,t,n){n.has(e)||n.set(e,new Set),c(n.get(e)).add(t)},cloneGraph:function(e){return{nodeDeps:le(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:le(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},mergeDepsIntoDependencyMap:function(e,t){e.forEach(((e,n)=>{t.has(n)||t.set(n,new Set);const o=c(t.get(n));e.forEach((e=>o.add(e)))}))},saveDependencyMapToStore:function(e,t,n){var o,r,a,s;const i=t.getState();n!==i.currentTree.version&&n!==(null===(o=i.nextTree)||void 0===o?void 0:o.version)&&(null===(r=i.previousTree)||void 0===r||r.version);const l=t.getGraph(n);if(ce(e,l),n===(null===(a=i.previousTree)||void 0===a?void 0:a.version)&&ce(e,t.getGraph(i.currentTree.version),l),n===(null===(s=i.previousTree)||void 0===s?void 0:s.version)||n===i.currentTree.version){var c;const n=null===(c=i.nextTree)||void 0===c?void 0:c.version;void 0!==n&&ce(e,t.getGraph(n),l)}}};let de=0,fe=0,he=0;var pe={getNextTreeStateVersion:()=>de++,getNextStoreID:()=>fe++,getNextComponentID:()=>he++};const{persistentMap:ye}=se,{graph:ve}=ue,{getNextTreeStateVersion:_e}=pe;function Se(){const e=_e();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:ye(),nonvalidatedAtoms:ye()}}var me={makeEmptyTreeState:Se,makeEmptyStoreState:function(){const e=Se();return{currentTree:e,nextTree:null,previousTree:null,commitDepth:0,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,ve()),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map}},getNextTreeStateVersion:_e};class ge{}var Re={RetentionZone:ge,retentionZone:function(){return new ge}},Te={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const o=new Map(e);return o.set(t,n),o},mapByUpdatingInMap:function(e,t,n){const o=new Map(e);return o.set(t,n(o.get(t))),o},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}},be=function*(e,t){let n=0;for(const o of e)t(o,n++)&&(yield o)},we=function(e,t){return new Proxy(e,{get:(e,n)=>(!(n in e)&&n in t&&(e[n]=t[n]()),e[n]),ownKeys:e=>Object.keys(e)})};const{getNode:Ae,getNodeMaybe:Ne,recoilValuesForKeys:Ee}=Q,{RetentionZone:ke}=Re,{setByAddingToSet:Ve}=Te,Le=Object.freeze(new Set);class Me extends Error{}function Ue(e,t,n,o){const r=e.getState();if(r.nodeCleanupFunctions.has(n))return;const a=Ae(n),s=function(e,t,n){if(!z("recoil_memory_managament_2020"))return()=>{};const{nodesRetainedByZone:o}=e.getState().retention;function r(e){let n=o.get(e);n||o.set(e,n=new Set),n.add(t)}if(n instanceof ke)r(n);else if(Array.isArray(n))for(const e of n)r(e);return()=>{if(!z("recoil_memory_managament_2020"))return;const{retention:o}=e.getState();function r(e){const n=o.nodesRetainedByZone.get(e);null==n||n.delete(t),n&&0===n.size&&o.nodesRetainedByZone.delete(e)}if(n instanceof ke)r(n);else if(Array.isArray(n))for(const e of n)r(e)}}(e,n,a.retainedBy),i=a.init(e,t,o);r.nodeCleanupFunctions.set(n,(()=>{i(),s()}))}function Ce(e,t,n){return Ae(n).peek(e,t)}function Be(e,t,n){const o=new Set,r=Array.from(n),a=e.getGraph(t.version);for(let e=r.pop();e;e=r.pop()){var s;o.add(e);const t=null!==(s=a.nodeToNodeSubscriptions.get(e))&&void 0!==s?s:Le;for(const e of t)o.has(e)||r.push(e)}return o}var Ie,De,Oe,Pe={getNodeLoadable:function(e,t,n){return Ue(e,t,n,"get"),Ae(n).get(e,t)},peekNodeLoadable:Ce,setNodeValue:function(e,t,n,o){const r=Ae(n);if(null==r.set)throw new Me(`Attempt to set read-only RecoilValue: ${n}`);const a=r.set;return Ue(e,t,n,"set"),a(e,t,o)},initializeNode:function(e,t,n){Ue(e,e.getState().currentTree,t,n)},cleanUpNode:function(e,t){var n;const o=e.getState();null===(n=o.nodeCleanupFunctions.get(t))||void 0===n||n(),o.nodeCleanupFunctions.delete(t)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var o;const r=Ne(t);return null==r||null===(o=r.invalidate)||void 0===o||o.call(r,e),{...e,atomValues:e.atomValues.clone().delete(t),nonvalidatedAtoms:e.nonvalidatedAtoms.clone().set(t,n),dirtyAtoms:Ve(e.dirtyAtoms,t)}},peekNodeInfo:function(e,t,n){const o=e.getState(),r=e.getGraph(t.version),a=Ae(n).nodeType;return we({type:a},{loadable:()=>Ce(e,t,n),isActive:()=>o.knownAtoms.has(n)||o.knownSelectors.has(n),isSet:()=>"selector"!==a&&t.atomValues.has(n),isModified:()=>t.dirtyAtoms.has(n),deps:()=>{var e;return Ee(null!==(e=r.nodeDeps.get(n))&&void 0!==e?e:[])},subscribers:()=>{var r,a;return{nodes:Ee(be(Be(e,t,new Set([n])),(e=>e!==n))),components:W(null!==(r=null===(a=o.nodeToComponentSubscriptions.get(n))||void 0===a?void 0:a.values())&&void 0!==r?r:[],(([e])=>({name:e})))}}})},getDownstreamNodes:Be};const xe=null!==(Ie=r().createMutableSource)&&void 0!==Ie?Ie:r().unstable_createMutableSource,Fe=null!==(De=r().useMutableSource)&&void 0!==De?De:r().unstable_useMutableSource,ze=null!==(Oe=r().useSyncExternalStore)&&void 0!==Oe?Oe:r().unstable_useSyncExternalStore;var We={createMutableSource:xe,useMutableSource:Fe,useSyncExternalStore:ze,reactMode:function(){return z("recoil_transition_support")?{mode:"TRANSITION_SUPPORT",early:!0,concurrent:!0}:z("recoil_sync_external_store")&&null!=ze?{mode:"SYNC_EXTERNAL_STORE",early:!0,concurrent:!1}:z("recoil_mutable_source")&&null!=Fe&&"undefined"!=typeof window&&!window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE?z("recoil_suppress_rerender_in_callback")?{mode:"MUTABLE_SOURCE",early:!0,concurrent:!0}:{mode:"MUTABLE_SOURCE",early:!1,concurrent:!1}:z("recoil_suppress_rerender_in_callback")?{mode:"LEGACY",early:!0,concurrent:!1}:{mode:"LEGACY",early:!1,concurrent:!1}}};const{getDownstreamNodes:Ge,getNodeLoadable:je,setNodeValue:$e}=Pe,{getNextComponentID:He}=pe,{getNode:qe,getNodeMaybe:Ke}=Q,{DefaultValue:Ze,RecoilValueNotReady:Ye}=Q,{reactMode:Je}=We,{AbstractRecoilValue:Xe,RecoilState:Qe,RecoilValueReadOnly:et,isRecoilValue:tt}=P;function nt(e,t,n){if("set"===n.type){const{recoilValue:o,valueOrUpdater:r}=n,a=function(e,t,{key:n},o){if("function"==typeof o){const r=je(e,t,n);if("loading"===r.state)throw new Ye(n);if("hasError"===r.state)throw r.contents;return o(r.contents)}return o}(e,t,o,r),s=$e(e,t,o.key,a);for(const[e,n]of s.entries())ot(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:o}=n;ot(t,e,o)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var o;const{recoilValue:{key:e},unvalidatedValue:r}=n,a=Ke(e);null==a||null===(o=a.invalidate)||void 0===o||o.call(a,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,r),t.dirtyAtoms.add(e)}else n.type}function ot(e,t,n){"hasValue"===n.state&&n.contents instanceof Ze?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function rt(e,t){e.replaceState((n=>{const o=it(n);for(const n of t)nt(e,o,n);return lt(e,o),o}))}function at(e,t){if(st.length){const n=st[st.length-1];let o=n.get(e);o||n.set(e,o=[]),o.push(t)}else rt(e,[t])}const st=[];function it(e){return{...e,atomValues:e.atomValues.clone(),nonvalidatedAtoms:e.nonvalidatedAtoms.clone(),dirtyAtoms:new Set(e.dirtyAtoms)}}function lt(e,t){const n=Ge(e,t,t.dirtyAtoms);for(const e of n){var o,r;null===(o=Ke(e))||void 0===o||null===(r=o.invalidate)||void 0===r||r.call(o,t)}}function ct(e,t,n){at(e,{type:"set",recoilValue:t,valueOrUpdater:n})}var ut={RecoilValueReadOnly:et,AbstractRecoilValue:Xe,RecoilState:Qe,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var o,r;const a=e.getState();n.version!==a.currentTree.version&&n.version!==(null===(o=a.nextTree)||void 0===o?void 0:o.version)&&(n.version,null===(r=a.previousTree)||void 0===r||r.version);const s=je(e,n,t);return"loading"===s.state&&s.contents.catch((()=>{})),s},setRecoilValue:ct,setRecoilValueLoadable:function(e,t,n){if(n instanceof Ze)return ct(e,t,n);at(e,{type:"setLoadable",recoilValue:t,loadable:n})},markRecoilValueModified:function(e,t){at(e,{type:"markModified",recoilValue:t})},setUnvalidatedRecoilValue:function(e,t,n){at(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n})},subscribeToRecoilValue:function(e,{key:t},n,o=null){const r=He(),a=e.getState();a.nodeToComponentSubscriptions.has(t)||a.nodeToComponentSubscriptions.set(t,new Map),c(a.nodeToComponentSubscriptions.get(t)).set(r,[null!=o?o:"<not captured>",n]);const s=Je();if(s.early&&("LEGACY"===s.mode||"MUTABLE_SOURCE"===s.mode)){const o=e.getState().nextTree;o&&o.dirtyAtoms.has(t)&&n(o)}return{release:()=>{const n=e.getState(),o=n.nodeToComponentSubscriptions.get(t);void 0!==o&&o.has(r)&&(o.delete(r),0===o.size&&n.nodeToComponentSubscriptions.delete(t))}}},isRecoilValue:tt,applyAtomValueWrites:function(e,t){const n=e.clone();return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof Ze?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return st.push(e),()=>{for(const[t,n]of e)rt(t,n);st.pop()}},writeLoadableToTreeState:ot,invalidateDownstreams:lt,copyTreeState:it,refreshRecoilValue:function(e,t){var n;const{currentTree:o}=e.getState(),r=qe(t.key);null===(n=r.clearCache)||void 0===n||n.call(r,e,o)},invalidateDownstreams_FOR_TESTING:lt},dt=function(e,t,n){const o=e.entries();let r=o.next();for(;!r.done;){const a=r.value;if(t.call(n,a[1],a[0],e))return!0;r=o.next()}return!1};const{cleanUpNode:ft}=Pe,{deleteNodeConfigIfPossible:ht,getNode:pt}=Q,{RetentionZone:yt}=Re,vt=new Set;function _t(e,t){const n=e.getState(),o=n.currentTree;if(n.nextTree)return;const r=new Set;for(const e of t)if(e instanceof yt)for(const t of mt(n,e))r.add(t);else r.add(e);const a=function(e,t){const n=e.getState(),o=n.currentTree,r=e.getGraph(o.version),a=new Set,s=new Set;return function t(i){const l=new Set,u=function(e,t,n,o,r){const a=e.getGraph(t.version),s=[],i=new Set;for(;n.size>0;)l(c(n.values().next().value));return s;function l(e){if(o.has(e)||r.has(e))return void n.delete(e);if(i.has(e))return;const t=a.nodeToNodeSubscriptions.get(e);if(t)for(const e of t)l(e);i.add(e),n.delete(e),s.push(e)}}(e,o,i,a,s);for(const e of u){var d;if("recoilRoot"===pt(e).retainedBy){s.add(e);continue}if((null!==(d=n.retention.referenceCounts.get(e))&&void 0!==d?d:0)>0){s.add(e);continue}if(gt(e).some((e=>n.retention.referenceCounts.get(e)))){s.add(e);continue}const t=r.nodeToNodeSubscriptions.get(e);t&&dt(t,(e=>s.has(e)))?s.add(e):(a.add(e),l.add(e))}const f=new Set;for(const e of l)for(const t of null!==(h=r.nodeDeps.get(e))&&void 0!==h?h:vt){var h;a.has(t)||f.add(t)}f.size&&t(f)}(t),a}(e,r);for(const t of a)St(e,o,t)}function St(e,t,n){if(!z("recoil_memory_managament_2020"))return;ft(e,n);const o=e.getState();o.knownAtoms.delete(n),o.knownSelectors.delete(n),o.nodeTransactionSubscriptions.delete(n),o.retention.referenceCounts.delete(n);const r=gt(n);for(const e of r){var a;null===(a=o.retention.nodesRetainedByZone.get(e))||void 0===a||a.delete(n)}t.atomValues.delete(n),t.dirtyAtoms.delete(n),t.nonvalidatedAtoms.delete(n);const s=o.graphsByVersion.get(t.version);if(s){const e=s.nodeDeps.get(n);if(void 0!==e){s.nodeDeps.delete(n);for(const t of e){var i;null===(i=s.nodeToNodeSubscriptions.get(t))||void 0===i||i.delete(n)}}s.nodeToNodeSubscriptions.delete(n)}ht(n)}function mt(e,t){var n;return null!==(n=e.retention.nodesRetainedByZone.get(t))&&void 0!==n?n:vt}function gt(e){const t=pt(e).retainedBy;return void 0===t||"components"===t||"recoilRoot"===t?[]:t instanceof yt?[t]:t}function Rt(e,t){z("recoil_memory_managament_2020")&&(e.getState().retention.referenceCounts.delete(t),function(e,t){const n=e.getState();n.nextTree?n.retention.retainablesToCheckForRelease.add(t):_t(e,new Set([t]))}(e,t))}var Tt={SUSPENSE_TIMEOUT_MS:12e4,updateRetainCount:function(e,t,n){var o;if(!z("recoil_memory_managament_2020"))return;const r=e.getState().retention.referenceCounts,a=(null!==(o=r.get(t))&&void 0!==o?o:0)+n;0===a?Rt(e,t):r.set(t,a)},updateRetainCountToZero:Rt,releaseScheduledRetainablesNow:function(e){if(!z("recoil_memory_managament_2020"))return;const t=e.getState();_t(e,t.retention.retainablesToCheckForRelease),t.retention.retainablesToCheckForRelease.clear()},retainedByOptionWithDefault:function(e){return void 0===e?"recoilRoot":e}};const{unstable_batchedUpdates:bt}=s();var wt={unstable_batchedUpdates:bt};const{unstable_batchedUpdates:At}=wt;var Nt={unstable_batchedUpdates:At};const{batchStart:Et}=ut,{unstable_batchedUpdates:kt}=Nt;let Vt=kt;var Lt={getBatcher:()=>Vt,setBatcher:e=>{Vt=e},batchUpdates:e=>{Vt((()=>{let t=()=>{};try{t=Et(),e()}finally{t()}}))}},Mt={isSSR:"undefined"==typeof window,isReactNative:"undefined"!=typeof navigator&&"ReactNative"===navigator.product},Ut={memoizeWithArgsHash:function(e,t){let n;return(...o)=>{n||(n={});const r=t(...o);return Object.hasOwnProperty.call(n,r)||(n[r]=e.apply(this,o)),n[r]}},memoizeOneWithArgsHash:function(e,t){let n,o;return(...r)=>{const a=t(...r);return n===a||(n=a,o=e.apply(this,r)),o}},memoizeOneWithArgsHashAndInvalidation:function(e,t){let n,o;return[(...r)=>{const a=t(...r);return n===a||(n=a,o=e.apply(this,r)),o},()=>{n=null}]}};const{batchUpdates:Ct}=Lt,{initializeNode:Bt,peekNodeInfo:It}=Pe,{graph:Dt}=ue,{getNextStoreID:Ot}=pe,{DEFAULT_VALUE:Pt,recoilValues:xt,recoilValuesForKeys:Ft}=Q,{AbstractRecoilValue:zt,getRecoilValueAsLoadable:Wt,setRecoilValue:Gt,setUnvalidatedRecoilValue:jt}=ut,{updateRetainCount:$t}=Tt,{getNextTreeStateVersion:Ht,makeEmptyStoreState:qt}=me,{isSSR:Kt}=Mt,{memoizeOneWithArgsHashAndInvalidation:Zt}=Ut;class Yt{constructor(e){u(this,"_store",void 0),u(this,"_refCount",1),u(this,"getLoadable",(e=>(this.checkRefCount_INTERNAL(),Wt(this._store,e)))),u(this,"getPromise",(e=>(this.checkRefCount_INTERNAL(),this.getLoadable(e).toPromise()))),u(this,"getNodes_UNSTABLE",(e=>{if(this.checkRefCount_INTERNAL(),!0===(null==e?void 0:e.isModified)){if(!1===(null==e?void 0:e.isInitialized))return[];const t=this._store.getState().currentTree;return Ft(t.dirtyAtoms)}const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?xt.values():!0===e.isInitialized?Ft(function*(e){for(const t of e)for(const e of t)yield e}([this._store.getState().knownAtoms,this._store.getState().knownSelectors])):be(xt.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),u(this,"getInfo_UNSTABLE",(({key:e})=>(this.checkRefCount_INTERNAL(),It(this._store,this._store.getState().currentTree,e)))),u(this,"map",(e=>{this.checkRefCount_INTERNAL();const t=new en(this,Ct);return e(t),t})),u(this,"asyncMap",(async e=>{this.checkRefCount_INTERNAL();const t=new en(this,Ct);return t.retain(),await e(t),t.autoRelease_INTERNAL(),t})),this._store={storeID:Ot(),getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return c(n.get(t));const o=Dt();return n.set(t,o),o},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw i("Cannot subscribe to Snapshots")}};for(const e of this._store.getState().knownAtoms)Bt(this._store,e,"get"),$t(this._store,e,1);this.autoRelease_INTERNAL()}retain(){this._refCount,this._refCount++;let e=!1;return()=>{e||(e=!0,this._release())}}autoRelease_INTERNAL(){Kt||window.setTimeout((()=>this._release()),0)}_release(){if(this._refCount--,0===this._refCount){if(this._store.getState().nodeCleanupFunctions.forEach((e=>e())),this._store.getState().nodeCleanupFunctions.clear(),!z("recoil_memory_managament_2020"))return}else this._refCount}isRetained(){return this._refCount>0}checkRefCount_INTERNAL(){z("recoil_memory_managament_2020")&&this._refCount}getStore_INTERNAL(){return this.checkRefCount_INTERNAL(),this._store}getID(){return this.checkRefCount_INTERNAL(),this._store.getState().currentTree.stateID}}function Jt(e,t,n=!1){const o=e.getState(),r=n?Ht():t.version;return{currentTree:n?{version:r,stateID:r,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:t.atomValues.clone(),nonvalidatedAtoms:t.nonvalidatedAtoms.clone()}:t,commitDepth:0,nextTree:null,previousTree:null,knownAtoms:new Set(o.knownAtoms),knownSelectors:new Set(o.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(r,e.getGraph(t.version)),retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map(W(o.nodeCleanupFunctions.entries(),(([e])=>[e,()=>{}])))}}const[Xt,Qt]=Zt(((e,t)=>{const n=e.getState(),o="current"===t?n.currentTree:c(n.previousTree);return new Yt(Jt(e,o))}),((e,t)=>{var n;return String(t)+String(e.storeID)+String(e.getState().currentTree.version)+String(null===(n=e.getState().previousTree)||void 0===n?void 0:n.version)}));class en extends Yt{constructor(e,t){super(Jt(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0)),u(this,"_batch",void 0),u(this,"set",((e,t)=>{this.checkRefCount_INTERNAL();const n=this.getStore_INTERNAL();this._batch((()=>{$t(n,e.key,1),Gt(this.getStore_INTERNAL(),e,t)}))})),u(this,"reset",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();this._batch((()=>{$t(t,e.key,1),Gt(this.getStore_INTERNAL(),e,Pt)}))})),u(this,"setUnvalidatedAtomValues_DEPRECATED",(e=>{this.checkRefCount_INTERNAL();const t=this.getStore_INTERNAL();Ct((()=>{for(const[n,o]of e.entries())$t(t,n,1),jt(t,new zt(n),o)}))})),this._batch=t}}var tn={Snapshot:Yt,MutableSnapshot:en,freshSnapshot:function(e){const t=new Yt(qt());return null!=e?t.map(e):t},cloneSnapshot:function(e,t="current"){const n=Xt(e,t);return n.isRetained()?n:(Qt(),Xt(e,t))}},nn=tn.Snapshot,on=tn.MutableSnapshot,rn=tn.freshSnapshot,an=tn.cloneSnapshot,sn=Object.freeze({__proto__:null,Snapshot:nn,MutableSnapshot:on,freshSnapshot:rn,cloneSnapshot:an}),ln=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useRef:cn}=r();var un=function(e){const t=cn(e);return t.current===e&&"function"==typeof e&&(t.current=e()),t};const{getNextTreeStateVersion:dn,makeEmptyStoreState:fn}=me,{cleanUpNode:hn,getDownstreamNodes:pn,initializeNode:yn,setNodeValue:vn,setUnvalidatedAtomValue_DEPRECATED:_n}=Pe,{graph:Sn}=ue,{cloneGraph:mn}=ue,{getNextStoreID:gn}=pe,{createMutableSource:Rn,reactMode:Tn}=We,{applyAtomValueWrites:bn}=ut,{releaseScheduledRetainablesNow:wn}=Tt,{freshSnapshot:An}=sn,{useCallback:Nn,useContext:En,useEffect:kn,useMemo:Vn,useRef:Ln,useState:Mn}=r();function Un(){throw i("This component must be used inside a <RecoilRoot> component.")}const Cn=Object.freeze({storeID:gn(),getState:Un,replaceState:Un,getGraph:Un,subscribeToTransactions:Un,addTransactionMetadata:Un});let Bn=!1;function In(e){if(Bn)throw i("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");const t=e.getState();if(null===t.nextTree){z("recoil_memory_managament_2020")&&z("recoil_release_on_cascading_update_killswitch_2021")&&t.commitDepth>0&&wn(e);const n=t.currentTree.version,o=dn();t.nextTree={...t.currentTree,version:o,stateID:o,dirtyAtoms:new Set,transactionMetadata:{}},t.graphsByVersion.set(o,mn(c(t.graphsByVersion.get(n))))}}const Dn=r().createContext({current:Cn}),On=()=>En(Dn),Pn=r().createContext(null);function xn(e,t,n){const o=pn(e,n,n.dirtyAtoms);for(const e of o){const o=t.nodeToComponentSubscriptions.get(e);if(o)for(const[e,[t,r]]of o)r(n)}}function Fn(e){const t=e.getState(),n=t.currentTree,o=n.dirtyAtoms;if(o.size){for(const[n,r]of t.nodeTransactionSubscriptions)if(o.has(n))for(const[t,n]of r)n(e);for(const[n,o]of t.transactionSubscriptions)o(e);(!Tn().early||t.suspendedComponentResolvers.size>0)&&(xn(e,t,n),t.suspendedComponentResolvers.forEach((e=>e())),t.suspendedComponentResolvers.clear())}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function zn({setNotifyBatcherOfChange:e}){const t=On(),[,n]=Mn([]);return e((()=>n({}))),kn((()=>(e((()=>n({}))),()=>{e((()=>{}))})),[e]),kn((()=>{ee("Batcher",(()=>{!function(e){const t=e.getState();t.commitDepth++;try{const{nextTree:n}=t;if(null===n)return;t.previousTree=t.currentTree,t.currentTree=n,t.nextTree=null,Fn(e),null!=t.previousTree&&t.graphsByVersion.delete(t.previousTree.version),t.previousTree=null,z("recoil_memory_managament_2020")&&wn(e)}finally{t.commitDepth--}}(t.current)}))})),null}let Wn=0;function Gn({initializeState_DEPRECATED:e,initializeState:t,store_INTERNAL:n,children:o}){let a;const s=e=>{const t=a.current.graphsByVersion;if(t.has(e))return c(t.get(e));const n=Sn();return t.set(e,n),n},i=(e,t)=>{if(null==t){const{transactionSubscriptions:t}=h.current.getState(),n=Wn++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=h.current.getState();n.has(t)||n.set(t,new Map);const o=Wn++;return c(n.get(t)).set(o,e),{release:()=>{const e=n.get(t);e&&(e.delete(o),0===e.size&&n.delete(t))}}}},l=e=>{In(h.current);for(const t of Object.keys(e))c(h.current.getState().nextTree).transactionMetadata[t]=e[t]},u=e=>{In(h.current);const t=c(a.current.nextTree);let n;try{Bn=!0,n=e(t)}finally{Bn=!1}n!==t&&(a.current.nextTree=n,Tn().early&&xn(h.current,a.current,n),c(d.current)())},d=Ln(null),f=Nn((e=>{d.current=e}),[d]),h=un((()=>null!=n?n:{storeID:gn(),getState:()=>a.current,replaceState:u,getGraph:s,subscribeToTransactions:i,addTransactionMetadata:l}));null!=n&&(h.current=n),a=un((()=>null!=e?function(e,t){const n=fn();return t({set:(t,o)=>{const r=n.currentTree,a=vn(e,r,t.key,o),s=new Set(a.keys()),i=r.nonvalidatedAtoms.clone();for(const e of s)i.delete(e);n.currentTree={...r,dirtyAtoms:ln(r.dirtyAtoms,s),atomValues:bn(r.atomValues,a),nonvalidatedAtoms:i}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=_n(n.currentTree,t,e)}))}}),n}(h.current,e):null!=t?function(e){const t=An().map(e),n=t.getStore_INTERNAL().getState();return t.retain(),n.nodeCleanupFunctions.forEach((e=>e())),n.nodeCleanupFunctions.clear(),n}(t):fn()));const p=Vn((()=>null==Rn?void 0:Rn(a,(()=>a.current.currentTree.version))),[a]);return kn((()=>{const e=h.current;for(const t of new Set(e.getState().knownAtoms))yn(e,t,"get");return()=>{for(const t of e.getState().knownAtoms)hn(e,t)}}),[h]),r().createElement(Dn.Provider,{value:h},r().createElement(Pn.Provider,{value:p},r().createElement(zn,{setNotifyBatcherOfChange:f}),o))}var jn={RecoilRoot:function(e){const{override:t,...n}=e,o=On();return!1===t&&o.current!==Cn?e.children:r().createElement(Gn,n)},useStoreRef:On,useRecoilMutableSource:function(){const e=En(Pn);return e},useRecoilStoreID:function(){return On().current.storeID},notifyComponents_FOR_TESTING:xn,sendEndOfBatchNotifications_FOR_TESTING:Fn};const{useEffect:$n,useRef:Hn}=r();var qn=function(e){const t=Hn();return $n((()=>{t.current=e})),t.current};const{useStoreRef:Kn}=jn,{SUSPENSE_TIMEOUT_MS:Zn}=Tt,{updateRetainCount:Yn}=Tt,{RetentionZone:Jn}=Re,{useEffect:Xn,useRef:Qn}=r(),{isSSR:eo}=Mt;var to=function(e){if(z("recoil_memory_managament_2020"))return function(e){const t=(Array.isArray(e)?e:[e]).map((e=>e instanceof Jn?e:e.key)),n=Kn();Xn((()=>{if(!z("recoil_memory_managament_2020"))return;const e=n.current;if(o.current&&!eo)window.clearTimeout(o.current),o.current=null;else for(const n of t)Yn(e,n,1);return()=>{for(const n of t)Yn(e,n,-1)}}),[n,...t]);const o=Qn(),r=qn(t);if(!(eo||void 0!==r&&function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0,o=e.length;n<o;n++)if(e[n]!==t[n])return!1;return!0}(r,t))){const e=n.current;for(const n of t)Yn(e,n,1);if(r)for(const t of r)Yn(e,t,-1);o.current&&window.clearTimeout(o.current),o.current=window.setTimeout((()=>{o.current=null;for(const n of t)Yn(e,n,-1)}),Zn)}}(e)};const{useRef:no}=r();var oo=function(){return no(),"<component name not available>"};const{batchUpdates:ro}=Lt,{DEFAULT_VALUE:ao}=Q,{reactMode:so,useMutableSource:io,useSyncExternalStore:lo}=We,{useRecoilMutableSource:co,useStoreRef:uo}=jn,{isRecoilValue:fo}=P,{AbstractRecoilValue:ho,getRecoilValueAsLoadable:po,setRecoilValue:yo,setUnvalidatedRecoilValue:vo,subscribeToRecoilValue:_o}=ut,{useCallback:So,useEffect:mo,useMemo:go,useRef:Ro,useState:To}=r(),{setByAddingToSet:bo}=Te;function wo(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:i(`Invalid value of loadable atom "${t.key}"`)}function Ao(e){const t=uo(),n=oo(),o=So((()=>{var n;const o=t.current,r=o.getState(),a=so().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return{loadable:po(o,e,a),key:e.key}}),[t,e]),r=So((e=>{let t;return()=>{var n,o;const r=e();return null!==(n=t)&&void 0!==n&&n.loadable.is(r.loadable)&&(null===(o=t)||void 0===o?void 0:o.key)===r.key?t:(t=r,r)}}),[]),a=go((()=>r(o)),[o,r]),s=So((o=>{const r=t.current;return _o(r,e,o,n).release}),[t,e,n]);return lo(s,a,a).loadable}function No(e){const t=uo(),n=So((()=>{var n;const o=t.current,r=o.getState(),a=so().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return po(o,e,a)}),[t,e]),o=So((()=>n()),[n]),r=oo(),a=So(((o,a)=>{const s=t.current;return _o(s,e,(()=>{if(!z("recoil_suppress_rerender_in_callback"))return a();const e=n();c.current.is(e)||a(),c.current=e}),r).release}),[t,e,r,n]),s=co();if(null==s)throw i("Recoil hooks must be used in components contained within a <RecoilRoot> component.");const l=io(s,o,a),c=Ro(l);return mo((()=>{c.current=l})),l}function Eo(e){const t=uo(),n=oo(),o=So((()=>{var n;const o=t.current,r=o.getState(),a=so().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return po(o,e,a)}),[t,e]),r=So((()=>({loadable:o(),key:e.key})),[o,e.key]),a=So((e=>{const t=r();return e.loadable.is(t.loadable)&&e.key===t.key?e:t}),[r]);mo((()=>{const o=_o(t.current,e,(e=>{i(a)}),n);return i(a),o.release}),[n,e,t,a]);const[s,i]=To(r);return s.key!==e.key?r().loadable:s.loadable}function ko(e){const t=uo(),[,n]=To([]),o=oo(),r=So((()=>{var n;const o=t.current,r=o.getState(),a=so().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree;return po(o,e,a)}),[t,e]),a=r(),s=Ro(a);return mo((()=>{s.current=a})),mo((()=>{const a=t.current,i=a.getState(),l=_o(a,e,(e=>{var t;if(!z("recoil_suppress_rerender_in_callback"))return n([]);const o=r();null!==(t=s.current)&&void 0!==t&&t.is(o)||n(o),s.current=o}),o);if(i.nextTree)a.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{s.current=null,n([])}));else{var c;if(!z("recoil_suppress_rerender_in_callback"))return n([]);const e=r();null!==(c=s.current)&&void 0!==c&&c.is(e)||n(e),s.current=e}return l.release}),[o,r,e,t]),a}function Vo(e){return z("recoil_memory_managament_2020")&&to(e),{TRANSITION_SUPPORT:Eo,SYNC_EXTERNAL_STORE:Ao,MUTABLE_SOURCE:No,LEGACY:ko}[so().mode](e)}function Lo(e){const t=uo();return wo(Vo(e),e,t)}function Mo(e){const t=uo();return So((n=>{yo(t.current,e,n)}),[t,e])}function Uo(e){return z("recoil_memory_managament_2020")&&to(e),Eo(e)}function Co(e){const t=uo();return wo(Uo(e),e,t)}var Bo={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useRecoilInterface:function(){const e=oo(),t=uo(),[,n]=To([]),o=Ro(new Set);o.current=new Set;const r=Ro(new Set),a=Ro(new Map),s=So((e=>{const t=a.current.get(e);t&&(t.release(),a.current.delete(e))}),[a]),i=So(((e,t)=>{a.current.has(t)&&n([])}),[]);return mo((()=>{const n=t.current;ie(o.current,r.current).forEach((t=>{if(a.current.has(t))return;const o=_o(n,new ho(t),(e=>i(e,t)),e);a.current.set(t,o),n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push((()=>{i(n.getState(),t)})):i(n.getState(),t)})),ie(r.current,o.current).forEach((e=>{s(e)})),r.current=o.current})),mo((()=>{const n=a.current;return ie(o.current,new Set(n.keys())).forEach((o=>{const r=_o(t.current,new ho(o),(e=>i(e,o)),e);n.set(o,r)})),()=>n.forEach(((e,t)=>s(t)))}),[e,t,s,i]),go((()=>{function e(e){return n=>{yo(t.current,e,n)}}function n(e){var n;o.current.has(e.key)||(o.current=bo(o.current,e.key));const r=t.current.getState();return po(t.current,e,so().early&&null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree)}function r(e){return wo(n(e),e,t)}return{getRecoilValue:r,getRecoilValueLoadable:n,getRecoilState:function(t){return[r(t),e(t)]},getRecoilStateLoadable:function(t){return[n(t),e(t)]},getSetRecoilState:e,getResetRecoilState:function(e){return()=>yo(t.current,e,ao)}}}),[o,t])},useRecoilState:function(e){return[Lo(e),Mo(e)]},useRecoilStateLoadable:function(e){return[Vo(e),Mo(e)]},useRecoilValue:Lo,useRecoilValueLoadable:Vo,useResetRecoilState:function(e){const t=uo();return So((()=>{yo(t.current,e,ao)}),[t,e])},useSetRecoilState:Mo,useSetUnvalidatedAtomValues:function(){const e=uo();return(t,n={})=>{ro((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>vo(e.current,new ho(n),t)))}))}},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:Uo,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:Co,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:function(e){return[Co(e),Mo(e)]}};const{batchUpdates:Io}=Lt,{DEFAULT_VALUE:Do,getNode:Oo,nodes:Po}=Q,{useStoreRef:xo}=jn,{AbstractRecoilValue:Fo,setRecoilValueLoadable:zo}=ut,{SUSPENSE_TIMEOUT_MS:Wo}=Tt,{cloneSnapshot:Go}=sn,{useCallback:jo,useEffect:$o,useRef:Ho,useState:qo}=r(),{isSSR:Ko}=Mt;function Zo(e){const t=xo();$o((()=>t.current.subscribeToTransactions(e).release),[e,t])}function Yo(e){const t=e.atomValues.toMap(),n=le(function(e,t){const n=new Map;for(const[o,r]of e)t(r,o)&&n.set(o,r);return n}(t,((e,t)=>{const n=Oo(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return function(...e){const t=new Map;for(let n=0;n<e.length;n++){const o=e[n].keys();let r;for(;!(r=o.next()).done;)t.set(r.value,e[n].get(r.value))}return t}(e.nonvalidatedAtoms.toMap(),n)}function Jo(e,t){var n;const o=e.getState(),r=null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree,a=t.getStore_INTERNAL().getState().currentTree;Io((()=>{const n=new Set;for(const e of[r.atomValues.keys(),a.atomValues.keys()])for(const t of e){var o,s;(null===(o=r.atomValues.get(t))||void 0===o?void 0:o.contents)!==(null===(s=a.atomValues.get(t))||void 0===s?void 0:s.contents)&&Oo(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{zo(e,new Fo(t),a.atomValues.has(t)?c(a.atomValues.get(t)):Do)})),e.replaceState((e=>({...e,stateID:t.getID()})))}))}var Xo={useRecoilSnapshot:function(){const e=xo(),[t,n]=qo((()=>Go(e.current))),o=qn(t),r=Ho(),a=Ho();var s;(Zo(jo((e=>n(Go(e))),[])),$o((()=>{const e=t.retain();var n;return r.current&&!Ko&&(window.clearTimeout(r.current),r.current=null,null===(n=a.current)||void 0===n||n.call(a),a.current=null),e}),[t]),o===t||Ko)||(r.current&&(window.clearTimeout(r.current),r.current=null,null===(s=a.current)||void 0===s||s.call(a),a.current=null),a.current=t.retain(),r.current=window.setTimeout((()=>{var e;r.current=null,null===(e=a.current)||void 0===e||e.call(a),a.current=null}),Wo));return t},gotoSnapshot:Jo,useGotoRecoilSnapshot:function(){const e=xo();return jo((t=>Jo(e.current,t)),[e])},useRecoilTransactionObserver:function(e){Zo(jo((t=>{const n=Go(t,"current"),o=Go(t,"previous");e({snapshot:n,previousSnapshot:o})}),[e]))},useTransactionObservation_DEPRECATED:function(e){Zo(jo((t=>{let n=t.getState().previousTree;const o=t.getState().currentTree;n||(n=t.getState().currentTree);const r=Yo(o),a=Yo(n),s=le(Po,(e=>{var t,n,o,r;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(o=null===(r=e.persistence_UNSTABLE)||void 0===r?void 0:r.backButton)&&void 0!==o&&o}}})),i=function(e,t){const n=new Set;for(const o of e)t(o)&&n.add(o);return n}(o.dirtyAtoms,(e=>r.has(e)||a.has(e)));e({atomValues:r,previousAtomValues:a,atomInfo:s,modifiedAtoms:i,transactionMetadata:{...o.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:Zo};const{peekNodeInfo:Qo}=Pe,{useStoreRef:er}=jn;const{reactMode:tr}=We,{RecoilRoot:nr,useStoreRef:or}=jn,{useMemo:rr}=r();const{loadableWithValue:ar}=V,{initializeNode:sr}=Pe,{DEFAULT_VALUE:ir,getNode:lr}=Q,{copyTreeState:cr,getRecoilValueAsLoadable:ur,invalidateDownstreams:dr,writeLoadableToTreeState:fr}=ut;function hr(e){return"atom"===lr(e.key).nodeType}class pr{constructor(e,t){u(this,"_store",void 0),u(this,"_treeState",void 0),u(this,"_changes",void 0),u(this,"get",(e=>{if(this._changes.has(e.key))return this._changes.get(e.key);if(!hr(e))throw i("Reading selectors within atomicUpdate is not supported");const t=ur(this._store,e,this._treeState);if("hasValue"===t.state)return t.contents;throw"hasError"===t.state?t.contents:i(`Expected Recoil atom ${e.key} to have a value, but it is in a loading state.`)})),u(this,"set",((e,t)=>{if(!hr(e))throw i("Setting selectors within atomicUpdate is not supported");if("function"==typeof t){const n=this.get(e);this._changes.set(e.key,t(n))}else sr(this._store,e.key,"set"),this._changes.set(e.key,t)})),u(this,"reset",(e=>{this.set(e,ir)})),this._store=e,this._treeState=t,this._changes=new Map}newTreeState_INTERNAL(){if(0===this._changes.size)return this._treeState;const e=cr(this._treeState);for(const[t,n]of this._changes)fr(e,t,ar(n));return dr(this._store,e),e}}var yr=function(e){return t=>{e.replaceState((n=>{const o=new pr(e,n);return t(o),o.newTreeState_INTERNAL()}))}},vr=Object.freeze({__proto__:null,atomicUpdater:yr}),_r=function(e,t){if(!e)throw new Error(t)};const{atomicUpdater:Sr}=vr,{batchUpdates:mr}=Lt,{DEFAULT_VALUE:gr}=Q,{useStoreRef:Rr}=jn,{refreshRecoilValue:Tr,setRecoilValue:br}=ut,{Snapshot:wr,cloneSnapshot:Ar}=sn,{gotoSnapshot:Nr}=Xo,{useCallback:Er}=r();class kr{}const Vr=new kr;function Lr(e,t,n,o){let r=Vr;return mr((()=>{const a="useRecoilCallback() expects a function that returns a function: it accepts a function of the type (RecoilInterface) => (Args) => ReturnType and returns a callback function (Args) => ReturnType, where RecoilInterface is an object {snapshot, set, ...} and Args and ReturnType are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";if("function"!=typeof t)throw i(a);const s=we({...null!=o?o:{},set:(t,n)=>br(e,t,n),reset:t=>br(e,t,gr),refresh:t=>Tr(e,t),gotoSnapshot:t=>Nr(e,t),transact_UNSTABLE:t=>Sr(e)(t)},{snapshot:()=>Ar(e)}),l=t(s);if("function"!=typeof l)throw i(a);r=l(...n)})),r instanceof kr&&_r(!1),r}var Mr={recoilCallback:Lr,useRecoilCallback:function(e,t){const n=Rr();return Er(((...t)=>Lr(n.current,e,t)),null!=t?[...t,n]:void 0)}};const{useStoreRef:Ur}=jn,{refreshRecoilValue:Cr}=ut,{useCallback:Br}=r();const{atomicUpdater:Ir}=vr,{useStoreRef:Dr}=jn,{useMemo:Or}=r();const Pr=(e,t,n)=>{var o;if(null==e)return;if(null==n||null===(o=n.onNodeVisit)||void 0===o||o.call(n,e),"leaf"===e.type)return e;const r=t(e.nodeKey);return Pr(e.branches.get(r),t,n)},xr=(e,t,n,o,r,a,s)=>{var i;let l;if(null==e)if(0===t.length)l={type:"leaf",value:o,parent:n,branchKey:r};else{const[e,...i]=t,[c,u]=e;l={type:"branch",nodeKey:c,parent:n,branches:new Map,branchKey:r},l.branches.set(u,xr(null,i,l,o,u,a,s))}else if(l=e,t.length){const[n,...r]=t,[i,c]=n;if("branch"!==e.type||e.nodeKey!==i)return s(),l;e.branches.set(c,xr(e.branches.get(c),r,e,o,c,a,s))}return null==a||null===(i=a.onNodeVisit)||void 0===i||i.call(a,l),l},Fr=(e,t,n)=>n?(0===t.branches.size&&n.branches.delete(t.branchKey),Fr(e,n,n.parent)):e===t,zr=e=>"leaf"===e.type?1:Array.from(e.branches.values()).reduce(((e,t)=>e+zr(t)),0);var Wr=Object.freeze({__proto__:null,TreeCache:class{constructor(e){var t,n,o;u(this,"_numLeafs",void 0),u(this,"_root",void 0),u(this,"_onHit",void 0),u(this,"_onSet",void 0),u(this,"_mapNodeValue",void 0),this._numLeafs=0,this._root=null,this._onHit=null!==(t=null==e?void 0:e.onHit)&&void 0!==t?t:()=>{},this._onSet=null!==(n=null==e?void 0:e.onSet)&&void 0!==n?n:()=>{},this._mapNodeValue=null!==(o=null==e?void 0:e.mapNodeValue)&&void 0!==o?o:e=>e}size(){return this._numLeafs}root(){return this._root}get(e,t){var n;return null===(n=this.getLeafNode(e,t))||void 0===n?void 0:n.value}getLeafNode(e,t){return Pr(this.root(),(t=>this._mapNodeValue(e(t))),{onNodeVisit:e=>{null==t||t.onNodeVisit(e),"leaf"===e.type&&this._onHit(e)}})}set(e,t,n){let o,r=null;const a=()=>{r=xr(this.root(),e.map((([e,t])=>[e,this._mapNodeValue(t)])),null,t,null,{onNodeVisit:e=>{null==n||n.onNodeVisit(e),"leaf"===e.type&&(o=e)}},(()=>{this.clear(),a()}))};a(),this.root()||(this._root=r),this._numLeafs++,this._onSet(c(o))}delete(e){if(!this.root())return!1;const t=c(this.root());return!!((e,t,n)=>n?(n.branches.delete(t.branchKey),Fr(e,n,n.parent)):e===t)(t,e,e.parent)&&(e===t||"branch"===t.type&&!t.branches.size?(this._root=null,this._numLeafs=0,!0):(this._numLeafs-=zr(e),!0))}clear(){this._numLeafs=0,this._root=null}}}),Gr=Object.freeze({__proto__:null,LRUCache:class{constructor(e){var t;u(this,"_maxSize",void 0),u(this,"_size",void 0),u(this,"_head",void 0),u(this,"_tail",void 0),u(this,"_map",void 0),u(this,"_keyMapper",void 0),this._maxSize=e.maxSize,this._size=0,this._head=null,this._tail=null,this._map=new Map,this._keyMapper=null!==(t=e.mapKey)&&void 0!==t?t:e=>e}head(){return this._head}tail(){return this._tail}size(){return this._size}maxSize(){return this._maxSize}has(e){return this._map.has(this._keyMapper(e))}get(e){const t=this._keyMapper(e),n=this._map.get(t);if(n)return this.set(e,n.value),n.value}set(e,t){const n=this._keyMapper(e);this._map.get(n)&&this.delete(e);const o=this.head(),r={key:e,right:o,left:null,value:t};o?o.left=r:this._tail=r,this._map.set(n,r),this._head=r,this._size++,this._maybeDeleteLRU()}_maybeDeleteLRU(){this.size()>this.maxSize()&&this.deleteLru()}deleteLru(){const e=this.tail();e&&this.delete(e.key)}delete(e){const t=this._keyMapper(e);if(!this._size||!this._map.has(t))return;const n=c(this._map.get(t)),o=n.right,r=n.left;o&&(o.left=n.left),r&&(r.right=n.right),n===this.head()&&(this._head=o),n===this.tail()&&(this._tail=r),this._map.delete(t),this._size--}clear(){this._size=0,this._head=null,this._tail=null,this._map=new Map}}});const{LRUCache:jr}=Gr,{TreeCache:$r}=Wr;var Hr=function(e,t=(e=>e)){const n=new jr({maxSize:e}),o=new $r({mapNodeValue:t,onHit:e=>{n.set(e,!0)},onSet:t=>{const r=n.tail();n.set(t,!0),r&&o.size()>e&&o.delete(r.key)}});return o};function qr(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw i("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var o;if("object"!=typeof e)return null!==(o=JSON.stringify(e))&&void 0!==o?o:"";if(l(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>qr(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return qr(e.toJSON(n),t,n);if(e instanceof Map){const o={};for(const[n,r]of e)o["string"==typeof n?n:qr(n,t)]=r;return qr(o,t,n)}return e instanceof Set?qr(Array.from(e).sort(((e,n)=>qr(e,t).localeCompare(qr(n,t)))),t,n):void 0!==Symbol&&null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?qr(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${qr(n,t)}:${qr(e[n],t,n)}`)).join(",")}}`}var Kr=function(e,t={allowFunctions:!1}){return qr(e,t)};const{TreeCache:Zr}=Wr,Yr={equality:"reference",eviction:"keep-all",maxSize:1/0};const{isReactNative:Jr,isSSR:Xr}=Mt;const{loadableWithError:Qr,loadableWithPromise:ea,loadableWithValue:ta}=V,{getNodeLoadable:na,peekNodeLoadable:oa,setNodeValue:ra}=Pe,{saveDependencyMapToStore:aa}=ue,{DEFAULT_VALUE:sa,RecoilValueNotReady:ia,getConfigDeletionHandler:la,getNode:ca,registerNode:ua}=Q,{isRecoilValue:da}=P,{markRecoilValueModified:fa}=ut,{retainedByOptionWithDefault:ha}=Tt,{recoilCallback:pa}=Mr,{startPerfBlock:ya}={startPerfBlock:function(e){return()=>null}};class va{}const _a=new va,Sa=[],ma=new Map,ga=(()=>{let e=0;return()=>e++})();var Ra=function(e){let t=null;const{key:n,get:o,cachePolicy_UNSTABLE:r}=e,a=null!=e.set?e.set:void 0,s=new Set,u=function({equality:e=Yr.equality,eviction:t=Yr.eviction,maxSize:n=Yr.maxSize}=Yr){const o=function(e){switch(e){case"reference":return e=>e;case"value":return e=>Kr(e)}throw i(`Unrecognized equality policy ${e}`)}(e),r=function(e,t,n){switch(e){case"keep-all":return new Zr({mapNodeValue:n});case"lru":return Hr(c(t),n);case"most-recent":return Hr(1,n)}throw i(`Unrecognized eviction policy ${e}`)}(t,n,o);return r}(null!=r?r:{equality:"reference",eviction:"keep-all"}),d=ha(e.retainedBy_UNSTABLE),f=new Map;let h=0;function p(){return!z("recoil_memory_managament_2020")||h>0}function y(e){return e.getState().knownSelectors.add(n),h++,()=>{h--}}function v(){return void 0!==la(n)&&!p()}function _(e,t,n,o,r){M(t,o,r),T(e,t,new Set(r.keys()),n),S(e,n)}function S(e,n){L(e,n)&&V(e);const o=ma.get(n);if(void 0!==o){for(const e of o)fa(e,c(t));ma.delete(n)}}function m(e,t){let n=ma.get(t);null==n&&ma.set(t,n=new Set),n.add(e)}function g(e,t,n){const o=e.getState().knownSelectors.has(n);if(o&&t.atomValues.has(n))return c(t.atomValues.get(n));const r=na(e,t,n);return"loading"!==r.state&&o&&t.atomValues.set(n,r),r}function R(e,t,n,o,r,a){return t.then((o=>{if(!p())throw V(e),_a;null!=a.loadingDepKey&&a.loadingDepPromise===t?n.atomValues.set(a.loadingDepKey,ta(o)):e.getState().knownSelectors.forEach((e=>{n.atomValues.delete(e)}));const s=w(e,n);if(s&&"loading"!==s.state){if((L(e,r)||null==E(e))&&S(e,r),"hasValue"===s.state)return s.contents;throw s.contents}if(!L(e,r)){const e=A(n);if("loading"===(null==e?void 0:e.latestLoadable.state))return e.latestLoadable.contents}const[i,l]=b(e,n,r);if(k(e,r,l),"loading"!==i.state&&_(e,n,r,i,l),"hasError"===i.state)throw i.contents;return i.contents})).catch((t=>{if(t instanceof va)throw _a;if(!p())throw V(e),_a;const a=Qr(t);throw _(e,n,r,a,o),t}))}function T(e,t,o,r){var a,i,l,c,u,d,f;(L(e,r)||t.version===(null===(a=e.getState())||void 0===a||null===(i=a.currentTree)||void 0===i?void 0:i.version)||t.version===(null===(l=e.getState())||void 0===l||null===(c=l.nextTree)||void 0===c?void 0:c.version))&&(aa(new Map([[n,o]]),e,null!==(u=null===(d=e.getState())||void 0===d||null===(f=d.nextTree)||void 0===f?void 0:f.version)&&void 0!==u?u:e.getState().currentTree.version),o.forEach((e=>s.add(e))))}function b(e,r,a){const s=ya(n);let c=!0;const u=()=>{s(),c=!1};let d,f,h=!1;const y={loadingDepKey:null,loadingDepPromise:null},v=new Map,S=new Set;function m(t){const{key:n}=t;!function(e,t,n,o,r){n.add(o),T(e,t,n,r)}(e,r,S,n,a);const o=g(e,r,n);switch(v.set(n,o),o.state){case"hasValue":return o.contents;case"hasError":throw o.contents;case"loading":throw y.loadingDepKey=n,y.loadingDepPromise=o.contents,o.contents}throw i("Invalid Loadable state")}T(e,r,S,a);const b=n=>(...o)=>{if(c)throw i("Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.");return null==t&&_r(!1),pa(e,n,o,{node:t})};try{d=o({get:m,getCallback:b}),d=da(d)?m(d):d,l(d)?d=function(e,t,n,o,r,a){return t.then((t=>{if(!p())throw V(e),_a;const a=ta(t);return _(e,n,r,a,o),t})).catch((t=>{if(!p())throw V(e),_a;if(k(e,r,o),l(t))return R(e,t,n,o,r,a);const s=Qr(t);throw _(e,n,r,s,o),t}))}(e,d,r,v,a,y).finally(u):u()}catch(t){d=t,l(d)?d=R(e,d,r,v,a,y).finally(u):(h=!0,u())}return f=h?Qr(d):l(d)?ea(d):ta(d),[f,v]}function w(e,t){const o=new Set,r=E(e);let a;try{a=u.get((n=>("string"!=typeof n&&_r(!1),g(e,t,n).contents)),{onNodeVisit:e=>{"branch"===e.type&&e.nodeKey!==n&&o.add(e.nodeKey)}})}catch(e){throw i(`Problem with cache lookup for selector "${n}": ${e.message}`)}return a&&T(e,t,o,null==r?void 0:r.latestExecutionId),a}function A(e){var t;const[,n]=null!==(t=Array.from(f.entries()).find((([t,n])=>null!=n.latestLoadable&&null!=n.latestExecutionId&&!function(e,t){var n,o;const r=E(e),a=null!==(n=null==r?void 0:r.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,s=Array((null!==(o=N.get(t.version))&&void 0!==o?o:new Map).entries()),i=N.has(t.version)&&s.length===a.size&&s.every((([e,t])=>a.get(e)===t));return null!=a&&t.version!==(null==r?void 0:r.stateVersion)&&!i&&(N.set(t.version,new Map(a)),Array.from(a).some((([n,o])=>g(e,t,n).contents!==o.contents)))}(t,e))))&&void 0!==t?t:[];return n}const N=new Map;function E(e){return f.get(e)}function k(e,t,n){if(L(e,t)){const t=E(e);null!=t&&(t.depValuesDiscoveredSoFarDuringAsyncWork=n)}}function V(e){f.delete(e)}function L(e,t){var n;return t===(null===(n=E(e))||void 0===n?void 0:n.latestExecutionId)}function M(e,t,o){e.atomValues.set(n,t);try{u.set(function(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}(o),t)}catch(e){throw i(`Problem with setting cache for selector "${n}": ${e.message}`)}}function U(e,t){return u.get((n=>{var o;return"string"!=typeof n&&_r(!1),null===(o=oa(e,t,n))||void 0===o?void 0:o.contents}))}function C(e,t){return function(o){if(Sa.includes(n)){const e=`Recoil selector has circular dependencies: ${Sa.slice(Sa.indexOf(n)).join(" → ")}`;return Qr(i(e))}Sa.push(n);try{return function(e,t){const n=w(e,t);if(null!=n)return V(e),n;const o=A(t);var r;return null!=o?("loading"===(null===(r=o.latestLoadable)||void 0===r?void 0:r.state)&&m(e,c(o.latestExecutionId)),c(o.latestLoadable)):function(e,t){const n=ga(),[o,r]=b(e,t,n);return"loading"===o.state?(function(e,t,n,o,r){f.set(e,{depValuesDiscoveredSoFarDuringAsyncWork:o,latestExecutionId:t,latestLoadable:n,stateVersion:r.version})}(e,n,o,r,t),m(e,n)):(V(e),M(t,o,r)),o}(e,t)}(e,t)}finally{Sa.pop()}}()}function B(e){e.atomValues.delete(n)}function I(e,n){null==t&&_r(!1);for(const t of s){var o;const r=ca(t);null===(o=r.clearCache)||void 0===o||o.call(r,e,n)}s.clear(),B(n),u.clear(),fa(e,t)}return t=ua(null!=a?{key:n,nodeType:"selector",peek:U,get:C,set:(e,t,n)=>{let o=!1;const r=new Map;function s({key:n}){if(o)throw i("Recoil: Async selector sets are not currently supported.");const r=g(e,t,n);if("hasValue"===r.state)return r.contents;throw"loading"===r.state?new ia(n):r.contents}function c(n,a){if(o)throw i("Recoil: Async selector sets are not currently supported.");const l="function"==typeof a?a(s(n)):a;ra(e,t,n.key,l).forEach(((e,t)=>r.set(t,e)))}const u=a({set:c,get:s,reset:function(e){c(e,sa)}},n);if(void 0!==u)throw l(u)?i("Recoil: Async selector sets are not currently supported."):i("Recoil: selector set should be a void function.");return o=!0,r},init:y,invalidate:B,clearCache:I,shouldDeleteConfigOnRelease:v,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:d}:{key:n,nodeType:"selector",peek:U,get:C,init:y,invalidate:B,clearCache:I,shouldDeleteConfigOnRelease:v,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:d})};const{loadableWithError:Ta,loadableWithPromise:ba,loadableWithValue:wa}=V,{peekNodeInfo:Aa}=Pe,{DEFAULT_VALUE:Na,DefaultValue:Ea,getConfigDeletionHandler:ka,registerNode:Va,setConfigDeletionHandler:La}=Q,{isRecoilValue:Ma}=P,{getRecoilValueAsLoadable:Ua,markRecoilValueModified:Ca,setRecoilValue:Ba,setRecoilValueLoadable:Ia}=ut,{retainedByOptionWithDefault:Da}=Tt;var Oa=function e(t){const{default:n,...o}=t;return Ma(n)?function(t){const n=e({...t,default:Na,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:{...t.persistence_UNSTABLE,validator:e=>e instanceof Ea?e:c(t.persistence_UNSTABLE).validator(e,Na)},effects:t.effects,effects_UNSTABLE:t.effects_UNSTABLE}),o=Ra({key:`${t.key}__withFallback`,get:({get:e})=>{const o=e(n);return o instanceof Ea?t.default:o},set:({set:e},t)=>e(n,t),dangerouslyAllowMutability:t.dangerouslyAllowMutability});return La(o.key,ka(t.key)),o}({...o,default:n}):function(e){const{key:t,persistence_UNSTABLE:n}=e,o=Da(e.retainedBy_UNSTABLE);let r,a=0,s=l(e.default)?ba(e.default.then((e=>(s=wa(e),e))).catch((e=>{throw s=Ta(e),e}))):wa(e.default);e.default;const u=new Map;function d(e,n){var o,a;return null!==(o=null!==(a=n.atomValues.get(t))&&void 0!==a?a:r)&&void 0!==o?o:s}const f=Va({key:t,nodeType:"atom",peek:d,get:function(e,o){if(o.atomValues.has(t))return c(o.atomValues.get(t));if(o.nonvalidatedAtoms.has(t)){if(null!=r)return r;if(null==n)return s;const e=o.nonvalidatedAtoms.get(t),a=n.validator(e,Na),i=a instanceof Ea?s:wa(a);return r=i,r}return s},set:function(e,n,o){if(n.atomValues.has(t)){const e=c(n.atomValues.get(t));if("hasValue"===e.state&&o===e.contents)return new Map}else if(!n.nonvalidatedAtoms.has(t)&&o instanceof Ea)return new Map;return r=void 0,(new Map).set(t,wa(o))},init:function(n,o,r){var c;if(a++,n.getState().knownAtoms.add(t),"loading"===s.state){const e=()=>{var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||Ca(n,f)};s.contents.finally(e)}const h=null!==(c=e.effects)&&void 0!==c?c:e.effects_UNSTABLE;if(null!=h){let e=!0,a=Na,c=!1,v=null;function _(r){if(e&&r.key===t){const e=a;return e instanceof Ea?d(0,o):l(e)?ba(e.then((e=>e instanceof Ea?s.toPromise():e))):wa(e)}return Ua(n,r)}function S(e){return _(e).toPromise()}function m(o){var r;const s=Aa(n,null!==(r=n.getState().nextTree)&&void 0!==r?r:n.getState().currentTree,o.key);return!e||o.key!==t||a instanceof Ea?s:{...s,isSet:!0,loadable:_(o)}}const g=t=>o=>{if(e){const e=_(f),n="hasValue"===e.state?e.contents:Na;a="function"==typeof o?o(n):o,l(a)&&(a=a.then((e=>(v={effect:t,value:e},e))))}else{if(l(o))throw i("Setting atoms to async values is not implemented.");"function"!=typeof o&&(v={effect:t,value:o}),Ba(n,f,"function"==typeof o?e=>{const n=o(e);return v={effect:t,value:n},n}:o)}},R=e=>()=>g(e)(Na),T=e=>o=>{var r;const{release:a}=n.subscribeToTransactions((n=>{var r;let{currentTree:a,previousTree:i}=n.getState();i||(i=a);const l=null!==(r=a.atomValues.get(t))&&void 0!==r?r:s;if("hasValue"===l.state){var c,u,d,f;const n=l.contents,r=null!==(c=i.atomValues.get(t))&&void 0!==c?c:s,h="hasValue"===r.state?r.contents:Na;(null===(u=v)||void 0===u?void 0:u.effect)!==e||(null===(d=v)||void 0===d?void 0:d.value)!==n?o(n,h,!a.atomValues.has(t)):(null===(f=v)||void 0===f?void 0:f.effect)===e&&(v=null)}}),t);u.set(n,[...null!==(r=u.get(n))&&void 0!==r?r:[],a])};for(const e of h)try{const t=e({node:f,storeID:n.storeID,trigger:r,setSelf:g(e),resetSelf:R(e),onSet:T(e),getPromise:S,getLoadable:_,getInfo_UNSTABLE:m});var p;null!=t&&u.set(n,[...null!==(p=u.get(n))&&void 0!==p?p:[],t])}catch(e){a=e,c=!0}if(e=!1,!(a instanceof Ea)){var y;const e=a,r=c?Ta(a):l(e)?ba(function(e,n){const o=n.then((n=>{var r,a;return(null===(a=(null!==(r=e.getState().nextTree)&&void 0!==r?r:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===o&&Ba(e,f,n),n})).catch((n=>{var r,a;throw(null===(a=(null!==(r=e.getState().nextTree)&&void 0!==r?r:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===o&&Ia(e,f,Ta(n)),n}));return o}(n,e)):wa(e);o.atomValues.set(t,r),null===(y=n.getState().nextTree)||void 0===y||y.atomValues.set(t,r)}}return()=>{var e;a--,null===(e=u.get(n))||void 0===e||e.forEach((e=>e())),u.delete(n)}},invalidate:function(){r=void 0},shouldDeleteConfigOnRelease:function(){return void 0!==ka(t)&&a<=0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0,retainedBy:o});return f}({...o,default:n})},Pa=Object.freeze({__proto__:null,MapCache:class{constructor(e){var t;u(this,"_map",void 0),u(this,"_keyMapper",void 0),this._map=new Map,this._keyMapper=null!==(t=null==e?void 0:e.mapKey)&&void 0!==t?t:e=>e}size(){return this._map.size}has(e){return this._map.has(this._keyMapper(e))}get(e){return this._map.get(this._keyMapper(e))}set(e,t){this._map.set(this._keyMapper(e),t)}delete(e){this._map.delete(this._keyMapper(e))}clear(){this._map.clear()}}});const{LRUCache:xa}=Gr,{MapCache:Fa}=Pa,za={equality:"reference",eviction:"none",maxSize:1/0};var Wa=function({equality:e=za.equality,eviction:t=za.eviction,maxSize:n=za.maxSize}=za){const o=function(e){switch(e){case"reference":return e=>e;case"value":return e=>Kr(e)}throw i(`Unrecognized equality policy ${e}`)}(e),r=function(e,t,n){switch(e){case"keep-all":return new Fa({mapKey:n});case"lru":return new xa({mapKey:n,maxSize:c(t)});case"most-recent":return new xa({mapKey:n,maxSize:1})}throw i(`Unrecognized eviction policy ${e}`)}(t,n,o);return r};const{setConfigDeletionHandler:Ga}=Q;const{setConfigDeletionHandler:ja}=Q;let $a=0;var Ha=function(e){var t,n;const o=Wa({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n;const r=o.get(t);if(null!=r)return r;const a=`${e.key}__selectorFamily/${null!==(n=Kr(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${$a++}`,s=n=>e.get(t)(n),i=e.cachePolicy_UNSTABLE,l="function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE;let c;if(null!=e.set){const n=e.set;c=Ra({key:a,get:s,set:(e,o)=>n(t)(e,o),cachePolicy_UNSTABLE:i,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:l})}else c=Ra({key:a,get:s,cachePolicy_UNSTABLE:i,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:l});return o.set(t,c),ja(c.key,(()=>{o.delete(t)})),c}};const qa=Ha({key:"__constant",get:e=>()=>e,cachePolicyForParams_UNSTABLE:{equality:"reference"}});const Ka=Ha({key:"__error",get:e=>()=>{throw i(e)},cachePolicyForParams_UNSTABLE:{equality:"reference"}});const{loadableWithError:Za,loadableWithPromise:Ya,loadableWithValue:Ja}=V;function Xa(e,t){const n=Array(t.length).fill(void 0),o=Array(t.length).fill(void 0);for(const[r,a]of t.entries())try{n[r]=e(a)}catch(e){o[r]=e}return[n,o]}function Qa(e){return null!=e&&!l(e)}function es(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function ts(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,o)=>({...e,[n]:t[o]})),{})}function ns(e,t,n){return ts(e,n.map(((e,n)=>null==e?Ja(t[n]):l(e)?Ya(e):Za(e))))}var os={waitForNone:Ha({key:"__waitForNone",get:e=>({get:t})=>{const n=es(e),[o,r]=Xa(t,n);return ns(e,o,r)},dangerouslyAllowMutability:!0}),waitForAny:Ha({key:"__waitForAny",get:e=>({get:t})=>{const n=es(e),[o,r]=Xa(t,n);return r.some((e=>!l(e)))?ns(e,o,r):new Promise((t=>{for(const[n,a]of r.entries())l(a)&&a.then((a=>{o[n]=a,r[n]=void 0,t(ns(e,o,r))})).catch((a=>{r[n]=a,t(ns(e,o,r))}))}))},dangerouslyAllowMutability:!0}),waitForAll:Ha({key:"__waitForAll",get:e=>({get:t})=>{const n=es(e),[o,r]=Xa(t,n);if(r.every((e=>null==e)))return ts(e,o);const a=r.find(Qa);if(null!=a)throw a;return Promise.all(r).then((t=>{return ts(e,(n=o,t.map(((e,t)=>void 0===e?n[t]:e))));var n}))},dangerouslyAllowMutability:!0}),waitForAllSettled:Ha({key:"__waitForAllSettled",get:e=>({get:t})=>{const n=es(e),[o,r]=Xa(t,n);return r.every((e=>!l(e)))?ns(e,o,r):Promise.all(r.map(((e,t)=>l(e)?e.then((e=>{o[t]=e,r[t]=void 0})).catch((e=>{o[t]=void 0,r[t]=e})):null))).then((()=>ns(e,o,r)))},dangerouslyAllowMutability:!0}),noWait:Ha({key:"__noWait",get:e=>({get:t})=>{try{return Ja(t(e))}catch(e){return l(e)?Ya(e):Za(e)}},dangerouslyAllowMutability:!0})};const{RecoilLoadable:rs}=V,{DefaultValue:as}=Q,{RecoilRoot:ss,useRecoilStoreID:is}=jn,{isRecoilValue:ls}=P,{retentionZone:cs}=Re,{freshSnapshot:us}=sn,{useRecoilState:ds,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:fs,useRecoilStateLoadable:hs,useRecoilValue:ps,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:ys,useRecoilValueLoadable:vs,useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:_s,useResetRecoilState:Ss,useSetRecoilState:ms}=Bo,{useGotoRecoilSnapshot:gs,useRecoilSnapshot:Rs,useRecoilTransactionObserver:Ts}=Xo,{useRecoilCallback:bs}=Mr,{noWait:ws,waitForAll:As,waitForAllSettled:Ns,waitForAny:Es,waitForNone:ks}=os;var Vs={DefaultValue:as,isRecoilValue:ls,RecoilLoadable:rs,RecoilRoot:ss,useRecoilStoreID:is,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){"MUTABLE_SOURCE"===tr().mode&&console.warn("Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.");const e=or().current;return rr((()=>function({children:t}){return r().createElement(nr,{store_INTERNAL:e},t)}),[e])},atom:Oa,selector:Ra,atomFamily:function(e){var t,n;const o=Wa({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return t=>{var n,r;const a=o.get(t);if(null!=a)return a;const{cachePolicyForParams_UNSTABLE:s,...i}=e,l=Oa({...i,key:`${e.key}__${null!==(n=Kr(t))&&void 0!==n?n:"void"}`,default:"function"==typeof e.default?e.default(t):e.default,retainedBy_UNSTABLE:"function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE,effects:"function"==typeof e.effects?e.effects(t):"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(t):null!==(r=e.effects)&&void 0!==r?r:e.effects_UNSTABLE});return o.set(t,l),Ga(l.key,(()=>{o.delete(t)})),l}},selectorFamily:Ha,constSelector:function(e){return qa(e)},errorSelector:function(e){return Ka(e)},readOnlySelector:function(e){return e},noWait:ws,waitForNone:ks,waitForAny:Es,waitForAll:As,waitForAllSettled:Ns,useRecoilValue:ps,useRecoilValueLoadable:vs,useRecoilState:ds,useRecoilStateLoadable:hs,useSetRecoilState:ms,useResetRecoilState:Ss,useGetRecoilValueInfo_UNSTABLE:function(){const e=er();return({key:t})=>Qo(e.current,e.current.getState().currentTree,t)},useRecoilRefresher_UNSTABLE:function(e){const t=Ur();return Br((()=>{const n=t.current;Cr(n,e)}),[e,t])},useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE:_s,useRecoilValue_TRANSITION_SUPPORT_UNSTABLE:ys,useRecoilState_TRANSITION_SUPPORT_UNSTABLE:fs,useRecoilCallback:bs,useRecoilTransaction_UNSTABLE:function(e,t){const n=Dr();return Or((()=>(...t)=>{Ir(n.current)((n=>{e(n)(...t)}))}),null!=t?[...t,n]:void 0)},useGotoRecoilSnapshot:gs,useRecoilSnapshot:Rs,useRecoilTransactionObserver_UNSTABLE:Ts,snapshot_UNSTABLE:us,useRetain:to,retentionZone:cs},Ls=Vs.DefaultValue,Ms=Vs.isRecoilValue,Us=Vs.RecoilLoadable,Cs=Vs.RecoilRoot,Bs=Vs.useRecoilStoreID,Is=Vs.useRecoilBridgeAcrossReactRoots_UNSTABLE,Ds=Vs.atom,Os=Vs.selector,Ps=Vs.atomFamily,xs=Vs.selectorFamily,Fs=Vs.constSelector,zs=Vs.errorSelector,Ws=Vs.readOnlySelector,Gs=Vs.noWait,js=Vs.waitForNone,$s=Vs.waitForAny,Hs=Vs.waitForAll,qs=Vs.waitForAllSettled,Ks=Vs.useRecoilValue,Zs=Vs.useRecoilValueLoadable,Ys=Vs.useRecoilState,Js=Vs.useRecoilStateLoadable,Xs=Vs.useSetRecoilState,Qs=Vs.useResetRecoilState,ei=Vs.useGetRecoilValueInfo_UNSTABLE,ti=Vs.useRecoilRefresher_UNSTABLE,ni=Vs.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE,oi=Vs.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,ri=Vs.useRecoilState_TRANSITION_SUPPORT_UNSTABLE,ai=Vs.useRecoilCallback,si=Vs.useRecoilTransaction_UNSTABLE,ii=Vs.useGotoRecoilSnapshot,li=Vs.useRecoilSnapshot,ci=Vs.useRecoilTransactionObserver_UNSTABLE,ui=Vs.snapshot_UNSTABLE,di=Vs.useRetain,fi=Vs.retentionZone;const hi=Vs}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,