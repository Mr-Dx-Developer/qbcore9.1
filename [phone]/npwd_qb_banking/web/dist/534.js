"use strict";(self.webpackChunknpwd_qb_banking=self.webpackChunknpwd_qb_banking||[]).push([[534],{8039:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(5468),a=t(5974),o=t(2950),i=t.n(o),c=t(4274);const l=function(e){var n=e.children,t=e.mode,o=c.np[t],l=(0,r.Z)(o);return i().createElement(a.Z,{theme:l},n)}},3776:(e,n,t)=>{t.d(n,{Uq:()=>p,l5:()=>d,jU:()=>y,rB:()=>v,AI:()=>f,yF:()=>b});var r=t(5137),a=t(7405),o=t(5181),i=[{id:1,display:"Rocko",number:"555-15196"},{id:2,display:"Taso",number:"215-8139",avatar:"http://i.tasoagc.dev/i9Ig"},{id:3,display:"Chip",number:"603-275-8373",avatar:"http://i.tasoagc.dev/2QYV"},{id:4,display:"Avarian",number:"444-4444"}],c=[{id:1,citizenid:"NSI72784",amount:200,society:"mechanic",sender:"Sam",sendercitizenid:"PQS14529"},{id:2,citizenid:"NSI72784",amount:1200,society:"police",sender:"John",sendercitizenid:"DFS14529"}],l=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function c(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}l((r=r.apply(e,n||[])).next())}))},u=function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=n.call(e,i)}catch(e){o=[6,e],r=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},s={bankBalance:(0,r.atom)({key:"bankBalance",default:(0,r.selector)({key:"defaultBankBalance",get:function(){return l(void 0,void 0,void 0,(function(){var e,n;return u(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,(0,a.Z)("npwd:qb-banking:getBalance")];case 1:return(e=t.sent()).data?[2,e.data]:(console.log("no response data"),[2,0]);case 2:return n=t.sent(),(0,o.Id)()?[2,500]:(console.error(n),[2,0]);case 3:return[2]}}))}))}})}),accountNumber:(0,r.atom)({key:"accountNumber",default:(0,r.selector)({key:"defaultAccountNumber",get:function(){return l(void 0,void 0,void 0,(function(){var e,n;return u(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,(0,a.Z)("npwd:qb-banking:getAccountNumber")];case 1:return(e=t.sent()).data?[2,e.data]:(console.log("no response data"),[2,""]);case 2:return n=t.sent(),(0,o.Id)()?[2,"US09QBCore3036705542"]:(console.error(n),[2,""]);case 3:return[2]}}))}))}})}),contacts:(0,r.atom)({key:"contacts",default:(0,r.selector)({key:"defaultContacts",get:function(){return l(void 0,void 0,void 0,(function(){var e,n;return u(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,(0,a.Z)("npwd:qb-banking:getContacts")];case 1:return(e=t.sent()).data?[2,e.data]:(console.log("no response data"),[2,[]]);case 2:return n=t.sent(),(0,o.Id)()?[2,i]:(console.error(n),[2,[]]);case 3:return[2]}}))}))}})}),invoiceList:(0,r.atom)({key:"invoiceList",default:(0,r.selector)({key:"defaultInvoiceList",get:function(){return l(void 0,void 0,void 0,(function(){var e,n;return u(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,(0,a.Z)("npwd:qb-banking:getInvoices")];case 1:return(e=t.sent()).data?[2,e.data]:(console.log("no response data"),[2,[]]);case 2:return n=t.sent(),(0,o.Id)()?[2,c]:(console.error(n),[2,[]]);case 3:return[2]}}))}))}})})},d=function(){return(0,r.useRecoilValue)(s.bankBalance)},f=function(){return(0,r.useSetRecoilState)(s.bankBalance)},p=function(){return(0,r.useRecoilValue)(s.accountNumber)},y=function(){return(0,r.useRecoilValue)(s.contacts)},v=function(){return(0,r.useRecoilValue)(s.invoiceList)},b=function(){return(0,r.useSetRecoilState)(s.invoiceList)}},1551:(e,n,t)=>{t.d(n,{M:()=>s,Z:()=>f});var r,a,o=t(2950),i=t.n(o),c=t(2734),l=t(2658),u=t(932),s="4rem",d=u.Z.div(p||(r=["\n  display: flex;\n  align-items: center;\n\n  min-height: ",";\n  padding-left: 1.5rem;\n  background-color: ",";\n"],a=["\n  display: flex;\n  align-items: center;\n\n  min-height: ",";\n  padding-left: 1.5rem;\n  background-color: ",";\n"],Object.defineProperty?Object.defineProperty(r,"raw",{value:a}):r.raw=a,p=r),s,(function(e){return e.backgroundColor}));const f=function(e){var n=e.children,t=(0,c.Z)();return i().createElement(d,{backgroundColor:t.palette.primary.main},i().createElement(l.Z,{variant:"h5",color:"primary.contrastText"},n))};var p},421:(e,n,t)=>{t.d(n,{R:()=>s});var r=t(2950),a=t(721),o=t(7405),i=t(3776),c=t(9737),l=function(e,n,t,r){return new(t||(t=Promise))((function(a,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function c(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}l((r=r.apply(e,n||[])).next())}))},u=function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=n.call(e,i)}catch(e){o=[6,e],r=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},s=function(){var e=(0,a.D)().addAlert,n=(0,i.AI)(),t=(0,c.O)().declineLocalInvoice;return{transferMoney:(0,r.useCallback)((function(t){var r=t.amount,a=t.toAccount,i=t.transferType;return l(void 0,void 0,void 0,(function(){var t;return u(this,(function(c){switch(c.label){case 0:return[4,(0,o.Z)("npwd:qb-banking:transferMoney",{amount:r,toAccount:a,transferType:i})];case 1:return"ok"!==(t=c.sent()).status?[2,e({message:"Failed to transfer money",type:"error"})]:t.data&&"number"==typeof t.data?(n(t.data),e({message:"Successfully transfered money",type:"success"}),[2]):[2,e({message:"Money Transfered, issue with updating balance",type:"warning"})]}}))}))}),[e]),declineInvoice:(0,r.useCallback)((function(n){return l(void 0,void 0,void 0,(function(){return u(this,(function(r){switch(r.label){case 0:return[4,(0,o.Z)("npwd:qb-banking:declineInvoice",n)];case 1:return"ok"!==r.sent().status?[2,e({message:"Failed to decline invoice",type:"error"})]:(t(n),e({message:"Successfully declined invoice",type:"success"}),[2])}}))}))}),[e,t]),payInvoice:(0,r.useCallback)((function(r){return l(void 0,void 0,void 0,(function(){var a;return u(this,(function(i){switch(i.label){case 0:return[4,(0,o.Z)("npwd:qb-banking:payInvoice",r)];case 1:return"ok"!==(a=i.sent()).status?[2,e({message:"Failed to pay invoice",type:"error"})]:(t(r.id),n(a.data),e({message:"Successfully paid invoice",type:"success"}),[2])}}))}))}),[e,t])}}},9737:(e,n,t)=>{t.d(n,{O:()=>i});var r=t(3776),a=t(2950),o=function(e,n,t){if(t||2===arguments.length)for(var r,a=0,o=n.length;a<o;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))},i=function(){var e=(0,r.yF)();return{newInvoice:(0,a.useCallback)((function(n){e((function(e){return o([n],e,!0)}))}),[e]),declineLocalInvoice:(0,a.useCallback)((function(n){e((function(e){return o([],e,!0).filter((function(e){return e.id!==n}))}))}),[e])}}},4714:(e,n,t)=>{t.d(n,{v:()=>d});var r=t(2950),a=t.n(r),o=t(9986),i=t(721),c=t(2288),l=t(2658),u=function(){return u=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},u.apply(this,arguments)};const s=(0,r.forwardRef)((function(e,n){return a().createElement(c.Z,u({sx:{zIndex:1e4},elevation:4,variant:"filled"},e,{ref:n}),a().createElement(l.Z,{sx:{maxWidth:"300px",wordWrap:"break-word",fontSize:"1.1em"}},e.children))}));var d=function(){var e,n=(0,i.D)(),t=n.alert,r=n.isOpen,c=n.handleClose;return a().createElement(o.Z,{autoHideDuration:null!==(e=null==t?void 0:t.duration)&&void 0!==e?e:3e3,open:r,sx:{display:"flex",justifyContent:"center",alignItems:"center",height:"auto",position:"absolute",bottom:75,left:"0 !important",right:"0 !important"},onClose:c},a().createElement(s,{severity:(null==t?void 0:t.type)||"info",onClose:c},(null==t?void 0:t.message)||""))}},602:(e,n,t)=>{t.d(n,{S:()=>o,Z:()=>i});var r=t(2950),a=t.n(r),o=(0,r.createContext)(null);const i=function(e){var n=e.children,t=(0,r.useState)(!1),i=t[0],c=t[1],l=(0,r.useState)(null),u=l[0],s=l[1];return a().createElement(o.Provider,{value:{alert:u,addAlert:function(e){s(e),c(!0)},handleClose:function(){c(!1)},isOpen:i}},n)}},721:(e,n,t)=>{t.d(n,{D:()=>o});var r=t(2950),a=t(602),o=function(){return(0,r.useContext)(a.S)}},7405:(e,n,t)=>{t.d(n,{Z:()=>a});var r=t(5181);const a=function(e,n,t){return a=this,o=void 0,c=function(){var a;return function(e,n){var t,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=n.call(e,i)}catch(e){o=[6,e],r=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}}(this,(function(o){switch(o.label){case 0:return a={method:"post",headers:{"Content-Type":"application/json; charset=UTF-8"},body:JSON.stringify(n)},(0,r.Id)()&&t?[2,t]:[4,fetch("https://".concat("npwd_qb_banking","/").concat(e),a)];case 1:return[4,o.sent().json()];case 2:return[2,o.sent()]}}))},new((i=void 0)||(i=Promise))((function(e,n){function t(e){try{l(c.next(e))}catch(e){n(e)}}function r(e){try{l(c.throw(e))}catch(e){n(e)}}function l(n){var a;n.done?e(n.value):(a=n.value,a instanceof i?a:new i((function(e){e(a)}))).then(t,r)}l((c=c.apply(a,o||[])).next())}));var a,o,i,c}},5181:(e,n,t)=>{t.d(n,{Id:()=>r});var r=function(){return!1}},6173:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(2950),a=t.n(r),o=t(5295),i=t(8515),c=t(6867),l=t(1519),u=t(6736),s=t(6914),d=t(1899),f=t(3776),p=t(3754),y=t.n(p),v=t(3264),b=t(421),m=function(){return m=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},m.apply(this,arguments)},h=(0,v.Z)("div")({padding:8,display:"flex",flexDirection:"column",gap:12}),g=(0,v.Z)("div")({display:"flex",flexDirection:"column",justifyContent:"space-between",height:"100%",padding:"1.5rem"});const w=function(){var e=(0,f.l5)(),n=(0,f.Uq)(),t=(0,f.jU)(),p=(0,r.useState)(""),v=p[0],w=p[1],k=(0,r.useState)(""),Z=k[0],x=k[1],E=(0,b.R)().transferMoney;return a().createElement(g,null,a().createElement(o.Z,null,a().createElement(i.Z,{action:a().createElement(c.Z,{"aria-label":"copy"},a().createElement(d.Z,null)),title:a().createElement(y(),{value:e,prefix:"$",thousandSeparator:!0,displayType:"text"}),subheader:n})),a().createElement(h,null,a().createElement(l.Z,{id:"controllable-states-demo",getOptionLabel:function(e){return"string"!=typeof e?e.display:""},options:t,freeSolo:!0,disableClearable:!0,onChange:function(e,n){return w(n)},renderInput:function(e){return a().createElement(u.Z,m({},e,{inputProps:m(m({},e.inputProps),{onKeyDown:function(e){"Enter"===e.key&&e.stopPropagation()}}),label:"Transfer To",placeholder:"Search contacts or enter account number",onChange:function(e){return w(e.currentTarget.value)}}))}}),a().createElement(u.Z,{id:"amount",label:"Transfer Amount",value:Z,onChange:function(e){x(e.target.value)},type:"number"}),a().createElement(s.Z,{disabled:!!(Number(Z)<=0||"string"==typeof v&&v.length<=0||"string"!=typeof v&&null===v),onClick:function(){var e={amount:Number(Z),toAccount:v,transferType:"string"!=typeof v?"contact":"accountNumber"};E(e)},variant:"outlined"},"Transfer")))}},3407:(e,n,t)=>{t.d(n,{Z:()=>Z});var r=t(2440),a=t(799),o=t(6447),i=t(4563),c=t(6867),l=t(700),u=t(8584),s=t(2658),d=t(2950),f=t.n(d),p=t(3776),y=t(2391),v=t(8458),b=t(5813),m=t(3754),h=t.n(m),g=t(5475),w=t(9737),k=t(421);const Z=function(){var e=(0,p.rB)(),n=(0,w.O)().newInvoice,t=(0,k.R)(),m=t.declineInvoice,Z=t.payInvoice,x=(0,p.l5)(),E=(0,g.useNuiEvent)({event:"npwd:qb-banking:newInvoice"}).data;return(0,d.useEffect)((function(){E&&n(E)}),[E]),f().createElement(r.Z,{disablePadding:!0},e.map((function(e){return f().createElement(a.ZP,{key:e.id,divider:!0,secondaryAction:f().createElement(o.Z,{direction:"row"},f().createElement(i.Z,{title:"Pay"},f().createElement(c.Z,{size:"small","aria-label":"pay",color:"success",onClick:function(){return function(e){Z(e)}(e)},disabled:e.amount>x},f().createElement(v.Z,null))),f().createElement(i.Z,{title:"Decline"},f().createElement(c.Z,{size:"small","aria-label":"decline",color:"secondary",onClick:function(){return n=e.id,void m(n);var n}},f().createElement(b.Z,null))))},f().createElement(l.Z,null,f().createElement(y.Z,{color:"primary"})),f().createElement(u.Z,{primary:f().createElement(d.Fragment,null,f().createElement(s.Z,{sx:{display:"inline",textTransform:"capitalize"},component:"span",variant:"body2",color:"text.primary"},e.society),f().createElement(s.Z,{sx:{display:"inline",fontSize:"0.785rem",marginLeft:"1px"},component:"span",variant:"body2",color:"text.secondary"}," (Sender: ".concat(e.sender,")"))),secondary:f().createElement(h(),{value:e.amount,prefix:"$",thousandSeparator:!0,displayType:"text"})}))})))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,