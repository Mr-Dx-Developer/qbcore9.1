"use strict";(self.webpackChunknpwd_qb_banking=self.webpackChunknpwd_qb_banking||[]).push([[464],{4274:(n,e,t)=>{t.d(e,{np:()=>d});var i=t(3486),o=t(6115),r=i.Z[500],a=o.Z.white,d=(o.Z.black,{light:{palette:{mode:"light",primary:{main:r,dark:i.Z[700],light:i.Z[300],contrastText:a},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:a},success:{main:"#2196f3",contrastText:a}}},dark:{palette:{mode:"dark",primary:{main:r,dark:i.Z[700],light:i.Z[300],contrastText:a},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:a},success:{main:"#2196f3",contrastText:a}}}})},9464:(n,e,t)=>{t.r(e);var i,o,r=t(2950),a=t.n(r),d=t(2181),l=t.n(d),p=(t(5475),t(6235),t(3839)),x=t.n(p),c=t(6501),s=(t(4810),t(4172),t(2004),t(8039),t(9845),t(1551)),u=(t(6173),t(3407),t(5137),t(3776),t(4714),t(602),function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n});x()(c.Z)(i||(i=u(["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: 100%;\n"],["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: 100%;\n"]))),x().div(o||(o=u(["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: calc(100% - 3.5rem - ",");\n  overflow: auto;\n"],["\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  max-height: calc(100% - 3.5rem - ",");\n  overflow: auto;\n"])),s.M),t(4274),t.p,t(5142);var b,f,h,g=t(5468),m=function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n};x().div(b||(b=m(["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"],["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"]))),x().div(f||(f=m(["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"],["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"])),(function(n){return n.src})),x().div(h||(h=m(["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n  overflow: hidden;\n"],["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n  overflow: hidden;\n"]))),(0,g.Z)({palette:{mode:"light"}}),l().render(a().createElement((function(){return null}),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,