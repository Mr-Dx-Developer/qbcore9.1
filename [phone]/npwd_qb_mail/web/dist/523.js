"use strict";(self.webpackChunknpwd_qb_mail=self.webpackChunknpwd_qb_mail||[]).push([[523],{8320:(e,t,n)=>{n.d(t,{Y8:()=>u,LT:()=>d,JV:()=>p,Wu:()=>c,Ng:()=>s,YQ:()=>f});var r=n(5137),a=[{mailid:2,sender:"Eduardo",subject:"Delivery Location",message:"Here is all info about the delivery, <br><br>Items: <br> 1x Weed Brick<br><br> Be on time!!",read:0,date:1660745412e3,button:{buttonEvent:"qb-drugs:client:setLocation",enabled:!0,buttonData:{dealer:"Eduardo",itemData:{minrep:0,item:"weed_brick"},amount:2,locationLabel:"DR Kush",coords:{x:-1151.9300537109375,y:-1447.5899658203125,z:4.71000003814697}}}},{mailid:1,sender:"Billing Department",subject:"Invoice Paid",message:"Invoice Has Been Paid From Sienna Dunlap In The Amount Of $425",read:1,date:1660653186e3}],i=n(5181),o=n(7405),l={mailItems:(0,r.atom)({key:"mailItem",default:(0,r.selector)({key:"defaultMailItems",get:function(){return e=void 0,t=void 0,r=function(){var e,t;return function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,(0,o.Z)("npwd:qb-mail:getMail")];case 1:return(e=n.sent()).data?[2,e.data]:(console.log("no response data"),[2,[]]);case 2:return t=n.sent(),(0,i.Id)()?[2,a]:(console.error(t),[2,[]]);case 3:return[2]}}))},new((n=void 0)||(n=Promise))((function(a,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r}})}),selectedMail:(0,r.atom)({key:"selectedMail",default:null}),modalVisibile:(0,r.atom)({key:"mailModalVisible",default:!1})},u=function(){return(0,r.useRecoilValue)(l.mailItems)},c=function(){return(0,r.useSetRecoilState)(l.mailItems)},s=function(){return(0,r.useSetRecoilState)(l.modalVisibile)},d=function(){return(0,r.useRecoilState)(l.modalVisibile)},f=function(){return(0,r.useSetRecoilState)(l.selectedMail)},p=function(){return(0,r.useRecoilState)(l.selectedMail)}},1551:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(2950),a=n.n(r),i=n(4274),o=n(1508),l=n(2658);const u=function(){return a().createElement(o.Z,{px:2,pt:2,sx:{width:"100%",textAlign:"left",backgroundColor:i.A1}},a().createElement(l.Z,{sx:{color:i.Iw},paragraph:!0,variant:"h5"},"Mail"))}},620:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(2950),a=n.n(r),i=n(1508),o=n(2658),l=n(2440),u=n(5266),c=n(8320),s=n(870),d=n(5475),f=n(4766),p=n(4274);const m=function(e){var t=e.isDarkMode,n=(0,c.Y8)(),m=(0,c.YQ)(),h=(0,c.Ng)(),b=(0,s.F)().updateRead,y=(0,f.C)().newMail,v=(0,d.useNuiEvent)({event:"npwd:qb-mail:newMail"}).data;return(0,r.useEffect)((function(){v&&y(v[0])}),[v]),n&&0!==n.length?a().createElement(l.Z,{disablePadding:!0},n.map((function(e){return a().createElement(u.ZP,{key:e.mailid,button:!0,divider:!0,onClick:function(){return function(e){e.read||b(e.mailid),m(e),h(!0)}(e)}},0===e.read?a().createElement(i.Z,{sx:{bgcolor:"#4260f5",borderRadius:"10px",minWidth:"8px",minHeight:"8px",marginRight:"10px"}}):a().createElement(i.Z,{sx:{borderRadius:"10px",minWidth:"8px",minHeight:"8px",marginRight:"10px"}}),a().createElement(i.Z,{sx:{display:"flex",flexDirection:"column",width:"100%"}},a().createElement(i.Z,{sx:{display:"flex",flexDirection:"row",width:"100%",justifyContent:"space-between"}},a().createElement(o.Z,{sx:{fontWeight:"500",color:t?"#fff":"#000"}},e.sender),a().createElement(i.Z,{sx:{display:"flex",flexDirection:"column"}},a().createElement(o.Z,{sx:{color:"#dedede",fontSize:"13px"}},(n=e.date,("0"+(r=new Date(n)).getDate()).slice(-2)+"/"+("0"+(r.getMonth()+1)).slice(-2)+"/"+r.getFullYear())))),a().createElement(o.Z,{sx:{color:t?"#fff":"#000"}},e.subject)));var n,r}))):a().createElement(i.Z,{display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column",height:"100%"},a().createElement(o.Z,{variant:"h6",style:{fontWeight:300,color:p.Iw}},"You have no mail"))}},4530:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(2950),a=n.n(r),i=n(8320),o=n(4776),l=n(6501),u=n(6089),c=n(1508),s=n(6914),d=n(2658),f=n(2116),p=n(1023),m=n(5181),h=n(870),b=n(2265),y=n.n(b);const v=function(){var e=(0,i.LT)(),t=e[0],n=e[1],r=(0,i.JV)(),b=r[0],v=r[1],x=(0,h.F)(),g=x.deleteMail,w=x.updateMailButton;if(null===b)return null;var E=y()(b.message,{whiteList:{br:[],strong:[]}});return a().createElement(o.Z,{direction:"left",in:t,mountOnEnter:!0,unmountOnExit:!0,onExited:function(){v(null)}},a().createElement(l.Z,{sx:{position:"absolute",zIndex:20,height:"100%",width:"100%"},square:!0},a().createElement(u.Z,{sx:{height:"100%"}},a().createElement(c.Z,{sx:{height:"100%"}},a().createElement(c.Z,{pt:2,pb:1},a().createElement(s.Z,{color:"secondary",size:"large",startIcon:a().createElement(p.Z,{fontSize:"large"}),onClick:function(){n(!1)}},"INBOX")),a().createElement(c.Z,{pl:1,pb:"12px"},a().createElement(d.Z,{sx:{fontSize:"20px",fontWeight:500}},b.sender),a().createElement(d.Z,{sx:{fontSize:"19px"}},b.subject),b.date&&a().createElement(d.Z,{sx:{fontSize:"15px",color:"#dedede"}},(0,m.ur)(b.date))),a().createElement(f.Z,null),b.message&&a().createElement(c.Z,{pl:1,pt:"12px",sx:{fontSize:"18px",height:"70%"},dangerouslySetInnerHTML:{__html:E}}),a().createElement(c.Z,{display:"inline",p:1,sx:{display:"flex",gap:"15px",justifyContent:"center"}},void 0!==b.button&&null!==b.button&&a().createElement(s.Z,{color:"success",variant:"contained",onClick:function(){w({mailid:b.mailid,button:b.button}).then((function(){n(!1)})).catch(console.error)}},"ACCEPT"),a().createElement(s.Z,{color:"error",variant:"contained",onClick:function(){g(b.mailid).then((function(){n(!1)})).catch(console.error)}},"DELETE"))))))}},870:(e,t,n)=>{n.d(t,{F:()=>c});var r=n(2950),a=n(721),i=n(4766),o=n(7405),l=function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}u((r=r.apply(e,t||[])).next())}))},u=function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},c=function(){var e=(0,a.D)().addAlert,t=(0,i.C)(),n=t.updateReadState,c=t.deleteLocalMail,s=t.updateLocalButton,d=(0,r.useCallback)((function(e){return l(void 0,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return[4,(0,o.Z)("npwd:qb-mail:updateRead",e)];case 1:return t.sent(),n(e),[2]}}))}))}),[n]),f=(0,r.useCallback)((function(t){return l(void 0,void 0,void 0,(function(){return u(this,(function(n){switch(n.label){case 0:return[4,(0,o.Z)("npwd:qb-mail:deleteMail",t)];case 1:return"ok"!==n.sent().status?[2,e({message:"Failed to delete mail",type:"error"})]:(c(t),e({message:"Successfully deleted mail",type:"success"}),[2])}}))}))}),[e,c]),p=(0,r.useCallback)((function(t){var n=t.mailid,r=t.button;return l(void 0,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return[4,(0,o.Z)("npwd:qb-mail:updateButton",{mailid:n,button:r})];case 1:return"ok"!==t.sent().status?[2,e({message:"Failed to accept mail",type:"error"})]:(s(n),e({message:"Successfully accepted mail",type:"success"}),[2])}}))}))}),[e,s]);return{updateRead:d,deleteMail:f,updateMailButton:p}}},4766:(e,t,n)=>{n.d(t,{C:()=>l});var r=n(8320),a=n(2950),i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},i.apply(this,arguments)},o=function(e,t,n){if(n||2===arguments.length)for(var r,a=0,i=t.length;a<i;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))},l=function(){var e=(0,r.Wu)(),t=(0,a.useCallback)((function(t){e((function(e){return e.map((function(e){return e.mailid===t?i(i({},e),{read:1}):e}))}))}),[e]),n=(0,a.useCallback)((function(t){e((function(e){return o([t],e,!0)}))}),[e]),l=(0,a.useCallback)((function(t){e((function(e){var n=e.findIndex((function(e){return e.mailid===t})),r=o([],e,!0);return r[n].button=null,r}))}),[e]);return{updateReadState:t,deleteLocalMail:(0,a.useCallback)((function(t){e((function(e){return o([],e,!0).filter((function(e){return e.mailid!==t}))}))}),[e]),updateLocalButton:l,newMail:n}}},4714:(e,t,n)=>{n.d(t,{v:()=>d});var r=n(2950),a=n.n(r),i=n(5282),o=n(721),l=n(442),u=n(2658),c=function(){return c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},c.apply(this,arguments)};const s=(0,r.forwardRef)((function(e,t){return a().createElement(l.Z,c({sx:{zIndex:1e4},elevation:4,variant:"filled"},e,{ref:t}),a().createElement(u.Z,{sx:{maxWidth:"300px",wordWrap:"break-word",fontSize:"1.1em"}},e.children))}));var d=function(){var e,t=(0,o.D)(),n=t.alert,r=t.isOpen,l=t.handleClose;return a().createElement(i.Z,{autoHideDuration:null!==(e=null==n?void 0:n.duration)&&void 0!==e?e:3e3,open:r,sx:{display:"flex",justifyContent:"center",alignItems:"center",height:"auto",position:"absolute",bottom:75,left:"0 !important",right:"0 !important"},onClose:l},a().createElement(s,{severity:(null==n?void 0:n.type)||"info",onClose:l},(null==n?void 0:n.message)||""))}},602:(e,t,n)=>{n.d(t,{S:()=>i,Z:()=>o});var r=n(2950),a=n.n(r),i=(0,r.createContext)(null);const o=function(e){var t=e.children,n=(0,r.useState)(!1),o=n[0],l=n[1],u=(0,r.useState)(null),c=u[0],s=u[1];return a().createElement(i.Provider,{value:{alert:c,addAlert:function(e){s(e),l(!0)},handleClose:function(){l(!1)},isOpen:o}},t)}},721:(e,t,n)=>{n.d(t,{D:()=>i});var r=n(2950),a=n(602),i=function(){return(0,r.useContext)(a.S)}},7405:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(5181);const a=function(e,t,n){return a=this,i=void 0,l=function(){var a;return function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(i){switch(i.label){case 0:return a={method:"post",headers:{"Content-Type":"application/json; charset=UTF-8"},body:JSON.stringify(t)},(0,r.Id)()&&n?[2,n]:[4,fetch("https://".concat("npwd_qb_mail","/").concat(e),a)];case 1:return[4,i.sent().json()];case 2:return[2,i.sent()]}}))},new((o=void 0)||(o=Promise))((function(e,t){function n(e){try{u(l.next(e))}catch(e){t(e)}}function r(e){try{u(l.throw(e))}catch(e){t(e)}}function u(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(n,r)}u((l=l.apply(a,i||[])).next())}));var a,i,o,l}},5181:(e,t,n)=>{n.d(t,{Id:()=>r,ur:()=>o});var r=function(){return!1},a=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],i=["January","February","March","April","May","June","July","August","September","October","November","December"],o=function(e){var t=new Date(e);return a[t.getDay()]+", "+i[t.getMonth()]+" "+("0"+t.getDate()).slice(-2)+" "+t.getFullYear()+" "+t.getHours()+":"+t.getMinutes()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,